<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bruceeezhao.github.io/"/>
  <updated>2020-11-12T08:36:30.800Z</updated>
  <id>https://bruceeezhao.github.io/</id>
  
  <author>
    <name>bruce zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式学习之-05单例模式</title>
    <link href="https://bruceeezhao.github.io/2020/11/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B-05%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://bruceeezhao.github.io/2020/11/11/设计模式学习之-05单例模式/</id>
    <published>2020-11-11T08:00:11.000Z</published>
    <updated>2020-11-12T08:36:30.800Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//bruceeezhao.github.io/2020/11/11/设计模式学习之-05单例模式/qinshihuang.png" alt></p><h1 id="1-为什么需要单例模式"><a href="#1-为什么需要单例模式" class="headerlink" title="1. 为什么需要单例模式"></a>1. 为什么需要单例模式</h1><a id="more"></a><p>有很多对象我们只需要拥有一个实例：线程池、缓存、日志对象等。对于这些对象，如果我们有多于一个的实例，可能会造成不正确的程序行为，过多使用系统资源等问题。</p><p>单例模式是确保某一个类有且仅有一个实例的惯用方法。单例模式是经过时间检验的设计模式，它也提供了一种全局访问的方法，就像一个全局变量，但是没有全局变量的缺点：如果一个全局变量所关联的对象占用大量的系统资源，那么从程序启动，无论是否使用这个变量都会占用大量的系统资源，单例模式可以保证我们仅在需要它时才创建对象。</p><h1 id="2-经典的单例模式实现"><a href="#2-经典的单例模式实现" class="headerlink" title="2. 经典的单例模式实现"></a>2. 经典的单例模式实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// other useful instance variables here</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//other useful methods here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>使用私有的静态变量<code>uniqueInstance</code>来保存<code>Singleton</code>类的一个实例。</li><li>构造函数<code>Singleton()</code>声明为私有，这样只有它本身可以调用构造函数来创建对象。</li><li><code>getInstance()</code>方法提供了实例化<code>Singleton</code>类的方法，并且返回<code>Singleton</code>的实例。<ol><li>只有当变量<code>uniqueInstance</code>为null时才进行对象的创建，否则返回<code>uniqueInstance</code>。</li></ol></li></ol><h1 id="3-单例模式的线程安全"><a href="#3-单例模式的线程安全" class="headerlink" title="3. 单例模式的线程安全"></a>3. 单例模式的线程安全</h1><h2 id="3-1-非线程安全"><a href="#3-1-非线程安全" class="headerlink" title="3.1. 非线程安全"></a>3.1. 非线程安全</h2><p>我们要保证单例模式在多线程的情况下也只产生一个实例，这里我们以秦始皇为例。</p><p>下面的程序不是线程安全的，也就是说在多线程的情况下可能会产生多个实例。当两个线程同时执行到<code>qinShiHuang==null</code>时，两个线程均判断为空，就会在两个线程中都进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QinShiHuang</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> QinShiHuang qinShiHuang;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">QinShiHuang</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"秦始皇驾到"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> QinShiHuang <span class="title">getQinShiHuang</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (qinShiHuang==<span class="keyword">null</span>) &#123;</span><br><span class="line">            qinShiHuang = <span class="keyword">new</span> QinShiHuang();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> qinShiHuang;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                QinShiHuang.getQinShiHuang();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                QinShiHuang.getQinShiHuang();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">秦始皇驾到</span><br><span class="line">秦始皇驾到</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>从上面的结果可以看出，秦始皇的实例被创建了两次。</p><p>下面我们对其进行线程安全的改进</p><h2 id="3-2-线程安全的第一次尝试"><a href="#3-2-线程安全的第一次尝试" class="headerlink" title="3.2. 线程安全的第一次尝试"></a>3.2. 线程安全的第一次尝试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QinShiHuangT1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> QinShiHuangT1 qinShiHuang;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">QinShiHuangT1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"秦始皇驾到"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> QinShiHuangT1 <span class="title">getQinShiHuang</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (qinShiHuang==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (QinShiHuangT1.class) &#123;</span><br><span class="line">                qinShiHuang = <span class="keyword">new</span> QinShiHuangT1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> qinShiHuang;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在判断<code>qinShiHuang==null</code>之后为变量的赋值添加一个锁。</p><p>这样写有问题吗？是的，当两个线程同时判断<code>qinShiHuang==null</code>后，某一个线程进入临界区，创建了一个实例，之后释放锁，随后另一个线程进入临界区，再次创建一个实例。</p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                QinShiHuangT1.getQinShiHuang();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                QinShiHuangT1.getQinShiHuang();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">秦始皇驾到</span><br><span class="line">秦始皇驾到</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>从上面的结果我们可以看到，这种写法仍然不是线程安全的。</p><h2 id="3-3-线程安全的第二次尝试"><a href="#3-3-线程安全的第二次尝试" class="headerlink" title="3.3. 线程安全的第二次尝试"></a>3.3. 线程安全的第二次尝试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QinShiHuangT2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> QinShiHuangT2 qinShiHuang;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">QinShiHuangT2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"秦始皇驾到"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> QinShiHuangT2 <span class="title">getQinShiHuang</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (qinShiHuang==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (QinShiHuangT2.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (qinShiHuang==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    qinShiHuang = <span class="keyword">new</span> QinShiHuangT2();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> qinShiHuang;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与第一次尝试代码的不同在于，在线程进入临界区后我们又进行了一次判断<code>if (qinShiHuang==null)</code>，这样的双重检测机制保证了线程在实例化之前判断有没有其他线程进行了实例化。</p><p>但是这样仍然会有线程安全的问题。问题在于指令重排序。<a href="https://www.bilibili.com/video/BV1eK4y1E74F?p=8" target="_blank" rel="noopener">关于指令重排序的视频讲解</a></p><p>上面的函数对应的字节码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> 0 getstatic #6 &lt;QinShiHuangT2.qinShiHuang&gt;</span><br><span class="line"> 3 ifnonnull 37 (+34)</span><br><span class="line"> 6 ldc #7 &lt;QinShiHuangT2&gt;</span><br><span class="line"> 8 dup</span><br><span class="line"> 9 astore_0</span><br><span class="line">10 monitorenter</span><br><span class="line">11 getstatic #6 &lt;QinShiHuangT2.qinShiHuang&gt;</span><br><span class="line">14 ifnonnull 27 (+13)</span><br><span class="line">17 new #7 &lt;QinShiHuangT2&gt;</span><br><span class="line">20 dup</span><br><span class="line">21 invokespecial #8 &lt;QinShiHuangT2.&lt;init&gt;&gt;</span><br><span class="line">24 putstatic #6 &lt;QinShiHuangT2.qinShiHuang&gt;</span><br><span class="line">27 aload_0</span><br><span class="line">28 monitorexit</span><br><span class="line">29 goto 37 (+8)</span><br><span class="line">32 astore_1</span><br><span class="line">33 aload_0</span><br><span class="line">34 monitorexit</span><br><span class="line">35 aload_1</span><br><span class="line">36 athrow</span><br><span class="line">37 getstatic #6 &lt;QinShiHuangT2.qinShiHuang&gt;</span><br><span class="line">40 areturn</span><br></pre></td></tr></table></figure><p>synchronized代码块对应的字节码为10-28 行的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">10 monitorenter</span><br><span class="line">11 getstatic #6 &lt;QinShiHuangT2.qinShiHuang&gt;</span><br><span class="line">14 ifnonnull 27 (+13)</span><br><span class="line">17 new #7 &lt;QinShiHuangT2&gt;</span><br><span class="line">20 dup</span><br><span class="line">21 invokespecial #8 &lt;QinShiHuangT2.&lt;init&gt;&gt;</span><br><span class="line">24 putstatic #6 &lt;QinShiHuangT2.qinShiHuang&gt;</span><br><span class="line">27 aload_0</span><br><span class="line">28 monitorexit</span><br></pre></td></tr></table></figure><p>从上面的字节码我们来看这段程序做了什么，首先获取了静态变量[11]，然后判断非空[14]，然后申请内存[17]，然后复制栈顶元素<a href="https://stackoverflow.com/questions/7282585/why-do-dup-when-creating-new-instance" target="_blank" rel="noopener">20</a>，然后调用构造函数[21]，然后赋值给静态变量[24]。</p><p>指令重排序是指：<a href="https://www.cnblogs.com/jackeason/p/11336306.html" target="_blank" rel="noopener">指令重排序</a></p><blockquote><p>Java语言规范JVM线程内部维持顺序花语义，即只要程序的最终结果与它顺序化情况的结果相等，那么指令的执行顺序可以与代码逻辑顺序不一致，这个过程就叫做指令的重排序。</p><p>  指令重排序的意义：使指令更加符合CPU的执行特性，最大限度的发挥机器的性能，提高程序的执行效率。</p></blockquote><p>假设21 和 24 被交换了执行顺序，那么静态变量先获得了赋值，此时静态变量不为空，但是却没有完成构造，此时如果有一个线程进入<code>getQinShiHuang()</code>函数，它的判断结果就是<code>qinShiHuang</code>不为空，并且返回这个变量，但是由于没有完成实例化，因此<code>qinShiHuang</code>是个没有数据的变量，另一个线程使用时就会出现问题。因此应该禁止指令重排序，来保证线程安全。</p><h2 id="3-4-线程安全"><a href="#3-4-线程安全" class="headerlink" title="3.4. 线程安全"></a>3.4. 线程安全</h2><p>使用volatile关键字</p><p>volatile关键字的作用：</p><ol><li>保证变量对所有线程的可见性</li><li>禁止指令重排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QinShiHuangT2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> QinShiHuangT2 qinShiHuang;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">QinShiHuangT2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"秦始皇驾到"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> QinShiHuangT2 <span class="title">getQinShiHuang</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (qinShiHuang==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (QinShiHuangT2.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (qinShiHuang==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    qinShiHuang = <span class="keyword">new</span> QinShiHuangT2();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> qinShiHuang;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><p>[1] <a href="https://the.bytecode.club/pages.php?page=opcodes" target="_blank" rel="noopener">java字节码对照表</a></p></li><li><p>[2] <a href="https://www.bilibili.com/video/BV1eK4y1E74F?p=8" target="_blank" rel="noopener">关于指令重排序的视频讲解</a></p></li><li><p>[3] <a href="https://stackoverflow.com/questions/7282585/why-do-dup-when-creating-new-instance" target="_blank" rel="noopener">new 后面为什么要跟着dup</a></p></li><li><p>[4] <a href="https://www.cnblogs.com/jackeason/p/11336306.html" target="_blank" rel="noopener">指令重排序</a></p></li><li><p>[5] <a href="https://zhuanlan.zhihu.com/p/33102022" target="_blank" rel="noopener">漫画：什么是单例模式？</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;//bruceeezhao.github.io/2020/11/11/设计模式学习之-05单例模式/qinshihuang.png&quot; alt&gt;&lt;/p&gt;&lt;h1 id=&quot;1-为什么需要单例模式&quot;&gt;&lt;a href=&quot;#1-为什么需要单例模式&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么需要单例模式&quot;&gt;&lt;/a&gt;1. 为什么需要单例模式&lt;/h1&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://bruceeezhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习之-04工厂模式</title>
    <link href="https://bruceeezhao.github.io/2020/11/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B-04%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/</id>
    <published>2020-11-06T07:14:28.000Z</published>
    <updated>2020-11-09T11:01:56.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/factoryPattern.png" alt></p><p>tips:</p><p>本文的代码均在<a href="https://github.com/bruceEeZhao/JavaLearn/tree/master/designPatterns/src/factory" target="_blank" rel="noopener">代码连接</a></p><a id="more"></a><h1 id="1-遇到的问题"><a href="#1-遇到的问题" class="headerlink" title="1. 遇到的问题"></a>1. 遇到的问题</h1><p>前面三章我们一直在强调对接口编程，以增加程序的灵活性和降低耦合性，但是我们仍然不断地使用new关键字，例如下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Duck duck = <span class="keyword">new</span> MallardDuck();</span><br></pre></td></tr></table></figure><p>我们想使用接口来保持代码的灵活性，但是我们不得不创建一个具体类的实例。</p><p>当我们大量相关的类时，我们通常会将代码写成下面的样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 我们有大量的Duck的子类，直到运行时我们才能知道哪个类是需要实例化的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Duck duck;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (picnic) &#123;</span><br><span class="line">    duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (hunting) &#123;</span><br><span class="line">    duck = <span class="keyword">new</span> DecoyDuck();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (inBathTub) &#123;</span><br><span class="line">    duck = <span class="keyword">new</span> RubberDuck();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们有一系列的类的实例，决定运行时哪个进行实例化是由一系列的判断条件来决定的。</p><p>当有条件增加或减少时，我们就需要打开这段代码进行修改，这实际上违背了“对修改关闭”的设计原则。为了扩展新的类型，必须对其修改。</p><h1 id="2-以披萨店为例"><a href="#2-以披萨店为例" class="headerlink" title="2. 以披萨店为例"></a>2. 以披萨店为例</h1><p>假设你是一家披萨店的老板，你的店里有三种披萨，点单的流程包括，1. 选择披萨类型 2. 准备材料 3. 烘焙 4. 切分 5. 装盒。那么点单的代码可能会写成下面的样子：</p><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/factory/PizzaStore.java" target="_blank" rel="noopener">代码路径</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">        pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">        pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">        pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">    pizza.cut();</span><br><span class="line">    pizza.box();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在你开发出了新产品，Clam和Veggie，并且删掉了一个老产品Greek，所以你就需要将代码修改成下面的样子</p><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/factory/PizzaStore.java" target="_blank" rel="noopener">代码路径</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变化的部分</span></span><br><span class="line">    <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">        pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="comment">/*else if (type.equals("greek")) &#123;</span></span><br><span class="line"><span class="comment">        pizza = new GreekPizza();</span></span><br><span class="line"><span class="comment">    &#125; */</span><span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">        pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"clam"</span>)) &#123;</span><br><span class="line">        pizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"veggie"</span>)) &#123;</span><br><span class="line">        pizza = <span class="keyword">new</span> VeggiePizza();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不变的部分</span></span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">    pizza.cut();</span><br><span class="line">    pizza.box();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>披萨的类型不断变化我们就需要不断地修改if–else if的判断条件。在上面的代码中我用注释标出了变化的部分和不变的部分。我们想要把变化的部分独立出去。</p><h1 id="3-简单工厂"><a href="#3-简单工厂" class="headerlink" title="3. 简单工厂"></a>3. 简单工厂</h1><h2 id="3-1-封装创建对象的代码"><a href="#3-1-封装创建对象的代码" class="headerlink" title="3.1. 封装创建对象的代码"></a>3.1. 封装创建对象的代码</h2><p>我们想要把对象创建的部分拿到orderPizza()函数外面。但是，怎么做呢？我们将要做的是把创建对象的代码移到另一个只关心创建披萨的对象中。</p><p><img src="//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/Factory1.png" alt></p><p>这个新的对象我们称之为—工厂。工厂负责对象创建的细节。一旦我们有了SimplePizzaFactory，我们的orderPizza方法就成了对象的一个client。orderPizza需要一个披萨时就要求工厂制作一个。</p><h2 id="3-2-创建一个SimplePizzaFactory"><a href="#3-2-创建一个SimplePizzaFactory" class="headerlink" title="3.2. 创建一个SimplePizzaFactory"></a>3.2. 创建一个SimplePizzaFactory</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/factory/SimplePizzaFactory.java" target="_blank" rel="noopener">代码路径</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"clam"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"veggie"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> VeggiePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-1-一个问题"><a href="#3-2-1-一个问题" class="headerlink" title="3.2.1. 一个问题"></a>3.2.1. 一个问题</h3><ol><li><p>这不就是把代码换了个类吗？这么写有什么提升呢？</p><p>SimplePizzaFactory可能会有很多clients。我们仅仅看到了orderPizza这个方法，可能还会有一个PizzaShopMenu方法使用工厂来获取披萨的描述和价格，可能还会有一个HomeDelivery类，同样也是工厂的client，它用不同于现在处理披萨的方式来处理。</p><p>因此通过把创建披萨的方法封装到另一个类中，我们现在只需要修改一个地方即可完成修改。</p></li></ol><h2 id="3-3-重写PizzaStore类"><a href="#3-3-重写PizzaStore类" class="headerlink" title="3.3. 重写PizzaStore类"></a>3.3. 重写PizzaStore类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    SimplePizzaFactory factory;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span><span class="params">(SimplePizzaFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza;</span><br><span class="line"></span><br><span class="line">        pizza = factory.createPizza(type);</span><br><span class="line"></span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-简单工厂"><a href="#3-4-简单工厂" class="headerlink" title="3.4. 简单工厂"></a>3.4. 简单工厂</h2><p>简单工厂并不是一个真正意义上的设计模式，它更像是一个编程习惯。虽然不是一个真正的设计模式，但是它也经常被使用。</p><p>下面是PizzaStore的类图。</p><p><img src="//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/PizzaStore.png" alt></p><p>测试代码：<a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/factory/PizzaStore.java" target="_blank" rel="noopener">代码路径</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SimplePizzaFactory sp = <span class="keyword">new</span> SimplePizzaFactory();</span><br><span class="line">       PizzaStore ps = <span class="keyword">new</span> PizzaStore(sp);</span><br><span class="line"></span><br><span class="line">       ps.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">       ps.orderPizza(<span class="string">"clam"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cheese + milk + flour</span><br><span class="line">220 degree 45 minutes</span><br><span class="line">cut</span><br><span class="line">box</span><br><span class="line">clam + milk + flour</span><br><span class="line">250 degree 40 minutes</span><br><span class="line">cut</span><br><span class="line">box</span><br></pre></td></tr></table></figure><h1 id="4-工厂方法"><a href="#4-工厂方法" class="headerlink" title="4. 工厂方法"></a>4. 工厂方法</h1><h2 id="4-1-分店"><a href="#4-1-分店" class="headerlink" title="4.1. 分店"></a>4.1. 分店</h2><p>你的披萨店开的非常好，其他人也想在他们的城市开设披萨分店。你想让他们使用经过验证的代码。但是问题也随之而来，分店可能需要根据当地的饮食习惯制作不同种类的披萨。</p><p>鉴于我们上面的简单工厂方法是有效的，我们仍然可以采用相同的思路：用不同的工厂来解决这个问题，例如三个不同的工厂—NYPizzaFactory, ChicagoPizzaFactory, CaliforniaPizzaFactory。</p><p><img src="//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/threeFactories.png" alt></p><p>代码像下面这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NYPizzaFactory nyFactory = <span class="keyword">new</span> NYPizzaFactory();</span><br><span class="line">PizzaStore nyStore = <span class="keyword">new</span> PizzaStore(nyFactory);</span><br><span class="line">nyStore.orderPizza(<span class="string">"Veggie"</span>);</span><br><span class="line"></span><br><span class="line">ChicagoPizzaFactory chicagoFactory = <span class="keyword">new</span> ChicagoPizzaFactory();</span><br><span class="line">PizzaStore chicagoStore = <span class="keyword">new</span> PizzaStore(chicagoFactory);</span><br><span class="line">nyStore.orderPizza(<span class="string">"Veggie"</span>);</span><br></pre></td></tr></table></figure><h2 id="4-2-另一种方式—工厂方法"><a href="#4-2-另一种方式—工厂方法" class="headerlink" title="4.2. 另一种方式—工厂方法"></a>4.2. 另一种方式—工厂方法</h2><h3 id="4-2-1-实现"><a href="#4-2-1-实现" class="headerlink" title="4.2.1. 实现"></a>4.2.1. 实现</h3><p>我们真正想要的是一个框架，这个框架把店铺和披萨制作绑定起来，与此同时，保证灵活性。</p><p>为了控制这些流程，一个方法是把披萨制作的活动固定到PizzaStore中。我们把createPizza()方法放到PizzaStore类中，但是这次是作为一个抽象函数。</p><p>下面我们重写PizzaStore类：<a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/factory/PizzaStoreAbstr.java" target="_blank" rel="noopener">代码路径</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStoreAbstr</span> </span>&#123;</span><br><span class="line">    <span class="function">Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza;</span><br><span class="line"></span><br><span class="line">        pizza = createPizza(type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pizza != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pizza.prepare();</span><br><span class="line">            pizza.bake();</span><br><span class="line">            pizza.cut();</span><br><span class="line">            pizza.box();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个设计中，我们让抽象函数<code>abstract Pizza createPizza(String type);</code>来负责各种不同种类披萨的制作，因此我们会创建多个PizzaStoreAbstr的子类，来实现多种种类的披萨的制作</p><p><img src="//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/PizzaStoreAbstr.png" alt></p><p>通过对PizzaStore类的改写，我们的处理逻辑从原来的由一个对象(simpleFactory)来负责具体类(Pizza)的实例化，变成现在的由一组子类来负责。</p><p>实例化披萨的职责被交给了<code>abstract Pizza createPizza(String type);</code>，createPizza函数的身份就是工厂。这个方法我们称为工厂方法。</p><ol><li>工厂方法是一个抽象方法，因此子类可以决定对象的创建</li><li>工厂方法返回一个对象</li><li>超类里的其他成员不需要直到工厂方法的具体实现细节。</li></ol><p>类图：</p><p><img src="//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/Creater&Product.png" alt></p><p>实现NYPizzaStore：<a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/factory/NYPizzaStore.java" target="_blank" rel="noopener">代码路径</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStoreAbstr</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStyleCheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStyleGreekPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStylePepperoniPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"clam"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStyleClamPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"veggie"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NYStyleVeggiePizza();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现具体的披萨:<a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/factory/CheesePizza.java" target="_blank" rel="noopener">代码路径</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NYStyleCheesePizza</span> <span class="keyword">extends</span>  <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"NY cheese + milk + flour"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"NY 220 degree 45 minutes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：<a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/factory/PizzaTestDrive.java" target="_blank" rel="noopener">代码路径</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PizzaStoreAbstr nyStore = <span class="keyword">new</span> NYPizzaStore();</span><br><span class="line">        PizzaStoreAbstr chicagoStore = <span class="keyword">new</span> ChicagoPizzaStore();</span><br><span class="line"></span><br><span class="line">        nyStore.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line"></span><br><span class="line">        chicagoStore.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NY cheese + milk + flour</span><br><span class="line">NY 220 degree 45 minutes</span><br><span class="line">cut</span><br><span class="line">box</span><br><span class="line">Chicago cheese + milk + flour</span><br><span class="line">Chicago 220 degree 45 minutes</span><br><span class="line">cut</span><br><span class="line">box</span><br></pre></td></tr></table></figure><h3 id="4-2-2-定义"><a href="#4-2-2-定义" class="headerlink" title="4.2.2. 定义"></a>4.2.2. 定义</h3><blockquote><p>The Factory Method Pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</p></blockquote><p>把上面的类图抽象一下，得到下面的类图：</p><p><img src="//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/creator&product.png" alt></p><ol><li>所有的产品都实现同一个Product接口，保证所有使用产品的类都与接口相关而和具体的产品实现无关。</li><li>Creator是一个类，除工厂方法外，实现了所有与产品相关的方法。</li><li>工厂方法是一个抽象函数</li><li>Creator的子类负责实现工厂方法，决定具体Product的创建</li></ol><h3 id="4-2-3-依赖倒置原则"><a href="#4-2-3-依赖倒置原则" class="headerlink" title="4.2.3. 依赖倒置原则"></a>4.2.3. 依赖倒置原则</h3><blockquote><p>Depend upon abstractions. Do not depend upon concrete classes。</p></blockquote><p>依赖抽象而非具体类。</p><p>设计方针：</p><ol><li><p>变量不可以拥有具体类的引用</p><p>如果使用new，就会持有具体类的引用。</p></li><li><p>不要让类派生自具体类</p><p>从一个抽象派生，例如接口或抽象类</p></li><li><p>不要重写基类中实现的方法</p><p>基类中实现的方法应该是子类都相同的方法</p></li></ol><h1 id="5-抽象工厂"><a href="#5-抽象工厂" class="headerlink" title="5. 抽象工厂"></a>5. 抽象工厂</h1><p>回到披萨店的问题上，我们设计的这个框架具有弹性且满足设计原则。但是我们想要确保每一家分店都能使用高质量的原材料，因此我们需要建立工厂提供原材料。并且每个地区材料在做法上可能会有些不同。</p><h2 id="5-1-我们需要做什么"><a href="#5-1-我们需要做什么" class="headerlink" title="5.1. 我们需要做什么"></a>5.1. 我们需要做什么</h2><ol><li>实现工厂类的接口</li><li>为每个地区建立工厂</li><li>实现一组原材料类，如ReggianoCheese,RedPepper等，这些类可以在地区间共享</li></ol><p><a href="https://github.com/bruceEeZhao/JavaLearn/tree/master/designPatterns/src/factory/pizzaaf" target="_blank" rel="noopener">代码路径</a></p><p>工厂接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Veggies <span class="title">createVeggies</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clams <span class="title">createClam</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ThinCrustDough();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MarinaraSauce();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ReggianoCheese();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Veggies[] createVeggies() &#123;</span><br><span class="line">Veggies veggies[] = &#123; <span class="keyword">new</span> Garlic(), <span class="keyword">new</span> Onion(), <span class="keyword">new</span> Mushroom(), <span class="keyword">new</span> RedPepper() &#125;;</span><br><span class="line"><span class="keyword">return</span> veggies;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Pepperoni <span class="title">createPepperoni</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SlicedPepperoni();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Clams <span class="title">createClam</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FreshClams();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改Pizza类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">Dough dough;</span><br><span class="line">Sauce sauce;</span><br><span class="line">Veggies veggies[];</span><br><span class="line">Cheese cheese;</span><br><span class="line">Pepperoni pepperoni;</span><br><span class="line">Clams clam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Bake for 25 minutes at 350"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Cutting the pizza into diagonal slices"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Place pizza in official PizzaStore box"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原材料准备放在prepare函数中进行</p><p>具体的Pizza</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">PizzaIngredientFactory ingredientFactory;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Preparing "</span> + name);</span><br><span class="line">dough = ingredientFactory.createDough();</span><br><span class="line">sauce = ingredientFactory.createSauce();</span><br><span class="line">cheese = ingredientFactory.createCheese();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写PizzaStore</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">PizzaIngredientFactory ingredientFactory = </span><br><span class="line"><span class="keyword">new</span> NYPizzaIngredientFactory();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (item.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">  </span><br><span class="line">pizza = <span class="keyword">new</span> CheesePizza(ingredientFactory);</span><br><span class="line">pizza.setName(<span class="string">"New York Style Cheese Pizza"</span>);</span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"veggie"</span>)) &#123;</span><br><span class="line"> </span><br><span class="line">pizza = <span class="keyword">new</span> VeggiePizza(ingredientFactory);</span><br><span class="line">pizza.setName(<span class="string">"New York Style Veggie Pizza"</span>);</span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"clam"</span>)) &#123;</span><br><span class="line"> </span><br><span class="line">pizza = <span class="keyword">new</span> ClamPizza(ingredientFactory);</span><br><span class="line">pizza.setName(<span class="string">"New York Style Clam Pizza"</span>);</span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">pizza = <span class="keyword">new</span> PepperoniPizza(ingredientFactory);</span><br><span class="line">pizza.setName(<span class="string">"New York Style Pepperoni Pizza"</span>);</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaTestDrive</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">PizzaStore nyStore = <span class="keyword">new</span> NYPizzaStore();</span><br><span class="line">PizzaStore chicagoStore = <span class="keyword">new</span> ChicagoPizzaStore();</span><br><span class="line"> </span><br><span class="line">Pizza pizza = nyStore.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">System.out.println(<span class="string">"Ethan ordered a "</span> + pizza + <span class="string">"\n"</span>);</span><br><span class="line"> </span><br><span class="line">pizza = chicagoStore.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line">System.out.println(<span class="string">"Joel ordered a "</span> + pizza + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--- Making a New York Style Cheese Pizza ---</span><br><span class="line">Preparing New York Style Cheese Pizza</span><br><span class="line">Bake for 25 minutes at 350</span><br><span class="line">Cutting the pizza into diagonal slices</span><br><span class="line">Place pizza in official PizzaStore box</span><br><span class="line">Ethan ordered a ---- New York Style Cheese Pizza ----</span><br><span class="line">Thin Crust Dough</span><br><span class="line">Marinara Sauce</span><br><span class="line">Reggiano Cheese</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Making a Chicago Style Cheese Pizza ---</span><br><span class="line">Preparing Chicago Style Cheese Pizza</span><br><span class="line">Bake for 25 minutes at 350</span><br><span class="line">Cutting the pizza into diagonal slices</span><br><span class="line">Place pizza in official PizzaStore box</span><br><span class="line">Joel ordered a ---- Chicago Style Cheese Pizza ----</span><br><span class="line">ThickCrust style extra thick crust dough</span><br><span class="line">Tomato sauce with plum tomatoes</span><br><span class="line">Shredded Mozzarella</span><br></pre></td></tr></table></figure><h2 id="5-2-定义"><a href="#5-2-定义" class="headerlink" title="5.2. 定义"></a>5.2. 定义</h2><blockquote><p>The Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.</p></blockquote><p>抽象工厂模式提供一个接口，用于创建相关或依赖对象的族，而不需要明确制定具体类。</p><p><img src="//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/abstractFactory1.png" alt></p><p>实际上抽象工厂里的方法就是一个工厂方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;//bruceeezhao.github.io/2020/11/06/设计模式学习之-04工厂模式/factoryPattern.png&quot; alt&gt;&lt;/p&gt;&lt;p&gt;tips:&lt;/p&gt;&lt;p&gt;本文的代码均在&lt;a href=&quot;https://github.com/bruceEeZhao/JavaLearn/tree/master/designPatterns/src/factory&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码连接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://bruceeezhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop</title>
    <link href="https://bruceeezhao.github.io/2020/11/05/Hadoop/"/>
    <id>https://bruceeezhao.github.io/2020/11/05/Hadoop/</id>
    <published>2020-11-05T11:44:48.000Z</published>
    <updated>2020-11-10T08:35:42.025Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//bruceeezhao.github.io/2020/11/05/Hadoop/Hadoop1vs2.png" alt></p><h1 id="1-Hadoop初识"><a href="#1-Hadoop初识" class="headerlink" title="1. Hadoop初识"></a>1. Hadoop初识</h1><a id="more"></a><h2 id="1-1-Hadoop1-x-与-2-x的区别"><a href="#1-1-Hadoop1-x-与-2-x的区别" class="headerlink" title="1.1. Hadoop1.x 与 2.x的区别"></a>1.1. Hadoop1.x 与 2.x的区别</h2><p>如首图所示，在1.x中MapReduce负责计算和资源调度，在2.x中，将资源调度的功能从MapReduce中分离出来，增加了Yarn模块。</p><h2 id="1-2-HDFS架构"><a href="#1-2-HDFS架构" class="headerlink" title="1.2. HDFS架构"></a>1.2. HDFS架构</h2><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html" target="_blank" rel="noopener">HDFS文档</a></p><p><img src="//bruceeezhao.github.io/2020/11/05/Hadoop/hdfsarchitecture.png" alt></p><ol><li>NameNode: 存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的DataNode等</li><li>DataNode: 在本地文件系统存储文件块数据，以及块数据的校验和</li><li>Secondary NameNode：用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照</li></ol><h2 id="1-3-Yarn架构"><a href="#1-3-Yarn架构" class="headerlink" title="1.3. Yarn架构"></a>1.3. Yarn架构</h2><p><a href="https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html" target="_blank" rel="noopener">Yarn文档</a></p><p><img src="//bruceeezhao.github.io/2020/11/05/Hadoop/yarn_architecture.gif" alt></p><ol><li><p>Resource Manager:的主要功能</p><ol><li>处理客户端请求</li><li>监控NodeManager</li><li>启动或监控ApplicationMaster</li><li>资源的分配与调度</li></ol></li><li><p>NodeManager:的主要功能</p><ol><li>管理单个节点上的资源</li><li>处理来自Resource Manager的命令</li><li>处理来自ApplicationMaster的命令</li></ol></li><li><p>ApplicationMaste:</p><ol><li>负责数据的切分</li><li>为应用程序申请资源与分配给内部的任务</li><li>任务的监控与容错</li></ol></li><li><p>Container</p><p>Container是Yarn中的资源抽象，它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等。</p></li></ol><h2 id="1-4-MapReduce"><a href="#1-4-MapReduce" class="headerlink" title="1.4. MapReduce"></a>1.4. MapReduce</h2><p><a href="http://hadoop.apache.org/docs/r1.2.1/mapred_tutorial.html" target="_blank" rel="noopener">MapReduce文档</a></p><p>MapReduce将计算过程分为两个阶段：Map和Redece</p><p>1) Map阶段并行处理输入数据</p><p>2) Reduce阶段对Map结果进行汇总</p><h1 id="2-HDFS"><a href="#2-HDFS" class="headerlink" title="2. HDFS"></a>2. HDFS</h1><p>使用场景：适合一次写入，多次读出的场景，且不支持文件修改。适合用来做数据分析。</p><h2 id="2-1-优缺点"><a href="#2-1-优缺点" class="headerlink" title="2.1. 优缺点"></a>2.1. 优缺点</h2><h3 id="2-1-1-优点"><a href="#2-1-1-优点" class="headerlink" title="2.1.1. 优点"></a>2.1.1. 优点</h3><ol><li>高容错性<ol><li>数据自动保存多个副本，通过增加副本的形式提高容错性。</li><li>某一个副本丢失后，会自动创建新的副本，保证副本的数量</li></ol></li><li>适合处理大数据<ol><li>数据规模：能够处理GB,TB甚至PB级的数据</li><li>文件规模：能够处理百万规模以上的文件数量</li></ol></li><li>可在廉价机上构建</li></ol><h3 id="2-1-2-缺点"><a href="#2-1-2-缺点" class="headerlink" title="2.1.2. 缺点"></a>2.1.2. 缺点</h3><ol><li>不适合低延时数据访问，比如毫秒级</li><li>无法高效的对大量小文件进行存储<ol><li>存储小文件会占用NameNode大量的内存来存储文件目录和块信息。</li><li>小文件存储的寻址时间会超过读取时间</li></ol></li><li>不支持并发写入，文件随机修改<ol><li>一个文件只能有一个写，不允许多个线程同时写</li><li>仅支持数据追加（append），不支持文件随机修改</li></ol></li></ol><h2 id="2-2-组成架构"><a href="#2-2-组成架构" class="headerlink" title="2.2. 组成架构"></a>2.2. 组成架构</h2><p><img src="//bruceeezhao.github.io/2020/11/05/Hadoop/hdfsarchitecture.png" alt></p><ol><li>NameNode: （master）<ol><li>管理HDFS的名称空间</li><li>配置副本策略</li><li>管理数据块（Block）映射信息</li><li>处理客户端读写请求</li></ol></li><li>DataNode: （slave）<ol><li>存储实际的数据块</li><li>执行数据块的读写操作</li></ol></li><li>client<ol><li>文件切分。文件上传HDFS的时候，Client将文件切分成多个Block，然后上传。</li><li>与NameNode交互，获取文件的位置信息。</li><li>与DataNode交互，读取或写入数据。</li><li>Client提供一些命令管理HDFS</li><li>通过命令访问HDFS，如增删查改等</li></ol></li><li>Secondary NameNode：并非NameNode的热备。当NameNode挂掉的时候并不能马上替换NameNode并提供服务<ol><li>复制NameNode，分担其工作，如定期合并Fsimage和Edits，并推送给NameNode</li><li>在紧急情况下，可辅助恢复NameNode</li></ol></li></ol><h3 id="2-2-1-文件块大小（面试题）"><a href="#2-2-1-文件块大小（面试题）" class="headerlink" title="2.2.1. 文件块大小（面试题）"></a>2.2.1. 文件块大小（面试题）</h3><p>通过配置参数 <code>dfs.blocksize</code>来确定，默认大小在Hadoop2.x中是128M，老版本中是64M。这个大小是根据寻址时间和硬盘写入速度确定的，最佳状态是寻址时间是传输时间的1%。按寻址时间10ms，传输速度100M/s来计算，块大小需为100M。</p><p>块设置很小，就会增加寻址时间；如果太大，传输数据的时间会明显大于寻址时间。</p><h2 id="2-3-HDFS-API"><a href="#2-3-HDFS-API" class="headerlink" title="2.3. HDFS API"></a>2.3. HDFS API</h2><h3 id="2-3-1-环境配置"><a href="#2-3-1-环境配置" class="headerlink" title="2.3.1. 环境配置"></a>2.3.1. 环境配置</h3><ol><li><p>新建mvn工程</p></li><li><p>添加依赖</p><p>在<a href="https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client/2.9.2" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client/2.9.2</a> 选择与部署hadoop版本相同的mvn依赖，并添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置log4j</p><ol><li><p>新建log4j.properties文件</p></li><li><p>把下面的内容添加到文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">### 设置###</span><br><span class="line">log4j.rootLogger = info,stdout,D,E</span><br><span class="line"></span><br><span class="line">### 输出信息到控制抬 ###</span><br><span class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target = System.out</span><br><span class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span><br><span class="line"></span><br><span class="line">### 输出DEBUG 级别以上的日志到=E://logs/error.log ###</span><br><span class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.D.File = ./logs/log.log</span><br><span class="line">log4j.appender.D.Append = true</span><br><span class="line">log4j.appender.D.Threshold = DEBUG</span><br><span class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line"></span><br><span class="line">### 输出ERROR 级别以上的日志到=E://logs/error.log ###</span><br><span class="line">log4j.appender.E = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.E.File =./logs/error.log</span><br><span class="line">log4j.appender.E.Append = true</span><br><span class="line">log4j.appender.E.Threshold = ERROR</span><br><span class="line">log4j.appender.E.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br></pre></td></tr></table></figure></li></ol></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HDFSClient h = <span class="keyword">new</span> HDFSClient();</span><br><span class="line">        h.test();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 0 一个简单的测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9091"</span>);</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1 获取hdfs客户端对象</span></span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2 在hdfs上创建路径</span></span><br><span class="line">            fs.mkdirs(<span class="keyword">new</span> Path(<span class="string">"/1109/dashi"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3 关闭资源</span></span><br><span class="line">            fs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hadoop fs -ls /</span><br><span class="line">Found 1 items</span><br><span class="line">drwxr-xr-x   - bruce supergroup          0 2020-11-10 10:56 /1109</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-3-2-上传文件"><a href="#2-3-2-上传文件" class="headerlink" title="2.3.2. 上传文件"></a>2.3.2. 上传文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 文件上传</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFromLoaclFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 获取fs对象</span></span><br><span class="line">       Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">       conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9091"</span>);</span><br><span class="line">       FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 执行上传api</span></span><br><span class="line">           fs.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">"/home/bruce/Desktop/hadooptest.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"/hadooptest.txt"</span>));</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 关闭资源</span></span><br><span class="line">           fs.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hadoop fs -ls /</span><br><span class="line">Found 2 items</span><br><span class="line">drwxr-xr-x   - bruce supergroup          0 2020-11-10 10:56 /1109</span><br><span class="line">-rw-r--r--   3 bruce supergroup         97 2020-11-10 11:15 /hadooptest.txt</span><br></pre></td></tr></table></figure><h3 id="2-3-3-下载文件"><a href="#2-3-3-下载文件" class="headerlink" title="2.3.3. 下载文件"></a>2.3.3. 下载文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 文件下载</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyToLocalFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 获取fs对象</span></span><br><span class="line">       Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">       conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9091"</span>);</span><br><span class="line">       FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 执行下载api</span></span><br><span class="line">           fs.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">"/hadooptest.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"./hadoop.txt"</span>));</span><br><span class="line">           <span class="comment">// 关闭资源</span></span><br><span class="line">           fs.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-文件删除"><a href="#2-3-4-文件删除" class="headerlink" title="2.3.4. 文件删除"></a>2.3.4. 文件删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3 文件删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取fs对象</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9091"</span>);</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行删除api</span></span><br><span class="line">            fs.delete(<span class="keyword">new</span> Path(<span class="string">"/hadooptest.txt"</span>));</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            fs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-文件信息打印"><a href="#2-3-5-文件信息打印" class="headerlink" title="2.3.5. 文件信息打印"></a>2.3.5. 文件信息打印</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4 查看文件信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取fs对象</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9091"</span>);</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查看文件信息</span></span><br><span class="line">            RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fs.listFiles(<span class="keyword">new</span> Path(<span class="string">"/"</span>), <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">while</span> (listFiles.hasNext()) &#123;</span><br><span class="line">                LocatedFileStatus fileStatus = listFiles.next();</span><br><span class="line">                System.out.println(fileStatus.getPath().getName());</span><br><span class="line">                System.out.println(fileStatus.getPermission());</span><br><span class="line">                System.out.println(fileStatus.getLen());</span><br><span class="line"></span><br><span class="line">                BlockLocation[] blockLocations = fileStatus.getBlockLocations();</span><br><span class="line">                <span class="keyword">for</span> (BlockLocation block: blockLocations</span><br><span class="line">                     ) &#123;</span><br><span class="line">                    String[] hosts = block.getHosts();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (String host: hosts) &#123;</span><br><span class="line">                        System.out.println(host);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            fs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-HDFS-I-O流操作"><a href="#2-4-HDFS-I-O流操作" class="headerlink" title="2.4. HDFS I/O流操作"></a>2.4. HDFS I/O流操作</h2><h3 id="2-4-1-上传文件"><a href="#2-4-1-上传文件" class="headerlink" title="2.4.1. 上传文件"></a>2.4.1. 上传文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpLoadFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9091"</span>);</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1 获取对象</span></span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2 获取输入流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/home/bruce/Desktop/hadooptest.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3 获取输出流</span></span><br><span class="line">            FSDataOutputStream fos = fs.create(<span class="keyword">new</span> Path(<span class="string">"/zhangsan.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4 流的对烤</span></span><br><span class="line">            IOUtils.copyBytes(fis, fos, conf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5 关闭资源</span></span><br><span class="line">            IOUtils.closeStream(fis);</span><br><span class="line">            IOUtils.closeStream(fos);</span><br><span class="line">            fs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-下载文件"><a href="#2-4-2-下载文件" class="headerlink" title="2.4.2. 下载文件"></a>2.4.2. 下载文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDownFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9091"</span>);</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1 获取对象</span></span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2 获取输入流</span></span><br><span class="line">            FSDataInputStream fis = fs.open(<span class="keyword">new</span> Path(<span class="string">"/zhangsan.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3 获取输出流</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"./lisi.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4 流的对烤</span></span><br><span class="line">            IOUtils.copyBytes(fis, fos, conf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5 关闭资源</span></span><br><span class="line">            IOUtils.closeStream(fis);</span><br><span class="line">            IOUtils.closeStream(fos);</span><br><span class="line">            fs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-读取部分文件"><a href="#2-4-3-读取部分文件" class="headerlink" title="2.4.3. 读取部分文件"></a>2.4.3. 读取部分文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取部分内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFileSeek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"hdfs://localhost:9091"</span>);</span><br><span class="line">        FileSystem fs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1 获取对象</span></span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2 获取输入流</span></span><br><span class="line">            FSDataInputStream fis = fs.open(<span class="keyword">new</span> Path(<span class="string">"/zhangsan.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3 获取输出流</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"./wangwu.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4 流的对烤</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">1</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = fis.read(bytes,<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5 关闭资源</span></span><br><span class="line">            fis.close();</span><br><span class="line">            fos.close();</span><br><span class="line">            fs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;//bruceeezhao.github.io/2020/11/05/Hadoop/Hadoop1vs2.png&quot; alt&gt;&lt;/p&gt;&lt;h1 id=&quot;1-Hadoop初识&quot;&gt;&lt;a href=&quot;#1-Hadoop初识&quot; class=&quot;headerlink&quot; title=&quot;1. Hadoop初识&quot;&gt;&lt;/a&gt;1. Hadoop初识&lt;/h1&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://bruceeezhao.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://bruceeezhao.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hadoop" scheme="https://bruceeezhao.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="https://bruceeezhao.github.io/2020/11/01/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://bruceeezhao.github.io/2020/11/01/Java多线程/</id>
    <published>2020-11-01T07:32:39.000Z</published>
    <updated>2020-11-05T13:12:36.950Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//bruceeezhao.github.io/2020/11/01/Java多线程/mutithread.jpg" alt></p><h1 id="1-初识多线程"><a href="#1-初识多线程" class="headerlink" title="1. 初识多线程"></a>1. 初识多线程</h1><h2 id="1-2-Java-中创建线程的几种方式"><a href="#1-2-Java-中创建线程的几种方式" class="headerlink" title="1.2. Java 中创建线程的几种方式"></a>1.2. Java 中创建线程的几种方式</h2><a id="more"></a><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/Exprience.java" target="_blank" rel="noopener">完整代码</a></p><ol><li>Thread</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythreadT</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MythreadT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置线程名称</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"[MythreadT]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name + <span class="string">" start"</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(name + <span class="string">" ticket = "</span> + ticket--);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ticket &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">" end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MythreadT m = <span class="keyword">new</span> MythreadT();</span><br><span class="line">        m.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Runnable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythreadR</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name + <span class="string">" start"</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(name + <span class="string">" ticket = "</span> + ticket--);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ticket &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">" end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MythreadR m = <span class="keyword">new</span> MythreadR();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(m, <span class="string">"[MythreadR]"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Callable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MythreadC</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        System.out.println(name + <span class="string">" start"</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(name + <span class="string">" ticket = "</span> + ticket--);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ticket &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">" end"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ticket;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MythreadC m = <span class="keyword">new</span> MythreadC();</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">        Future&lt;Integer&gt; future = executorService.submit(m);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>线程池</p><p><a href="https://github.com/bruceEeZhao/JavaLearn/tree/master/javaBasic/src/multithread/threadpool" target="_blank" rel="noopener">完整代码</a></p><ol><li>CachedThreadPool</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> ii = i;</span><br><span class="line">            cachedThreadPool.execute(()-&gt;System.out.println(<span class="string">"线程名称"</span>+Thread.currentThread().getName() + <span class="string">"执行 "</span> + ii));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>FixedThreadPool</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个测试是为了测试，使用 fixedThreadPool 会导致内存溢出，使用下面的命令可以设置jvm虚拟机的参数</span></span><br><span class="line"><span class="comment">     * java -Xmx8m -Xms8m multithread.threadpool.FixedTest</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 导致内存溢出的原因是fixedThreadPool，是使用LinkedBlockingQueue实现的，会不断的添加线程</span></span><br><span class="line"><span class="comment">     * public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span></span><br><span class="line"><span class="comment">     *         return new ThreadPoolExecutor(nThreads, nThreads,</span></span><br><span class="line"><span class="comment">     *                                       0L, TimeUnit.MILLISECONDS,</span></span><br><span class="line"><span class="comment">     *                                       new LinkedBlockingQueue&lt;Runnable&gt;());</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService e = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> ii = i;</span><br><span class="line">            e.execute(()-&gt;System.out.println(Thread.currentThread().getName() + <span class="string">" execute "</span> + ii));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-sleep、yield、join"><a href="#2-sleep、yield、join" class="headerlink" title="2. sleep、yield、join"></a>2. sleep、yield、join</h1><h2 id="2-1-sleep"><a href="#2-1-sleep" class="headerlink" title="2.1. sleep"></a>2.1. sleep</h2><p>该线程睡眠一段时间，将CPU让给其他线程</p><h2 id="2-2-yield"><a href="#2-2-yield" class="headerlink" title="2.2. yield"></a>2.2. yield</h2><p>线程调用yield，放弃当前的CPU使用权，进入等待队列，重新等待调度</p><h2 id="2-3-join"><a href="#2-3-join" class="headerlink" title="2.3. join"></a>2.3. join</h2><p>等待另一个线程结束</p><h1 id="3-线程的状态"><a href="#3-线程的状态" class="headerlink" title="3. 线程的状态"></a>3. 线程的状态</h1><p><img src="//bruceeezhao.github.io/2020/11/01/Java多线程/ThreadStatus.png" alt></p><p>Java中的状态有6个：</p><blockquote><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html#NEW" target="_blank" rel="noopener"><code>NEW</code></a><br>A thread that has not yet started is in this state.</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html#RUNNABLE" target="_blank" rel="noopener"><code>RUNNABLE</code></a><br>A thread executing in the Java virtual machine is in this state.</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html#BLOCKED" target="_blank" rel="noopener"><code>BLOCKED</code></a><br>A thread that is blocked waiting for a monitor lock is in this state.</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html#WAITING" target="_blank" rel="noopener"><code>WAITING</code></a><br>A thread that is waiting indefinitely for another thread to perform a particular action is in this state.</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html#TIMED_WAITING" target="_blank" rel="noopener"><code>TIMED_WAITING</code></a><br>A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.State.html#TERMINATED" target="_blank" rel="noopener"><code>TERMINATED</code></a><br>A thread that has exited is in this state.</li></ul></blockquote><p>Java没有将就绪态和运行态进行区分，统一称作RUNNABLE状态</p><h2 id="3-1-线程状态的查看"><a href="#3-1-线程状态的查看" class="headerlink" title="3.1. 线程状态的查看"></a>3.1. 线程状态的查看</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/ThreadStatus.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStatus</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"1."</span> + Thread.currentThread().getName() + <span class="string">" status is "</span> + Thread.currentThread().getState());</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"2."</span> + Thread.currentThread().getName() + <span class="string">" status is "</span> + Thread.currentThread().getState());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" number = "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStatus</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t.getName() + <span class="string">" status is "</span> + t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadStatus threadStatus = <span class="keyword">new</span> ThreadStatus();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(threadStatus);</span><br><span class="line">        threadStatus.printStatus(t);</span><br><span class="line">        t.start();</span><br><span class="line">        threadStatus.printStatus(t);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                threadStatus.printStatus(t);</span><br><span class="line">                <span class="comment">//Thread.sleep(80);</span></span><br><span class="line">            &#125;</span><br><span class="line">            t.join();</span><br><span class="line">            threadStatus.printStatus(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 status is NEW</span><br><span class="line">Thread-0 status is RUNNABLE</span><br><span class="line">Thread-0 status is RUNNABLE</span><br><span class="line">Thread-0 status is RUNNABLE</span><br><span class="line">1.Thread-0 status is RUNNABLE</span><br><span class="line">Thread-0 status is BLOCKED</span><br><span class="line">Thread-0 status is TIMED_WAITING</span><br><span class="line">Thread-0 status is TIMED_WAITING</span><br><span class="line">Thread-0 status is TIMED_WAITING</span><br><span class="line">Thread-0 status is TIMED_WAITING</span><br><span class="line">Thread-0 status is TIMED_WAITING</span><br><span class="line">Thread-0 status is TIMED_WAITING</span><br><span class="line">Thread-0 status is TIMED_WAITING</span><br><span class="line">2.Thread-0 status is RUNNABLE</span><br><span class="line">Thread-0 number = 0</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">1.Thread-0 status is RUNNABLE</span><br><span class="line">2.Thread-0 status is RUNNABLE</span><br><span class="line">Thread-0 number = 9</span><br><span class="line">Thread-0 status is TERMINATED</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>从上面的结果可以看出，调用Thread t = new Thread(threadStatus);时，线程的状态是NEW，调用start()方法后，线程状态变成RUNNABLE状态，调用sleep()进入TIMED_WAITING状态，线程执行结束后变成TERMINATED状态。</p><h2 id="3-2-一个问题"><a href="#3-2-一个问题" class="headerlink" title="3.2. 一个问题"></a>3.2. 一个问题</h2><p>执行结果的第6行的状态是BLOCKED，但是这个程序中并没有使用锁，这里的BLOCKED状态不知道从何处来的</p><h1 id="4-synchronized锁"><a href="#4-synchronized锁" class="headerlink" title="4. synchronized锁"></a>4. synchronized锁</h1><p>访问临界资源的时候需要上锁，保证同一时间只能有一个线程访问临界资源。</p><ol><li>synchronized的底层实现</li></ol><p>JDK早期版本   重量级 – 向OS申请锁</p><p>后来的改进：</p><p>锁升级的概念： <a href="https://www.jianshu.com/p/b43b7bf5e052" target="_blank" rel="noopener">我就是厕所所长</a></p><p>sync (Object)</p><p>markword 记录这个线程ID(偏向锁)</p><p>如果线程争用： 升级为 自旋锁</p><p>10次以后，</p><p>升级为重量级锁 - os</p><p>执行时间短(加锁代码)，线程数少，用自旋</p><p>执行时间长，线程数多，用系统锁</p><h2 id="4-1-synchronized"><a href="#4-1-synchronized" class="headerlink" title="4.1. synchronized"></a>4.1. synchronized</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/SynchronizedTest.java" target="_blank" rel="noopener">完整代码</a></p><p>synchronized对某个对象加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; <span class="comment">//等同于在方法的代码执行时要synchronized(this)</span></span><br><span class="line">        count--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"count = "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public void m() &#123;</span></span><br><span class="line"><span class="comment">        synchronized (this) &#123; //任何线程要执行下面的代码时，必须先拿到this的锁</span></span><br><span class="line"><span class="comment">            count--;</span></span><br><span class="line"><span class="comment">            System.out.println(Thread.currentThread().getName() + "count = " + count);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123; <span class="comment">//任何线程要执行下面的代码时，必须先拿到o的锁</span></span><br><span class="line">            count--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"count = "</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedTest s = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line">        Runnable a = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                s.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(a);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(a);</span><br><span class="line">        t.start();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>m()函数和下面注释中的写法是等价的，m1()是synchronized锁的另一种用法，对某一个对象加锁。</p><h2 id="4-2-同步和非同步方法是否可以同时调用"><a href="#4-2-同步和非同步方法是否可以同时调用" class="headerlink" title="4.2. 同步和非同步方法是否可以同时调用"></a>4.2. 同步和非同步方法是否可以同时调用</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/SynchronizedTest.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" m2 start ... "</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" m2 end "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非同步方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" m3 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedTest s = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试同步非同步方法是否可以同时调用</span></span><br><span class="line">        Runnable b = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                s.m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable b2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                s.m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(b).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(b2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-2 m2 start ... </span><br><span class="line">Thread-2 m2 end </span><br><span class="line">Thread-3 m2 start ... </span><br><span class="line">Thread-3 m2 end</span><br></pre></td></tr></table></figure><p>修改main函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedTest s = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试同步非同步方法是否可以同时调用</span></span><br><span class="line">        Runnable b = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                s.m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable b2 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                s.m3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(b).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(b2).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread-2 m2 start ... </span><br><span class="line">Thread-3 m3 </span><br><span class="line">Thread-2 m2 end</span><br></pre></td></tr></table></figure><p>证明：同步和非同步方法是可以同时调用的</p><h2 id="4-3-同步方法调用另一个同步方法可以吗？（重入性）"><a href="#4-3-同步方法调用另一个同步方法可以吗？（重入性）" class="headerlink" title="4.3. 同步方法调用另一个同步方法可以吗？（重入性）"></a>4.3. 同步方法调用另一个同步方法可以吗？（重入性）</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/ReEnterTest.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReEnterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" m1 start "</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        m2();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" m1 end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" m2 start"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" m2 end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReEnterTest r = <span class="keyword">new</span> ReEnterTest();</span><br><span class="line">        Runnable c = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                r.m1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(c).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(c).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 m1 start </span><br><span class="line">Thread-0 m2 start</span><br><span class="line">Thread-0 m2 end</span><br><span class="line">Thread-0 m1 end</span><br><span class="line">Thread-1 m1 start </span><br><span class="line">Thread-1 m2 start</span><br><span class="line">Thread-1 m2 end</span><br><span class="line">Thread-1 m1 end</span><br></pre></td></tr></table></figure><ol><li>什么是可重入？</li></ol><p>一个线程已经拥有某个对象的锁，再次申请时仍然会得到该对象的锁，叫做可重入。</p><ol start="2"><li>为什么需要是可重入的？</li></ol><p>因为如果不可重入，会发生死锁。</p><h2 id="4-4-出现异常，默认锁会释放"><a href="#4-4-出现异常，默认锁会释放" class="headerlink" title="4.4. 出现异常，默认锁会释放"></a>4.4. 出现异常，默认锁会释放</h2><p>程序在执行过程中，如果出现异常，默认情况下锁会被释放，所以在并发处理过程中，有异常要多加小心，不然可能会发生不一致的情况。</p><p>比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适，在第一个线程中抛出异常，其他线程会进入同步代码区，有可能会访问到异常时产生的数据，因此要非常小心的处理同步业务逻辑中的异常</p><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/ErrorTest.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" start "</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            count ++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ErrorTest e = <span class="keyword">new</span> ErrorTest();</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                e.m();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 start </span><br><span class="line">Thread-0 count = 1</span><br><span class="line">Thread-0 count = 2</span><br><span class="line">Thread-0 count = 3</span><br><span class="line">Thread-0 count = 4</span><br><span class="line">Thread-0 count = 5</span><br><span class="line">Thread-1 start </span><br><span class="line">Exception in thread &quot;Thread-0&quot; Thread-1 count = 6</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">at multithread.ErrorTest.m(ErrorTest.java:17)</span><br><span class="line">at multithread.ErrorTest$1.run(ErrorTest.java:28)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Thread-1 count = 7</span><br><span class="line">Thread-1 count = 8</span><br><span class="line">Thread-1 count = 9</span><br><span class="line">Thread-1 count = 10</span><br><span class="line">Thread-1 count = 11</span><br><span class="line">Thread-1 count = 12</span><br></pre></td></tr></table></figure><p>如果不产生异常thread-1是没有机会执行的，产生异常后，thread-1就得到了执行。</p><h2 id="4-5-优化"><a href="#4-5-优化" class="headerlink" title="4.5. 优化"></a>4.5. 优化</h2><p>锁的细化，锁住更小的代码块</p><p>有时可能也需要锁的粗化，如果需要加的锁特别多，那么也可以在较大的代码块上直接加锁</p><h2 id="4-6-对象做锁时，禁止改变对象"><a href="#4-6-对象做锁时，禁止改变对象" class="headerlink" title="4.6. 对象做锁时，禁止改变对象"></a>4.6. 对象做锁时，禁止改变对象</h2><p>锁定某个对象o，如果o的属性发生改变，不影响锁的使用；但是如果o变成另外一个对象，则锁定的对象发生改变，应该避免将锁定对象的引用变成另外的对象</p><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/ObjectNoChange.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectNoChange</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*final*/</span> Object o  = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ObjectNoChange o = <span class="keyword">new</span> ObjectNoChange();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(o::m).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(o::m, <span class="string">"t2"</span>);</span><br><span class="line">        o.o = <span class="keyword">new</span> Object();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread-0</span><br><span class="line">Thread-0</span><br><span class="line">Thread-0</span><br><span class="line">Thread-0</span><br><span class="line">t2</span><br><span class="line">Thread-0</span><br><span class="line">t2</span><br><span class="line">Thread-0</span><br><span class="line">t2</span><br></pre></td></tr></table></figure><p>为了防止这种情况，应该为加锁对象加上final关键字</p><h1 id="5-volatile"><a href="#5-volatile" class="headerlink" title="5. volatile"></a>5. volatile</h1><h2 id="5-1-volatile作用"><a href="#5-1-volatile作用" class="headerlink" title="5.1. volatile作用"></a>5.1. volatile作用</h2><ol><li>保证线程可见性<ol><li>MESI</li><li>缓存一致性协议</li></ol></li><li>禁止指令重排序<ol><li>DCL单例</li><li>Double Check Lock</li><li>Mgr06.java</li></ol></li></ol><h2 id="5-2-测试volatile的作用"><a href="#5-2-测试volatile的作用" class="headerlink" title="5.2. 测试volatile的作用"></a>5.2. 测试volatile的作用</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/VolatileTest.java" target="_blank" rel="noopener">完整代码</a></p><ol><li>不使用volatile</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m start"</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"m end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileTest v = <span class="keyword">new</span> VolatileTest();</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                v.m();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            v.running = <span class="keyword">false</span>;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(v.running);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m start</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">Process finished with exit code 130 (interrupted by signal 2: SIGINT)</span><br></pre></td></tr></table></figure><p>不使用volatile，程序不能停止，主线程对于running的修改没有及时更新，子线程不能感知</p><ol start="2"><li>为running添加volatile</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m start"</span>);</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"m end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileTest v = <span class="keyword">new</span> VolatileTest();</span><br><span class="line">        Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                v.m();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            v.running = <span class="keyword">false</span>;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(v.running);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m start</span><br><span class="line">m end</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h2 id="5-3-volatile的局限"><a href="#5-3-volatile的局限" class="headerlink" title="5.3. volatile的局限"></a>5.3. volatile的局限</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/VolatileShort.java" target="_blank" rel="noopener">完整代码</a></p><p>volatile并不能保证多个线程共同修改running变量所带来的不一致问题，也就是说volatile不能替代synchronized</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileShort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileShort v = <span class="keyword">new</span> VolatileShort();</span><br><span class="line">        List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads.add(<span class="keyword">new</span> Thread(v::m));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threads.forEach((o)-&gt;o.start());</span><br><span class="line"></span><br><span class="line">        threads.forEach((o)-&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                o.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(v.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65584</span><br></pre></td></tr></table></figure><h1 id="6-CAS锁（无锁优化，自旋，乐观锁）"><a href="#6-CAS锁（无锁优化，自旋，乐观锁）" class="headerlink" title="6. CAS锁（无锁优化，自旋，乐观锁）"></a>6. CAS锁（无锁优化，自旋，乐观锁）</h1><p>CAS（Compare And Swap）</p><ol><li><p>cas(V, Expected, NewValue)</p><p>cas 操作时会将V和E进行比较，如果过程中E发生变化，那么就回滚操作，cas操作是CPU原语支持的，不能被打断</p><ul><li>if V==E</li><li>V = New</li><li>otherwise try again or fail</li></ul></li></ol><p>CPU原语支持</p><ol start="2"><li><p>ABA问题</p><p>例如，线程1期望对变量a进行+1操作，在这时线程1被挂起，线程2将变量a进行-1操作，后又进行了+1操作，这时线程1得到了调度，那么线程1是不能直到变量曾经发生过变化的。</p><p>解决方法：</p><p>​    加version，每一次操作都添加一个版本号</p></li></ol><p>如果是基本类型，ABA的问题是不会有什么影响的；</p><p>引用类型：你和女友复合，而期间女友谈了一些恋爱。（虽然不恰当，但比较直观，意思是你大妈已经不是你大妈了）</p><h2 id="6-1-对比synchronized、Atomic、LongAdder的效率"><a href="#6-1-对比synchronized、Atomic、LongAdder的效率" class="headerlink" title="6.1. 对比synchronized、Atomic、LongAdder的效率"></a>6.1. 对比synchronized、Atomic、LongAdder的效率</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/SyncAtomicLongadder.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.LongAdder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncAtomicLongadder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Long count1 = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">static</span> AtomicInteger count2 = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">static</span> LongAdder count3 = <span class="keyword">new</span> LongAdder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">1000</span>];</span><br><span class="line">        <span class="keyword">long</span> start ,end = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用synchronized</span></span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">100000</span>; k++)</span><br><span class="line">                        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                            count1++;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Thread t: threads</span><br><span class="line">             ) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t: threads</span><br><span class="line">             ) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"sync "</span> + (end - start));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Atomic</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">100000</span>; k++) &#123;</span><br><span class="line">                   count2.incrementAndGet();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Thread t: threads</span><br><span class="line">        ) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t: threads</span><br><span class="line">        ) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"atomic "</span> + (end - start));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//LongAdder</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">100000</span>; k++) &#123;</span><br><span class="line">                    count3.increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Thread t: threads</span><br><span class="line">        ) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t: threads</span><br><span class="line">        ) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"LongAdder "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sync 4438</span><br><span class="line">atomic 2195</span><br><span class="line">LongAdder 377</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="7-Semaphore"><a href="#7-Semaphore" class="headerlink" title="7. Semaphore"></a>7. Semaphore</h1><p><a href="[https://www.wanweibaike.com/wiki-%E4%BF%A1%E5%8F%B7%E9%87%8F](https://www.wanweibaike.com/wiki-信号量)">wiki-信号量</a></p><blockquote><p><strong>信号量</strong>（英语：<strong>semaphore</strong>）又称为<strong>信号标</strong>，是一个同步对象，用于保持在0至指定最大值之间的一个计数值。当线程完成一次对该semaphore对象的等待（wait）时，该计数值减一；当线程完成一次对semaphore对象的释放（release）时，计数值加一。当计数值为0，则线程等待该semaphore对象不再能成功直至该semaphore对象变成signaled状态。semaphore对象的计数值大于0，为signaled状态；计数值等于0，为nonsignaled状态.</p><p>semaphore对象适用于控制一个仅支持有限个用户的共享资源，是一种不需要使用<a href="https://www.wanweibaike.com/wiki-忙碌等待" target="_blank" rel="noopener">忙碌等待</a>（busy waiting）的方法。</p><p>信号量的概念是由<a href="https://www.wanweibaike.com/wiki-荷兰" target="_blank" rel="noopener">荷兰</a>计算机科学家<a href="https://www.wanweibaike.com/wiki-艾兹赫尔·戴克斯特拉" target="_blank" rel="noopener">艾兹赫尔·戴克斯特拉</a>（Edsger W. Dijkstra）发明的，广泛的应用于不同的<a href="https://www.wanweibaike.com/wiki-操作系统" target="_blank" rel="noopener">操作系统</a>中。在系统中，给予每一个<a href="https://www.wanweibaike.com/wiki-行程" target="_blank" rel="noopener">进程</a>一个信号量，代表每个进程目前的状态，未得到控制权的进程会在特定地方被强迫停下来，等待可以继续进行的信号到来。如果信号量是一个任意的整数，通常被称为计数信号量（Counting semaphore），或一般信号量（general semaphore）；如果信号量只有二进制的0或1，称为二进制信号量（binary semaphore）。在linux系统中，二进制信号量（binary semaphore）又称<a href="https://www.wanweibaike.com/wiki-互斥锁" target="_blank" rel="noopener">互斥锁</a>（Mutex）。</p><p>计数信号量具备两种操作动作，称为V（<code>signal()</code>）与P（<code>wait()</code>）（即部分参考书常称的“PV操作”）。V操作会增加信号标S的数值，P操作会减少它。</p></blockquote><p>信号量通常被用来严格限制访问一个资源的线程的数量。</p><p>下面的程序模拟了一个停车场，共有3个停车位，车位满了之后，后面的车辆需要等待车位。</p><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/SemaphoreTest.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Max_AVALIABLE = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(Max_AVALIABLE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Map&lt;Object, Integer&gt;&gt; objects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[Max_AVALIABLE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">park</span><span class="params">(Object o)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        semaphore.acquire();</span><br><span class="line">        <span class="keyword">return</span> park1(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">park1</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Max_AVALIABLE; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                used[i] = <span class="keyword">true</span>;</span><br><span class="line">                Map&lt;Object, Integer&gt; parkpos= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                parkpos.put(o, i);</span><br><span class="line">                objects.add(parkpos);</span><br><span class="line">                ret = i;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + o + <span class="string">" park in the "</span> + ret);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 离开</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">leave</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = leave1(o);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">leave1</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map m: objects</span><br><span class="line">             ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.containsKey(o)) &#123;</span><br><span class="line">                Object v = m.get(o);</span><br><span class="line">                <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">                    used[(Integer) v] = <span class="keyword">false</span>;</span><br><span class="line">                    ret = (Integer) v;</span><br><span class="line">                    Map&lt;Object, Integer&gt; parkpos= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    parkpos.put(o, ret);</span><br><span class="line">                    objects.remove(parkpos);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + o + <span class="string">" leave the park "</span> + ret);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SemaphoreTest s = <span class="keyword">new</span> SemaphoreTest();</span><br><span class="line">        ArrayList&lt;Car&gt; cars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            Car c = <span class="keyword">new</span> Car(i, s);</span><br><span class="line">            cars.add(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Car car: cars</span><br><span class="line">             ) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(car).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 车牌号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> carNumber;</span><br><span class="line">    <span class="keyword">private</span> SemaphoreTest s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(<span class="keyword">int</span> carNumber, SemaphoreTest s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carNumber = carNumber;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCarNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.park(<span class="keyword">this</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.leave(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">" Car&#123;"</span> +</span><br><span class="line">                <span class="string">"carNumber="</span> + carNumber +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Thread-0 Car&#123;carNumber=0&#125; park in the 0</span><br><span class="line">Thread-2 Car&#123;carNumber=2&#125; park in the 1</span><br><span class="line">Thread-1 Car&#123;carNumber=1&#125; park in the 2</span><br><span class="line">Thread-0 Car&#123;carNumber=0&#125; leave the park 0</span><br><span class="line">Thread-2 Car&#123;carNumber=2&#125; leave the park 1</span><br><span class="line">Thread-4 Car&#123;carNumber=4&#125; park in the 0</span><br><span class="line">Thread-1 Car&#123;carNumber=1&#125; leave the park 2</span><br><span class="line">Thread-3 Car&#123;carNumber=3&#125; park in the 1</span><br><span class="line">Thread-5 Car&#123;carNumber=5&#125; park in the 2</span><br><span class="line">Thread-4 Car&#123;carNumber=4&#125; leave the park 0</span><br><span class="line">Thread-6 Car&#123;carNumber=6&#125; park in the 0</span><br><span class="line">Thread-3 Car&#123;carNumber=3&#125; leave the park 1</span><br><span class="line">Thread-5 Car&#123;carNumber=5&#125; leave the park 2</span><br><span class="line">Thread-7 Car&#123;carNumber=7&#125; park in the 1</span><br><span class="line">Thread-8 Car&#123;carNumber=8&#125; park in the 2</span><br><span class="line">Thread-6 Car&#123;carNumber=6&#125; leave the park 0</span><br><span class="line">Thread-9 Car&#123;carNumber=9&#125; park in the 0</span><br><span class="line">Thread-7 Car&#123;carNumber=7&#125; leave the park 1</span><br><span class="line">Thread-8 Car&#123;carNumber=8&#125; leave the park 2</span><br><span class="line">Thread-9 Car&#123;carNumber=9&#125; leave the park 0</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="8-Lock"><a href="#8-Lock" class="headerlink" title="8. Lock"></a>8. Lock</h1><p>通常，锁提供对共享资源的独占访问：一次只能有一个线程可以获取该锁，并且对共享资源的所有访问都需要首先获取该锁。 但是，某些锁可能允许并发访问共享资源，例如ReadWriteLock的读取锁。这是synchronized办不到的。</p><blockquote><p>java.util.concurrent.locks</p><h2 id="Interface-Lock"><a href="#Interface-Lock" class="headerlink" title="Interface Lock"></a>Interface Lock</h2><p>All Known Implementing Classes:</p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantLock.html" target="_blank" rel="noopener">ReentrantLock</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html" target="_blank" rel="noopener">ReentrantReadWriteLock.ReadLock</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html" target="_blank" rel="noopener">ReentrantReadWriteLock.WriteLock</a></p></blockquote><h2 id="8-1-ReentrantLock"><a href="#8-1-ReentrantLock" class="headerlink" title="8.1. ReentrantLock"></a>8.1. ReentrantLock</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/ReentrantLockTest.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">                    Thread.sleep(<span class="number">40</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" failed to get lock "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ReentrantLockTest r = <span class="keyword">new</span> ReentrantLockTest();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">            threads.add(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    r.sell();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t: threads</span><br><span class="line">             ) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-ReadWriteLock"><a href="#8-2-ReadWriteLock" class="headerlink" title="8.2. ReadWriteLock"></a>8.2. ReadWriteLock</h2><p><em>读-读能共存，读-写不能共存，写-写不能共存</em></p><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/ReadWriteLockTest.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.LongAdder;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">static</span> Lock readLock = readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">static</span> Lock writeLock = readWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Lock lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">"read over"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Lock lock, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            value = v;</span><br><span class="line">            System.out.println(<span class="string">"write over"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Runnable readR = ()-&gt;read(lock);</span></span><br><span class="line">        Runnable readR = ()-&gt;read(readLock);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Runnable writeR = ()-&gt;write(lock, new Random().nextInt());</span></span><br><span class="line">        Runnable writeR = ()-&gt;write(writeLock, <span class="keyword">new</span> Random().nextInt());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">18</span>; i++) <span class="keyword">new</span> Thread(readR).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) <span class="keyword">new</span> Thread(writeR).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-线程栅栏"><a href="#9-线程栅栏" class="headerlink" title="9. 线程栅栏"></a>9. 线程栅栏</h1><p>有时需要多个线程都完成某项任务后才能进行下一步工作，因此需要线程栅栏。</p><ol><li><p>CountDownLatch</p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html" target="_blank" rel="noopener">CountDownLatch</a></p><p>这个类的作用是等待一些线程全部完成工作后再进行下一项工作</p></li><li><p>CyclicBarrier</p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html" target="_blank" rel="noopener">CyclicBarrier</a></p></li><li><p>Phaser</p><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html" target="_blank" rel="noopener">Phaser</a></p><p>功能上与CountDownLatch和CyclicBarrier类似，但支持更灵活的用法</p></li></ol><h1 id="10-ThreadLoacl"><a href="#10-ThreadLoacl" class="headerlink" title="10. ThreadLoacl"></a>10. ThreadLoacl</h1><p>ThreadLocal 是某一个线程自身拥有的资源，其他线程不能访问。</p><p><img src="//bruceeezhao.github.io/2020/11/01/Java多线程/ThreadLocal.png" alt></p><p>每一个线程都拥有一个ThreadLocalMap的map，set()函数会先获取这个map，然后再向map中添加数据，map中的key是ThreadLocal的弱引用。</p><p>为什么Entry要使用弱引用？</p><p>若是强引用，即使tl=null，但key的引用仍然指向ThreadLocal对象，所以会有内存泄露，而使用弱引用则不会。</p><p>但是还有内存泄漏的风险，ThreadLocal被回收，key的值变为null，则导致value再也无法被访问，因此不再使用里面的值之后要使用remove函数删掉map里的值。</p><h2 id="10-1-源码实现"><a href="#10-1-源码实现" class="headerlink" title="10.1. 源码实现"></a>10.1. 源码实现</h2><p>ThreadLocal.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * The entries in this hash map extend WeakReference, using</span></span><br><span class="line"><span class="comment">        * its main ref field as the key (which is always a</span></span><br><span class="line"><span class="comment">        * ThreadLocal object).  Note that null keys (i.e. entry.get()</span></span><br><span class="line"><span class="comment">        * == null) mean that the key is no longer referenced, so the</span></span><br><span class="line"><span class="comment">        * entry can be expunged from table.  Such entries are referred to</span></span><br><span class="line"><span class="comment">        * as "stale entries" in the code that follows.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">           <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">           Object value;</span><br><span class="line"></span><br><span class="line">           Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">               <span class="keyword">super</span>(k);</span><br><span class="line">               value = v;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Get the map associated with a ThreadLocal. Overridden in</span></span><br><span class="line"><span class="comment">    * InheritableThreadLocal.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  t the current thread</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the map</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sets the current thread's copy of this thread-local variable</span></span><br><span class="line"><span class="comment">    * to the specified value.  Most subclasses will have no need to</span></span><br><span class="line"><span class="comment">    * override this method, relying solely on the &#123;<span class="doctag">@link</span> #initialValue&#125;</span></span><br><span class="line"><span class="comment">    * method to set the values of thread-locals.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value the value to be stored in the current thread's copy of</span></span><br><span class="line"><span class="comment">    *        this thread-local.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">       Thread t = Thread.currentThread();</span><br><span class="line">       ThreadLocalMap map = getMap(t);</span><br><span class="line">       <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">           map.set(<span class="keyword">this</span>, value);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           createMap(t, value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Thread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>Thread类拥有一个ThreadLocalMap类型的变量，每一个线程都有一个map</p><h2 id="10-2-代码测试"><a href="#10-2-代码测试" class="headerlink" title="10.2. 代码测试"></a>10.2. 代码测试</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/ThreadLoaclTest.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLoaclTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadLocal&lt;Person&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;Person&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + tl.get());</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            tl.set(<span class="keyword">new</span> Person(<span class="string">"zhangSan"</span>));</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            tl.set(<span class="keyword">new</span> Person(<span class="string">"liSi"</span>));</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + tl.get());</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Person(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-0null</span><br><span class="line">Thread-2Person&#123;name=&apos;liSi&apos;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="11-多线程经典问题"><a href="#11-多线程经典问题" class="headerlink" title="11. 多线程经典问题"></a>11. 多线程经典问题</h1><h2 id="11-1-生产者消费者问题"><a href="#11-1-生产者消费者问题" class="headerlink" title="11.1. 生产者消费者问题"></a>11.1. 生产者消费者问题</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/javaBasic/src/multithread/ProducerConsumer1.java" target="_blank" rel="noopener">完整代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multithread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WareHouse wareHouse = <span class="keyword">new</span> WareHouse();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads.add(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(wareHouse)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) &#123;</span><br><span class="line">            threads.add(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(wareHouse)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t: threads</span><br><span class="line">             ) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WareHouse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> List&lt;Integer&gt; wareHouse = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> Max_length = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (wareHouse.size() == Max_length) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="keyword">new</span> Random().nextInt(<span class="number">30</span>);</span><br><span class="line">        wareHouse.add(a);</span><br><span class="line">        notifyAll();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" produce "</span> + a</span><br><span class="line">                + <span class="string">" wareHouse size is "</span> + wareHouse.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//仓库已空</span></span><br><span class="line">        <span class="keyword">while</span> (wareHouse.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> a = wareHouse.remove(<span class="number">0</span>);</span><br><span class="line">        notifyAll();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" get "</span> + a</span><br><span class="line">                + <span class="string">" wareHouse size is "</span> + wareHouse.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wareHouse.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WareHouse wareHouse;</span><br><span class="line"></span><br><span class="line">    Producer(WareHouse wareHouse) &#123;</span><br><span class="line">        <span class="keyword">this</span>.wareHouse = wareHouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            wareHouse.produce();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WareHouse wareHouse;</span><br><span class="line">    Consumer(WareHouse wareHouse) &#123;</span><br><span class="line">        <span class="keyword">this</span>.wareHouse = wareHouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            wareHouse.consume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Thread-6 get 28 wareHouse size is 9</span><br><span class="line">Thread-6 get 19 wareHouse size is 9</span><br><span class="line">Thread-6 get 9 wareHouse size is 9</span><br><span class="line">Thread-5 get 12 wareHouse size is 9</span><br><span class="line">Thread-2 produce 0 wareHouse size is 9</span><br><span class="line">Thread-5 get 3 wareHouse size is 8</span><br><span class="line">Thread-4 produce 22 wareHouse size is 10</span><br><span class="line">Thread-0 produce 2 wareHouse size is 10</span><br><span class="line">Thread-6 get 3 wareHouse size is 8</span><br><span class="line">Thread-6 get 28 wareHouse size is 9</span><br><span class="line">Thread-6 get 28 wareHouse size is 9</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;//bruceeezhao.github.io/2020/11/01/Java多线程/mutithread.jpg&quot; alt&gt;&lt;/p&gt;&lt;h1 id=&quot;1-初识多线程&quot;&gt;&lt;a href=&quot;#1-初识多线程&quot; class=&quot;headerlink&quot; title=&quot;1. 初识多线程&quot;&gt;&lt;/a&gt;1. 初识多线程&lt;/h1&gt;&lt;h2 id=&quot;1-2-Java-中创建线程的几种方式&quot;&gt;&lt;a href=&quot;#1-2-Java-中创建线程的几种方式&quot; class=&quot;headerlink&quot; title=&quot;1.2. Java 中创建线程的几种方式&quot;&gt;&lt;/a&gt;1.2. Java 中创建线程的几种方式&lt;/h2&gt;
    
    </summary>
    
      <category term="Java" scheme="https://bruceeezhao.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://bruceeezhao.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://bruceeezhao.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习之-03装饰模式(The Decorator Pattern)</title>
    <link href="https://bruceeezhao.github.io/2020/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B-03%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>https://bruceeezhao.github.io/2020/10/28/设计模式学习之-03装饰模式/</id>
    <published>2020-10-28T08:52:03.000Z</published>
    <updated>2020-10-29T11:29:19.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-一个咖啡店的需求"><a href="#1-一个咖啡店的需求" class="headerlink" title="1. 一个咖啡店的需求"></a>1. 一个咖啡店的需求</h1><a id="more"></a><p>一个咖啡店需要升级他们的系统，以满足饮料订单的需求。我们首先设计了一个类结构：</p><p><img src="//bruceeezhao.github.io/2020/10/28/设计模式学习之-03装饰模式/Beverage-1.png" alt></p><p>Beverage类是一个抽象类，其中cost是一个抽象方法，每个子类需要实现这个方法，以完成自己的定价。description是饮料的描述信息。</p><p>这样的设计初看上去是没有问题的，但是，顾客的需求是多变的，顾客可能会要求向饮料中加入一些其他的调味品，例如牛奶、可可等。咖啡店需要对这些添加的调味品收取一定的费用。于是，类图变成的下面这样。</p><p><img src="//bruceeezhao.github.io/2020/10/28/设计模式学习之-03装饰模式/Beverage-2.png" alt></p><p>无疑，这是一个糟糕的设计，为每一种添加不同调味品的饮料单独生成一个类，造成了类数量随调味品数量增加而指数扩展的现象。可以想象，如果某一个调味品的价格发生变化，那么对类进行修改将是一个灾难事件。</p><h2 id="1-1-让超类管理调味品价格怎么样？"><a href="#1-1-让超类管理调味品价格怎么样？" class="headerlink" title="1.1. 让超类管理调味品价格怎么样？"></a>1.1. 让超类管理调味品价格怎么样？</h2><p>首先我们来尝试让超类负责管理调味品价格，看结果是怎么样呢？</p><p><img src="//bruceeezhao.github.io/2020/10/28/设计模式学习之-03装饰模式/Beverage-3.png" alt></p><p>我们把Beverage类设计成这样，那么一个饮料如果需要添加milk，在下单时调用hasMilk()函数就可以加上milk的价格，milk的价格发生变化时，调用setMilk()<br>函数即可。</p><p>这样的设计比一开始的设计要好，但是仍然存在问题：</p><ol><li>如果购买了新的调味品，就需要修改Beverage类</li><li>有些饮料可能并不需要这些调味品，例如茶（这里的情况和第一章的情况类似，并不是所有的鸭子都会飞）</li><li>如果顾客加了双份的milk怎么办呢？</li></ol><h1 id="2-开闭原则-The-Open-Closed-Principle"><a href="#2-开闭原则-The-Open-Closed-Principle" class="headerlink" title="2. 开闭原则(The Open-Closed Principle)"></a>2. 开闭原则(The Open-Closed Principle)</h1><p>Classes should be open for extension, but closed for modification.</p><p>类应该对扩展开放，对修改关闭。</p><p>我们的目标是在不改变原有代码的前提下，让类可以方便的扩展以拥有新的行为。</p><p>需要注意的是，在任何地方都使用开闭原则是浪费的和不必要的，它会导致复杂和那一理解的代码。</p><h1 id="3-装饰模式"><a href="#3-装饰模式" class="headerlink" title="3. 装饰模式"></a>3. 装饰模式</h1><h2 id="3-1-如何操作"><a href="#3-1-如何操作" class="headerlink" title="3.1. 如何操作"></a>3.1. 如何操作</h2><p>我们会使用Beverage并且在运行时使用调味品对其进行装饰。例如，顾客想要一杯加Mocha和Whip的DarkRoast，我们会这样做：</p><ol><li>调用DarkRoast类，产生一个DarkRoast对象</li><li>用Mocha对象装饰它</li><li>用Whip对象装饰它</li><li>调用cost()方法并依赖委托(delegation)来添加调味品的价格</li></ol><p><img src="//bruceeezhao.github.io/2020/10/28/设计模式学习之-03装饰模式/wrapped.png" alt></p><p>可以把装饰对象想成是一个包装，我们用Mocha对象包装了DarkRoast对象，随后又用Whip对象包装。</p><p>接下来该计算价格了，在最外层的装饰上调用cost()方法，Whip将要去被委托计算它所装饰的对象的价格，它获得一个价格就会添加到Whip的总价上</p><p><img src="//bruceeezhao.github.io/2020/10/28/设计模式学习之-03装饰模式/wrapped-2.png" alt></p><p>通过上面的分析我们知道：</p><ol><li>装饰器和他们所装饰的对象有相同的超类</li><li>可以使用一个或多个装饰器对对象进行装饰</li><li>由于decorator与它所装饰的对象具有相同的超类，我们可以传递一个装饰对象来代替原始（包装）对象。</li><li><strong>The decorator adds its own behavior either before and/or after delegating to the object it decorates to do the rest of the job</strong> （装饰器在委派给其装饰的对象之前和/或之后添加自己的行为，以完成其余工作。）</li><li>对象可以在任何时间被装饰，所以我们可以在运行时为对象添加任意多的装饰器</li></ol><h2 id="3-2-定义"><a href="#3-2-定义" class="headerlink" title="3.2. 定义"></a>3.2. 定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The Decorator Pattern attaches additional responsibilities to an object dynamically.</span><br><span class="line">Decorators provide a flexible alternative to subclassing for extending functionality.</span><br></pre></td></tr></table></figure><h2 id="3-3-使用装饰模式重新设计"><a href="#3-3-使用装饰模式重新设计" class="headerlink" title="3.3. 使用装饰模式重新设计"></a>3.3. 使用装饰模式重新设计</h2><p><img src="//bruceeezhao.github.io/2020/10/28/设计模式学习之-03装饰模式/Decorator.png" alt></p><h3 id="3-3-1-代码"><a href="#3-3-1-代码" class="headerlink" title="3.3.1. 代码"></a>3.3.1. 代码</h3><p><a href="https://github.com/bruceEeZhao/JavaLearn/tree/master/designPatterns/src/decorator" target="_blank" rel="noopener">完整代码</a></p><h4 id="3-3-1-1-Beverage类"><a href="#3-3-1-1-Beverage类" class="headerlink" title="3.3.1.1 Beverage类"></a>3.3.1.1 Beverage类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    String description = <span class="string">"Unkown Bervage"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-1-2-HouseBlend类"><a href="#3-3-1-2-HouseBlend类" class="headerlink" title="3.3.1.2. HouseBlend类"></a>3.3.1.2. HouseBlend类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class HoseBlend extends Beverage&#123;</span><br><span class="line">    public HoseBlend() &#123;</span><br><span class="line">        description = &quot;HoseBlend&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double cost() &#123;</span><br><span class="line">        return 0.89;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-1-3-CondimentDecorator类"><a href="#3-3-1-3-CondimentDecorator类" class="headerlink" title="3.3.1.3. CondimentDecorator类"></a>3.3.1.3. CondimentDecorator类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-1-4-Milk类"><a href="#3-3-1-4-Milk类" class="headerlink" title="3.3.1.4. Milk类"></a>3.3.1.4. Milk类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">", Milk"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-1-5-测试"><a href="#3-3-1-5-测试" class="headerlink" title="3.3.1.5. 测试"></a>3.3.1.5. 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeShop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">        System.out.println(beverage.getDescription() + <span class="string">" $"</span> + beverage.cost());</span><br><span class="line"></span><br><span class="line">        Beverage beverage1 = <span class="keyword">new</span> DarkRoast();</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Whip(beverage1);</span><br><span class="line">        System.out.println(beverage1.getDescription() + <span class="string">" $"</span> + beverage1.cost());</span><br><span class="line"></span><br><span class="line">        Beverage beverage2 = <span class="keyword">new</span> HoseBlend();</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Soy(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">        beverage2 = <span class="keyword">new</span> Whip(beverage2);</span><br><span class="line">        System.out.println(beverage2.getDescription() + <span class="string">" $"</span> + beverage2.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Espresso $1.99</span><br><span class="line">DarkRoast, Mocha, Mocha, Whip $1.8</span><br><span class="line">HoseBlend, Soy, Mocha, Whip $1.79</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="4-添加需求"><a href="#4-添加需求" class="headerlink" title="4. 添加需求"></a>4. 添加需求</h1><p>咖啡店设置了3中类型的杯子（小，中，大），并且调味品根据杯子的大小收费不同，例如Soy对应（小，中，大）杯的价格分别为0.1,0.2,0.3，代码应该怎么实现呢？</p><h2 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1. 代码"></a>4.1. 代码</h2><p><a href="https://github.com/bruceEeZhao/JavaLearn/tree/master/designPatterns/src/decorator" target="_blank" rel="noopener">完整代码</a></p><p>我只改动了以下3个类，测试时需要打开注释的部分。</p><h3 id="4-1-1-Beverage类"><a href="#4-1-1-Beverage类" class="headerlink" title="4.1.1. Beverage类"></a>4.1.1. Beverage类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    String description = <span class="string">"Unkown Bervage"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;SMALL, MEDIUM, LARGE&#125;;</span><br><span class="line">    Size size = Size.SMALL;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Size <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Size size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在原有的代码基础上添加了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public enum Size &#123;SMALL, MEDIUM, LARGE&#125;;</span><br><span class="line">   Size size = Size.SMALL;</span><br><span class="line"></span><br><span class="line">   public Size getSize() &#123;</span><br><span class="line">       return size;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setSize(Size size) &#123;</span><br><span class="line">       this.size = size;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-HoseBlend类"><a href="#4-1-2-HoseBlend类" class="headerlink" title="4.1.2. HoseBlend类"></a>4.1.2. HoseBlend类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Size, Double&gt; price = <span class="keyword">new</span> HashMap&lt;Size, Double&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HoseBlend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">"HoseBlend"</span>;</span><br><span class="line">        price.put(Size.SMALL, <span class="number">0.1</span>);</span><br><span class="line">        price.put(Size.MEDIUM, <span class="number">0.2</span>);</span><br><span class="line">        price.put(Size.LARGE, <span class="number">0.3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price.get(getSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-Milk类"><a href="#4-1-3-Milk类" class="headerlink" title="4.1.3. Milk类"></a>4.1.3. Milk类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Size, Double&gt; price = <span class="keyword">new</span> HashMap&lt;Size, Double&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">        setSize(beverage.getSize()); </span><br><span class="line"></span><br><span class="line">        price.put(Size.SMALL, <span class="number">0.11</span>);</span><br><span class="line">        price.put(Size.MEDIUM, <span class="number">0.15</span>);</span><br><span class="line">        price.put(Size.LARGE, <span class="number">0.31</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">", Milk"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + price.get(getSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-4-测试"><a href="#4-1-4-测试" class="headerlink" title="4.1.4. 测试"></a>4.1.4. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeShop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        everage beverage3 = <span class="keyword">new</span> HoseBlend();</span><br><span class="line">        beverage3.setSize(Beverage.Size.MEDIUM);</span><br><span class="line">        beverage3 = <span class="keyword">new</span> Milk(beverage3);</span><br><span class="line">        System.out.println(<span class="string">"Cup Size "</span> + beverage3.getSize() + <span class="string">" "</span> + beverage3.getDescription() + <span class="string">" $"</span> + beverage3.cost());</span><br><span class="line"></span><br><span class="line">        Beverage beverage4 = <span class="keyword">new</span> HoseBlend();</span><br><span class="line">        beverage4.setSize(Beverage.Size.LARGE);</span><br><span class="line">        beverage4 = <span class="keyword">new</span> Milk(beverage4);</span><br><span class="line">        System.out.println(<span class="string">"Cup Size "</span> + beverage4.getSize() + <span class="string">" "</span> + beverage4.getDescription() + <span class="string">" $"</span> + beverage4.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cup Size MEDIUM HoseBlend, Milk $0.35</span><br><span class="line">Cup Size LARGE HoseBlend, Milk $0.61</span><br></pre></td></tr></table></figure><h1 id="5-真实工程中的装饰模式的应用"><a href="#5-真实工程中的装饰模式的应用" class="headerlink" title="5. 真实工程中的装饰模式的应用"></a>5. 真实工程中的装饰模式的应用</h1><p>java.io 中就使用了装饰模式</p><p><img src="//bruceeezhao.github.io/2020/10/28/设计模式学习之-03装饰模式/javaio.png" alt></p><p>InputStream是抽象类</p><p>FilterInputStream是一个抽象装饰器</p><h2 id="5-1-使用InputStream"><a href="#5-1-使用InputStream" class="headerlink" title="5.1. 使用InputStream"></a>5.1. 使用InputStream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"test"</span>);</span><br><span class="line">            InputStream stream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            stream = <span class="keyword">new</span> BufferedInputStream(stream);</span><br><span class="line">            stream = <span class="keyword">new</span> LineInputStream(stream);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((c = stream.read()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-自定义java-I-O装饰器"><a href="#5-2-自定义java-I-O装饰器" class="headerlink" title="5.2. 自定义java I/O装饰器"></a>5.2. 自定义java I/O装饰器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowerCaseInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &lt;code&gt;FilterInputStream&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * by assigning the  argument &lt;code&gt;in&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * to the field &lt;code&gt;this.in&lt;/code&gt; so as</span></span><br><span class="line"><span class="comment">     * to remember it for later use.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in the underlying input stream, or &lt;code&gt;null&lt;/code&gt; if</span></span><br><span class="line"><span class="comment">     *           this instance is to be created without an underlying stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">LowerCaseInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = in.read();</span><br><span class="line">        <span class="keyword">return</span> (c == -<span class="number">1</span>?c : Character.toLowerCase((<span class="keyword">char</span>) c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> offset, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = in.read(b, offset, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=offset; i&lt;offset+result; i++) &#123;</span><br><span class="line">            b[i] = (<span class="keyword">byte</span>)Character.toLowerCase((<span class="keyword">char</span>)b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = <span class="keyword">new</span> LowerCaseInputStream(</span><br><span class="line">                    <span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">                            <span class="keyword">new</span> FileInputStream(<span class="string">"test"</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((c = in.read()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-一个咖啡店的需求&quot;&gt;&lt;a href=&quot;#1-一个咖啡店的需求&quot; class=&quot;headerlink&quot; title=&quot;1. 一个咖啡店的需求&quot;&gt;&lt;/a&gt;1. 一个咖啡店的需求&lt;/h1&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://bruceeezhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习之-02ObserverPattern</title>
    <link href="https://bruceeezhao.github.io/2020/10/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B-02ObserverPattern/"/>
    <id>https://bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/</id>
    <published>2020-10-16T02:10:36.000Z</published>
    <updated>2020-10-21T08:47:41.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-天气应用"><a href="#1-天气应用" class="headerlink" title="1. 天气应用"></a>1. 天气应用</h1><p>系统中共有3中角色：</p><a id="more"></a><ol><li>天气站： 获取真实天气数据的物理设备</li><li>天气数据对象： 从天气站获取数据并更新显示设备</li><li>显示设备： 向用户展示当前的天气</li></ol><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/weatherApp.png" alt></p><p>需求：</p><ol><li>WeatherData对象可以获取天气信息，信息发生变化时，将信息推送给显示设备</li><li>有三种显示设备：current conditions, weather stats, forecast</li></ol><h1 id="2-Observer-Pattern"><a href="#2-Observer-Pattern" class="headerlink" title="2. Observer Pattern"></a>2. Observer Pattern</h1><h2 id="2-1-订阅报纸或杂志是怎么工作的？"><a href="#2-1-订阅报纸或杂志是怎么工作的？" class="headerlink" title="2.1. 订阅报纸或杂志是怎么工作的？"></a>2.1. 订阅报纸或杂志是怎么工作的？</h2><ol><li>报纸出版商开始发布报纸</li><li>订阅者向出版商订阅报纸，每次发行了新的报纸，出版商会把新报纸寄给订阅者</li><li>如果你不想在看报纸，你可以取消订阅，出版商就会停止报纸的邮寄</li><li>只要出版商还存在，人们、旅馆等就可以不断地订阅或取消订阅出版物。</li></ol><h2 id="2-2-Publisher-Subscribers-Observer-Pattern"><a href="#2-2-Publisher-Subscribers-Observer-Pattern" class="headerlink" title="2.2. Publisher + Subscribers = Observer Pattern"></a>2.2. Publisher + Subscribers = Observer Pattern</h2><p>以报纸订阅为例：</p><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/Observer-1.png" alt></p><p>newspaper object表示一个报纸出版商(publisher)的对象，Joe，Jenny，Tom是三个用户对象，他们向newspaper object发起订阅（或称向newspaper注册），完成了订阅的动作之后他们就成为了订阅者，当newspaper发布新一期的报纸时，这三个用户将会收到更新。我们将发布者(publisher)称为subject，将订阅者(subscribers)称为Observers。</p><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/Observer-2.png" alt></p><p>这时一个非订阅者Penny也想要获取报纸，Penny需要向出版商订阅</p><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/Observer-3.png" alt></p><p>现在Penny就成为了一个Observer，报纸更新时，就会推送给Penny和其他的Observer</p><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/Observer-4.png" alt></p><p>如果用户Tom不想再继续看报纸了，他就可以取消订阅，此时Tom就不再是一个Observer了</p><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/Observer-5.png" alt></p><p>newspaper object就会把Tom移出推送列表，报纸更新时就不再会推送给Tom</p><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/Observer-6.png" alt></p><h2 id="2-3-定义"><a href="#2-3-定义" class="headerlink" title="2.3. 定义"></a>2.3. 定义</h2><p><strong>The Observer Pattern</strong> defines a one-to-many dependency between objects so that when one object changes state,all of its dependents are notified and updated automatically.</p><h2 id="2-4-观察者模式类图"><a href="#2-4-观察者模式类图" class="headerlink" title="2.4. 观察者模式类图"></a>2.4. 观察者模式类图</h2><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/Observer-classDiagram.png" alt></p><h2 id="2-5-松耦合"><a href="#2-5-松耦合" class="headerlink" title="2.5. 松耦合"></a>2.5. 松耦合</h2><p>当两个对象之间的关系是松耦合时，他们可以交互，但是他们只知道彼此很少的信息。</p><p>观察者模式提供了一种subject和observer对象间松耦合的设计模式。</p><ol><li>subject对于observer的了解仅仅是知道observer实现了一个特定的接口(Observer接口)，subject不需要知道任何关于observer的其他信息</li><li>可以随时添加一个新的observer</li><li>增加新类型的observer时不需要修改subject</li><li>可以独立的重用subject和observer</li><li>改变subject或observer不会相互影响</li></ol><p><strong>松耦合设计允许我们构建灵活的OO系统，这个系统可以handle change，因为他们最小化了对象间的相互依赖</strong></p><h1 id="3-天气应用的设计实现"><a href="#3-天气应用的设计实现" class="headerlink" title="3. 天气应用的设计实现"></a>3. 天气应用的设计实现</h1><p><img src="//bruceeezhao.github.io/2020/10/16/设计模式学习之-02ObserverPattern/weatherDiagram.png" alt></p><h1 id="4-push-与-pull"><a href="#4-push-与-pull" class="headerlink" title="4. push 与 pull"></a>4. push 与 pull</h1><p>　在观察者模式中，常用的有推模型和拉模型两种方式。</p><ul><li><p>推模型 </p><p>主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。</p></li><li><p>拉模型 </p><p>主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是<strong>观察者从主题对象中拉数据</strong>。一般这种模型的实现中，会把<strong>主题对象自身通过update()方法传递给观察者</strong>，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</p></li></ul><h2 id="4-1-push-模型"><a href="#4-1-push-模型" class="headerlink" title="4.1. push 模型"></a>4.1. push 模型</h2><p>在push模型中Subject需要将所有更新的数据通过update函数通知观察者。</p><p><a href="https://github.com/bruceEeZhao/JavaLearn/tree/master/designPatterns/src/observer/push" target="_blank" rel="noopener">完整代码</a></p><p>一个具体的Subject定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer o : observers) &#123;</span><br><span class="line">            o.update(<span class="keyword">this</span>.temperature, <span class="keyword">this</span>.humidity, <span class="keyword">this</span>.pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个具体的观察者定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentCondition</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CurrentCondition: "</span> + <span class="string">"temperature is "</span> + temperature + <span class="string">".C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个观察着的定义我们可以看出，在push模式下，即使一个观察者仅需要直到一个数值的变化，也会收到Subject对象推送的全部消息</p><h2 id="4-2-pull-模型"><a href="#4-2-pull-模型" class="headerlink" title="4.2. pull 模型"></a>4.2. pull 模型</h2><p>在pull模型中。Subject仅需将this当做参数通知给Observers，observer可以根据需要来获取想要的信息。由于需要动态获取，Subject对象需要提供getter方法。</p><p><a href="https://github.com/bruceEeZhao/JavaLearn/tree/master/designPatterns/src/observer/pull" target="_blank" rel="noopener">完整代码</a></p><p>一个具体的Subject定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer o: observers) &#123;</span><br><span class="line">            o.update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个具体的观察者定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentCondition</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CurrentCondition: temperature is "</span> + temperature + <span class="string">"humidity is "</span> + humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断subject是否是WeatherData</span></span><br><span class="line">        <span class="keyword">if</span> (subject <span class="keyword">instanceof</span>  WeatherData) &#123;</span><br><span class="line">            <span class="keyword">this</span>.temperature = ((WeatherData) subject).getTemperature();</span><br><span class="line">            <span class="keyword">this</span>.humidity = ((WeatherData) subject).getHumidity();</span><br><span class="line">            display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里CurrentCondition对象需要获取两个数值，因此调用了subject的getter方法。</p><h1 id="5-问题"><a href="#5-问题" class="headerlink" title="5. 问题"></a>5. 问题</h1><p>在《header first design patterns》这本书中，是给实现Observer接口的类传入了实现Subject接口的类的参数，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    privite <span class="keyword">float</span> temperature;</span><br><span class="line">    privite <span class="keyword">float</span> humidity;</span><br><span class="line">    privite Subject weatherData;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是通过这种方式让weatherData对象添加observer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...other methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我认为这么写不太容易理解，但是搜了网上的一些帖子，绝大部分都是按照这种方式来写的。</p><p>我与书中的实现方式不同，我是将实现Observer接口的对象当做参数传给了Subject的对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...other methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想既然是WeatherData类维护observers的列表，为什么不把observer作为参数传给registerObserver函数呢？关于这一点，我还没有想明白，后期如果想明白了或者发现自己错了，再来修改。</p><p>———————————————分割线————————————————</p><p>关于上面说的问题，我想明白了，这里做一个解释：</p><p>通过向observer对象传递WeatherData对象，以达到observer对象自己管理注册和取消注册的动作，在我的代码的实现中，依赖于WeatherStation对于信息发布者和观察者的管理，需要WeatherStation告诉WeatherData对象要添加哪个对象作为观察者，或者告诉WeatherData需要将哪个对象从观察者列表移除。用书中的实现方式，当一个对象想要注册/取消注册时，仅需该对象调用自身的函数即可，比我的实现方式要好。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-天气应用&quot;&gt;&lt;a href=&quot;#1-天气应用&quot; class=&quot;headerlink&quot; title=&quot;1. 天气应用&quot;&gt;&lt;/a&gt;1. 天气应用&lt;/h1&gt;&lt;p&gt;系统中共有3中角色：&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://bruceeezhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习之---01策略模式</title>
    <link href="https://bruceeezhao.github.io/2020/10/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B-01%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://bruceeezhao.github.io/2020/10/14/设计模式学习之-01策略模式/</id>
    <published>2020-10-14T10:05:28.000Z</published>
    <updated>2020-10-15T12:14:22.175Z</updated>
    
    <content type="html"><![CDATA[<p><strong>策略模式(strategy pattern)</strong></p><a id="more"></a><h1 id="１．从鸭子仿真程序开始"><a href="#１．从鸭子仿真程序开始" class="headerlink" title="１．从鸭子仿真程序开始"></a>１．从鸭子仿真程序开始</h1><p><img src="//bruceeezhao.github.io/2020/10/14/设计模式学习之-01策略模式/duck1.png" alt="duck1.png"></p><p>假设有一个鸭子仿真程序，Duck类是一个抽象类，定义了鸭子应该具有的行为，鸭子应该会呱呱叫，有quack()函数；所有的鸭子都会游泳，有swim()函数。这两个函数都是实函数。由于每只鸭子都有不同的表现形式，因此display函数是一个虚函数，每个鸭子的子类都需要自己实现这个函数。</p><h1 id="2-添加飞翔功能"><a href="#2-添加飞翔功能" class="headerlink" title="2. 添加飞翔功能"></a>2. 添加飞翔功能</h1><p>这时我们需要为鸭子添加一个飞翔的功能，因此我们需要为Duck类添加一个fly()的函数。于是类的设计就变成了下面这样。</p><p><img src="//bruceeezhao.github.io/2020/10/14/设计模式学习之-01策略模式/duckAddFly.png" alt></p><p>下面是Duck的实现代码：<a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/strategy/Duck1.java" target="_blank" rel="noopener">完整的代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"quack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I can swim"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这时添加了一个飞的需求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I can fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时问题出现了，并不是每一只鸭子都会飞，直接在Duck类中添加fly函数，意味着所有子类都具有了fly的能力。同样也不是每一只鸭子都会呱呱叫（例如一只玩具鸭子），因此Duck的子类必须重写这些函数以满足自己的场景。</p><p>例如下面这个例子，橡皮鸭（玩具）就需要重写quack和fly函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword">extends</span> <span class="title">Duck1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RubberDuck"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RubberDuck r = <span class="keyword">new</span> RubberDuck();</span><br><span class="line">        r.display();</span><br><span class="line">        r.quack();</span><br><span class="line">        r.swim();</span><br><span class="line">        r.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设计的问题是每出现一种新的Duck的子类都需要考虑是否重写quack和fly函数，会出现大量的重复代码</p><h1 id="3-一种解决方案"><a href="#3-一种解决方案" class="headerlink" title="3. 一种解决方案"></a>3. 一种解决方案</h1><p><img src="//bruceeezhao.github.io/2020/10/14/设计模式学习之-01策略模式/duck-s1.png" alt></p><p>一种解决方案是将fly和quack从Duck超类中提取出来做成两个接口Flyable和Quackable。只有拥有这些功能的子类才会去实现这些接口。</p><p>这种解决方式破坏了代码重用的原则，每一个子类都必须实现接口中的方法，后期如果需要修改，就需要打开每一个实现了接口方法的类进行修改，后期代码维护将是一个噩梦。</p><h1 id="4-策略模式"><a href="#4-策略模式" class="headerlink" title="4. 策略模式"></a>4. 策略模式</h1><p><strong>定义</strong> 策略模式(strategy pattern)defines a family of algorithms,encapsulates(封装) each one, and makes them interchangeable.Strategy lets the algorithms vary independently from clients that use it.</p><h2 id="4-1-将变化的部分与不变的部分分离"><a href="#4-1-将变化的部分与不变的部分分离" class="headerlink" title="4.1. 将变化的部分与不变的部分分离"></a>4.1. 将变化的部分与不变的部分分离</h2><p>我们知道fly和quack在不同的子类中的表现是不同的，因此将这两个方法提取出来并创建一系列的类来实现每一种行为</p><p><img src="//bruceeezhao.github.io/2020/10/14/设计模式学习之-01策略模式/duck-sp.png" alt></p><h2 id="4-2-面向接口编程而非面向实现"><a href="#4-2-面向接口编程而非面向实现" class="headerlink" title="4.2. 面向接口编程而非面向实现"></a>4.2. 面向接口编程而非面向实现</h2><p>我们使用一个接口来表示一种行为，例如FlyBehavior接口表示飞翔的行为;QuackBehavior接口表示鸣叫的行为。</p><p>这时Duck的子类不负责实现fly和quack的接口，我们会实现一些列的行为类来实现这些接口。接口和类的关系如下图：</p><p><img src="//bruceeezhao.github.io/2020/10/14/设计模式学习之-01策略模式/duck-interface-re.png" alt></p><p>这与之前的做法是完全不同的，之前的方式是或者在Duck超类中实现一个行为或者在子类中实现一个行为。在之前的做法中我们都依赖于一种实现，我们的代码就被限定与某一种特定的实现。</p><p>在新的设计中，Duck子类将会通过接口(FlyBehavior or QuackBehavior)来使用某一个行为，这样实际行为的实现就不会被限定在Duck的子类中。</p><p><img src="//bruceeezhao.github.io/2020/10/14/设计模式学习之-01策略模式/duck-finally.png" alt></p><p>接口示例代码：<a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/strategy/FlyBegavior.java" target="_blank" rel="noopener">完整代码</a></p><p>下面的代码中实现了FlyBegavior接口以及两个具体飞翔行为的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBegavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span>  <span class="title">FlyBegavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I can Fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBegavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"can't fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/strategy/QuackBehavior.java" target="_blank" rel="noopener">完整代码</a></p><p>下面的代码实现了QuackBehavior接口以及三个鸣叫的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"quack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"squeak"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"muteQuack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Duck及子类示例代码：<a href="https://github.com/bruceEeZhao/JavaLearn/blob/master/designPatterns/src/strategy/Duck2.java" target="_blank" rel="noopener">完整代码</a></p><p>在Duck类中定义了两个接口类型的变量，Duck并不负责实现这些接口，只是当子类创建实例时将接口的实现类作为参数传给接口变量，使得程序在执行时动态决定调用哪个具体的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FlyBegavior flyBegavior;</span><br><span class="line">    <span class="keyword">private</span> QuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck2</span><span class="params">(QuackBehavior quackBehavior, FlyBegavior flyBegavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyBegavior = flyBegavior;</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = quackBehavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I can siwm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBegavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MallardDuck2</span> <span class="keyword">extends</span> <span class="title">Duck2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> Quack(), <span class="keyword">new</span> FlyWithWings());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm a real Mallard duck"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MallardDuck2 m = <span class="keyword">new</span> MallardDuck2();</span><br><span class="line">        m.display();</span><br><span class="line">        m.performFly();</span><br><span class="line">        m.performQuack();</span><br><span class="line">        m.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-练习题"><a href="#5-练习题" class="headerlink" title="5. 练习题"></a>5. 练习题</h1><p><img src="//bruceeezhao.github.io/2020/10/14/设计模式学习之-01策略模式/Character.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;策略模式(strategy pattern)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://bruceeezhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://bruceeezhao.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>大数据运算系统</title>
    <link href="https://bruceeezhao.github.io/2020/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%BF%90%E7%AE%97%E7%B3%BB%E7%BB%9F/"/>
    <id>https://bruceeezhao.github.io/2020/04/01/大数据运算系统/</id>
    <published>2020-04-01T11:21:19.000Z</published>
    <updated>2020-04-01T13:26:46.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MapReduce-Hadoop"><a href="#1-MapReduce-Hadoop" class="headerlink" title="1. MapReduce/Hadoop"></a>1. MapReduce/Hadoop</h1><a id="more"></a><h2 id="1-1-编程模型"><a href="#1-1-编程模型" class="headerlink" title="1.1. 编程模型"></a>1.1. 编程模型</h2><h3 id="1-1-1-整体思路"><a href="#1-1-1-整体思路" class="headerlink" title="1.1.1. 整体思路"></a>1.1.1. 整体思路</h3><ul><li>解决思路<ul><li>程序员写串行程序</li><li>由系统完成并行分布式的执行</li></ul></li><li>程序员保证串行程序的正确性<ul><li>编程序时不需要思考并行的问题</li><li>调试时只需要保证串行执行正确</li></ul></li><li>系统负责并行分布执行的正确性和效率  <ul><li>Multi-threading, Socket programming, Data distribution, Job distribution, coordination, load balancing, Fault tolerance</li></ul></li></ul><ul><li>缺点：</li><li>牺牲了程序的功能！<ul><li>直接进行并行分布式编程，可以完成各种各样丰富的功能</li><li>而一个编程模型实际上是限定了程序的功能类<h3 id="1-1-2-数据模型"><a href="#1-1-2-数据模型" class="headerlink" title="1.1.2. 数据模型"></a>1.1.2. 数据模型</h3></li></ul></li><li>&lt;key, value&gt;<ul><li>数据由一条一条的记录组成</li><li>记录之间是无序的</li><li>每一条记录有一个key，和一个value</li><li>key: 可以不唯一</li><li>key与value的具体类型和内部结构由程序员决定，系统基本上把它们看作黑</li></ul></li></ul><h3 id="1-1-3-Map-shuffle-Reduce"><a href="#1-1-3-Map-shuffle-Reduce" class="headerlink" title="1.1.3. Map-shuffle-Reduce"></a>1.1.3. Map-shuffle-Reduce</h3><p>Map(ik,iv) -&gt; {&lt;mk,mv&gt;}<br>Reduce(mk,{mv}) -&gt; {&lt;ok,ov&gt;}</p><ol><li><p>Map 函数<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/map_function.png" alt="map_function"></p></li><li><p>shuffle<br>为了做Reduce，系统内部做了一个shuffle的操作。<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/shuffle_function.png" alt="shuffle"></p></li><li><p>Reduce<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/Reduce_function.png" alt="reduce"></p></li><li><p>Map-shuffle-Reduce<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/map-shuffle-reduce.png" alt="map-shuffle-reduce"></p></li></ol><h3 id="1-1-4-Word-count举例"><a href="#1-1-4-Word-count举例" class="headerlink" title="1.1.4. Word count举例"></a>1.1.4. Word count举例</h3><p><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/word_count.png" alt="word_count"></p><h3 id="1-1-5-与SQL-Select语句的关系"><a href="#1-1-5-与SQL-Select语句的关系" class="headerlink" title="1.1.5. 与SQL Select语句的关系"></a>1.1.5. 与SQL Select语句的关系</h3><p><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/mapreduce-vs-sql.png" alt="mapreducevssql"></p><h2 id="1-2-系统实现"><a href="#1-2-系统实现" class="headerlink" title="1.2. 系统实现"></a>1.2. 系统实现</h2><h3 id="1-2-1-系统架构"><a href="#1-2-1-系统架构" class="headerlink" title="1.2.1. 系统架构"></a>1.2.1. 系统架构</h3><ol><li><p>系统架构<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/mapreduce-archi.png" alt="mapreduce-archi"><br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/mapreduce-archi2.png" alt="archi2"></p></li><li><p>MapReduce/Hadoop 系统架构<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/MapReduce-hadoop-arch.png" alt="map-hadoop"></p></li></ol><h3 id="1-2-2-工作过程"><a href="#1-2-2-工作过程" class="headerlink" title="1.2.2. 工作过程"></a>1.2.2. 工作过程</h3><ol><li><p>提交作业：<br>用户向JobTracker提交JobConf。JobConf包括Map函数、Reduce函数(Jar)、配置信息(例如，几个Mappers，几个Reducers)、输入路径、输出路径等</p></li><li><p>Map Task 读数据<br>JobTracker给mappers分配任务，mapper从HDFS中读取数据块并处理。<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/mapTask_read.png" alt="map-task-read"></p></li></ol><ul><li><p>Split：一个HDFS数据块</p></li><li><p>Split 的个数可能多于Mappers个数</p><ul><li>每个split对应一个Map Task</li><li>每个Mapper可能需要处理多个Task</li></ul></li><li><p>优化：就近处理</p><ul><li>JobTracker尽量Mapper处理本机data node存储的split，从而减少网络数据传输的开销</li></ul></li><li><p>InputFormat</p><ul><li>Hadoop提供TextInputFormat，KeyValueInputFormat，SequenceFileInputFormat</li><li>如何从提供的输入路径获得数据</li><li>如何把输入数据分成split</li><li>如何将数据分解成&lt;ik,iv&gt;</li></ul></li><li><p>程序员可以编写自己的InputFormat</p></li></ul><ol start="3"><li>Map Task 执行</li></ol><ul><li><p>对于一个split，Mapper</p><ul><li>对每个&lt;ik, iv&gt;调用一次Map函数生成&lt;mk,mv&gt;</li><li>对每个mk调用Partitioner计算其对应的Reduce task id</li><li>属于同一个Reduce task的&lt;mk,mv&gt;存储于同一个文件，放在本地硬盘上</li><li>每个文件按照mk自小到大排序</li></ul></li><li><p>Partitioner：</p><ul><li>Hadoop默认使用HashPartitionerReduce taskid=hash(mk) % ReduceTaskNumber</li><li>程序员可以编写自己的Partitioner</li></ul></li></ul><ol start="4"><li>shuffle</li></ol><ul><li>Reducer从每个Map task传输中间结果文件<ul><li>每个文件本身已经排好序了</li></ul></li><li>对多个结果文件进行归并，从而实现group by</li></ul><ol start="5"><li>Reduce<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/MR-run-Reduce.png" alt="MR-reduce"></li></ol><ul><li>对于每个&lt;mk,{mv}&gt;调用一次Reduce函数</li><li>产生的&lt;ok, ov&gt;写入输出文件</li><li>OutputFormat</li><li>每个Reduce task 产生一个单独的文件</li></ul><h3 id="1-2-3-容错"><a href="#1-2-3-容错" class="headerlink" title="1.2.3. 容错"></a>1.2.3. 容错</h3><ul><li><p>HeartBeat(心跳)消息定期发送，向JobTracker汇报进度</p></li><li><p>JobTracker可以及时发现不响应的机器或速度非常慢的机器</p><ul><li>这些异常机器被称作Stragglers</li></ul></li><li><p>一旦发现Straggler</p><ul><li>JobTracker就将它需要做的工作分配给另一个worker</li></ul></li><li><p>Straggler是Mapper，将所对应的splits分配给其它的Mapper</p><ul><li>输入数据是分布式文件，所以不需要特殊处理</li><li>通知所有的Reducer这些splits的新对应Mapper</li><li>Shuffle时从新对应的Mapper传输数据</li></ul></li><li><p>Stragger是Reducer，在另一个TaskTracker执行这个Reducer</p><ul><li>这个Reducer需要重新从Mappers传输数据</li><li>注意：因为Mapper的输出是在本地文件中的，所以可以多次传<h2 id="1-3-典型算法"><a href="#1-3-典型算法" class="headerlink" title="1.3. 典型算法"></a>1.3. 典型算法</h2></li></ul></li><li><p>Grep</p></li><li><p>Sorting</p></li><li><p>Join</p></li></ul><h1 id="2-Microsoft-Dryad"><a href="#2-Microsoft-Dryad" class="headerlink" title="2. Microsoft Dryad"></a>2. Microsoft Dryad</h1><p><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/Dryad.png" alt="Dryad"></p><ul><li><p>Dryad是对MapReduce模型的一种扩展</p><ul><li>组成单元不仅是Map和Reduce，可以是多种节点</li><li>节点之间形成一个有向无环图DAG(Directed Acyclic Graph) ，以表达所需要的计算</li><li>节点之间的数据传输模式更加多样<ul><li>可以是类似Map/Reduce中的shuffle</li><li>也可以是直接1:1、1:多、多:1传输</li></ul></li><li>比MapReduce更加灵活，但也更复杂–需要程序员规定计算的DAG</li></ul></li><li><p>Microsoft内部云计算系统Cosmos基于Dryad</p></li></ul><h1 id="3-同步图计算系统"><a href="#3-同步图计算系统" class="headerlink" title="3. 同步图计算系统"></a>3. 同步图计算系统</h1><h2 id="3-1-图算法"><a href="#3-1-图算法" class="headerlink" title="3.1. 图算法"></a>3.1. 图算法</h2><h2 id="3-2-同步图计算"><a href="#3-2-同步图计算" class="headerlink" title="3.2. 同步图计算"></a>3.2. 同步图计算</h2><h3 id="3-2-1-图计算模型"><a href="#3-2-1-图计算模型" class="headerlink" title="3.2.1. 图计算模型"></a>3.2.1. 图计算模型</h3><p><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/graph-compute-model.png" alt="graph-model"></p><h4 id="3-2-1-1-特点"><a href="#3-2-1-1-特点" class="headerlink" title="3.2.1.1. 特点"></a>3.2.1.1. 特点</h4><ol><li>BSP模型<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/BSP-model.png" alt="BSP"></li><li>基于顶点的编程模型<br><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/program-model.png" alt="program"></li></ol><h4 id="3-2-1-2-如何结束"><a href="#3-2-1-2-如何结束" class="headerlink" title="3.2.1.2. 如何结束"></a>3.2.1.2. 如何结束</h4><p><img src="//bruceeezhao.github.io/2020/04/01/大数据运算系统/graph-compute-end.png" alt="compute-end"></p><h2 id="3-3-图计算编程"><a href="#3-3-图计算编程" class="headerlink" title="3.3. 图计算编程"></a>3.3. 图计算编程</h2><h2 id="3-4-系统实现"><a href="#3-4-系统实现" class="headerlink" title="3.4. 系统实现"></a>3.4. 系统实现</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-MapReduce-Hadoop&quot;&gt;&lt;a href=&quot;#1-MapReduce-Hadoop&quot; class=&quot;headerlink&quot; title=&quot;1. MapReduce/Hadoop&quot;&gt;&lt;/a&gt;1. MapReduce/Hadoop&lt;/h1&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://bruceeezhao.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>英语学术论文写作</title>
    <link href="https://bruceeezhao.github.io/2020/04/01/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C/"/>
    <id>https://bruceeezhao.github.io/2020/04/01/英语学术论文写作/</id>
    <published>2020-04-01T02:58:05.000Z</published>
    <updated>2020-04-17T03:13:07.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-文章结构"><a href="#1-文章结构" class="headerlink" title="1. 文章结构"></a>1. 文章结构</h1><p><img src="//bruceeezhao.github.io/2020/04/01/英语学术论文写作/parts-of-your-paper.png" alt="parts"></p><ul><li>Abstract </li><li>Keywords<br>&emsp;</li><li>Introduction &amp; Literature review</li><li>Method</li><li>Results / Findings</li><li>Discussion &amp; Conclusions<br>&emsp;</li><li>Reference</li></ul><a id="more"></a><h2 id="1-1-Abstract"><a href="#1-1-Abstract" class="headerlink" title="1.1. Abstract"></a>1.1. Abstract</h2><h3 id="1-1-1-特点"><a href="#1-1-1-特点" class="headerlink" title="1.1.1. 特点"></a>1.1.1. 特点</h3><ul><li>A mini paper </li><li>Purpose: for readers know your paper rapidly and thoroughly</li><li>According to journals’ requites</li><li>around 200 words</li><li>Includes: reserch background, method, result and conclusions.</li></ul><h3 id="1-1-2-Abstract-Nature-Guidelines-7-parts"><a href="#1-1-2-Abstract-Nature-Guidelines-7-parts" class="headerlink" title="1.1.2. Abstract Nature Guidelines(7 parts)"></a>1.1.2. Abstract Nature Guidelines(7 parts)</h3><ol><li>One or two sentences providing a <strong>basic introduction</strong> to the field,comparehensible a scientist any discipline.</li><li>Two to three sentences of <strong>more detailed background</strong>,comprehensible to scientists in related disciplines.</li><li>One sentence clearly stating the <strong>general problem</strong> being adressed by this particular study.</li><li>One sentence summarizing the main result(with the words “<strong>here we show</strong>“ or  other equivalent)</li><li>Two or three sentences explaining what the <strong>main result</strong> reveals in direct comparison to what was thought to be the case previously,or how the  main result adds to previous knowledge.</li><li>One or two sentences to put the results into a more <strong>general context</strong>.</li><li>Two or three sentences to provide a <strong>broader perspective</strong>,readily comprehensible to a scientist in any discipline,may be included in the first pargraph if the editor considers that the accessibility of the paper is significantly enhanced by their inclusion,Under thess circumstances, the length of the  paragraph can be up to 300 words.(this example is 190 words without the final section,and 250 words with it).</li></ol><h3 id="1-1-3-Abstract-needs-to-address-4-question"><a href="#1-1-3-Abstract-needs-to-address-4-question" class="headerlink" title="1.1.3. Abstract needs to address 4 question"></a>1.1.3. Abstract needs to address 4 question</h3><ul><li>Why did you do this study? -&gt; Background(2)</li><li>Where is the gap?How? -&gt; Researh Question(+Method)(1-2)</li><li>What did you find? -&gt; Result(1-2)</li><li>What do the findings mean? -&gt; Evaluation(2)</li></ul><h2 id="1-2-Keywords"><a href="#1-2-Keywords" class="headerlink" title="1.2. Keywords"></a>1.2. Keywords</h2><ul><li>Puspose: for readers search your paper rapidly.</li><li>3-5 words or phrase, separated by semicolons</li><li>Theme,methods,key concepts,etc.</li></ul><h3 id="1-2-1-how-to-choice-keywords"><a href="#1-2-1-how-to-choice-keywords" class="headerlink" title="1.2.1. how to choice keywords?"></a>1.2.1. how to choice keywords?</h3><ul><li>highly relevance-oriented</li><li>target readers-oriented</li></ul><h1 id="2-二级标题"><a href="#2-二级标题" class="headerlink" title="2. 二级标题"></a>2. 二级标题</h1><h2 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2.1. 作用"></a>2.1. 作用</h2><ol><li>important for your readers</li></ol><ul><li>帮助读者在脑海中构建一个清晰的论文框架</li><li>用二级标题引领读者的阅读，抓住重点</li><li>为寻找特定信息的读者，提供一个快速的检索方式</li></ul><ol start="2"><li>important for your reviewers</li></ol><ul><li>帮助审稿人快速掌握你的论文提要，并做出判断</li><li>让审稿人的反馈能更准确定位，促进对话</li><li>完整叙述链条：引言/综述 vs 研究发现/讨论</li></ul><ol start="3"><li>important for yourself</li></ol><ul><li>构思草稿阶段：梳理自己脑海中的思路</li><li>落笔行文阶段： 紧扣重点，前后呼应，把我写作节奏</li><li>团队内：共同作者之间最重要的是在二级标题上先一致</li></ul><h2 id="2-2-设计二级标题的原则"><a href="#2-2-设计二级标题的原则" class="headerlink" title="2.2. 设计二级标题的原则"></a>2.2. 设计二级标题的原则</h2><ol><li><p>list types of methods used, NOT Topics<br><img src="//bruceeezhao.github.io/2020/04/01/英语学术论文写作/not-topic.png" alt="not-topic"></p></li><li><p>descripe results with action words(Verbs), NOT Nouns<br><img src="//bruceeezhao.github.io/2020/04/01/英语学术论文写作/not-noun.png" alt="not-noun"></p></li><li><p>Introduce topics RELEVENT to understand Results (Not necessarily)<br><img src="//bruceeezhao.github.io/2020/04/01/英语学术论文写作/result-releted.png" alt="result-releted"></p></li><li><p>Discuss your results in context of previous work<br><img src="//bruceeezhao.github.io/2020/04/01/英语学术论文写作/discuss-result-before.png" alt="duscuss"></p></li></ol><h1 id="3-Logic-and-Flow"><a href="#3-Logic-and-Flow" class="headerlink" title="3. Logic and Flow"></a>3. Logic and Flow</h1><h2 id="3-1-Logic-常见的段落行文逻辑"><a href="#3-1-Logic-常见的段落行文逻辑" class="headerlink" title="3.1. Logic: 常见的段落行文逻辑"></a>3.1. Logic: 常见的段落行文逻辑</h2><h3 id="3-1-1-General-to-specific-and-specific-to-general"><a href="#3-1-1-General-to-specific-and-specific-to-general" class="headerlink" title="3.1.1. General-to-specific and specific-to-general"></a>3.1.1. General-to-specific and specific-to-general</h3><h4 id="3-1-1-1-General-to-specific"><a href="#3-1-1-1-General-to-specific" class="headerlink" title="3.1.1.1. General-to-specific"></a>3.1.1.1. General-to-specific</h4><p><strong>结构：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    st(General statement)--&gt;op1[Elaboration on statement]</span><br><span class="line">    op1--&gt;op2[More detailed elaboration]</span><br><span class="line">    op2--&gt;ed[Broader Statement]</span><br></pre></td></tr></table></figure><p><strong>General Statements</strong></p><ol><li>Beginning of Abstracts</li><li>start of Introduction section</li><li>sometimes Disscussion section<br>Text: descriptive and explanatory<br>Writer: informed and  organized</li></ol><p><strong>General Statements 作用:</strong>  </p><ol><li>to “ease” your reader into you writing</li><li>if too challenging,reader lost from the beginning</li></ol><h4 id="3-1-1-2-specific-to-general"><a href="#3-1-1-2-specific-to-general" class="headerlink" title="3.1.1.2. specific-to-general"></a>3.1.1.2. specific-to-general</h4><p><strong>结构：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    st(Specific/Narrow statement)--&gt;op1[Elaboration on statement]</span><br><span class="line">    op1--&gt;op2[broader Context]</span><br><span class="line">    op2--&gt;ed[Concluding Generalization]</span><br></pre></td></tr></table></figure><p><strong>specific Statements</strong></p><ol><li>End Abstract</li><li>End of Discussion section</li></ol><p><strong>specific Statements 作用:</strong>  </p><ol><li>to provide a link from a specific point to the bigger picture or context of your study</li></ol><h4 id="3-1-1-3-总结"><a href="#3-1-1-3-总结" class="headerlink" title="3.1.1.3. 总结"></a>3.1.1.3. 总结</h4><ol><li>G-&gt;S found in Introduction</li><li>S-&gt;G found in Discussion</li><li>both G-&gt;S and S-&gt;G found in Abstruct</li></ol><h3 id="3-1-2-Problem-Solution"><a href="#3-1-2-Problem-Solution" class="headerlink" title="3.1.2. Problem-Solution"></a>3.1.2. Problem-Solution</h3><h4 id="3-1-2-1-Tenses"><a href="#3-1-2-1-Tenses" class="headerlink" title="3.1.2.1. Tenses"></a>3.1.2.1. Tenses</h4><ol><li>Result Section</li></ol><ul><li>active voice + past tense(We did)</li><li>passive voice(被动语态) + past tense(As shown in Fig.1,…)</li></ul><ol start="2"><li>Disucssion Section</li></ol><ul><li>both active and passive voice</li><li>past tense(Previous reports showed…) and</li><li>present tense(On the basis of our results, we propose…)</li></ul><h3 id="3-1-3-Process-Structure"><a href="#3-1-3-Process-Structure" class="headerlink" title="3.1.3. Process Structure"></a>3.1.3. Process Structure</h3><p>first -&gt; second …</p><h3 id="3-1-4-Old-to-New-Information-Flow"><a href="#3-1-4-Old-to-New-Information-Flow" class="headerlink" title="3.1.4. Old-to-New Information Flow"></a>3.1.4. Old-to-New Information Flow</h3><p>从以往的研究或者人们熟知的研究开始撰写，过度到比较前沿的研究发现，进而引出自己的研究问题等等。这个写作逻辑，通常也会跟General to Specific逻辑混合或者结合使用.</p><h2 id="3-2-flow：-使文章更流畅"><a href="#3-2-flow：-使文章更流畅" class="headerlink" title="3.2. flow： 使文章更流畅"></a>3.2. flow： 使文章更流畅</h2><h3 id="3-2-1-linking-words-and-phrases"><a href="#3-2-1-linking-words-and-phrases" class="headerlink" title="3.2.1. linking words and phrases"></a>3.2.1. linking words and phrases</h3><p><img src="//bruceeezhao.github.io/2020/04/01/英语学术论文写作/linking-words.png" alt="linking-words"></p><h3 id="3-2-2-Punctuation-标点符号"><a href="#3-2-2-Punctuation-标点符号" class="headerlink" title="3.2.2. Punctuation(标点符号)"></a>3.2.2. Punctuation(标点符号)</h3><p>Punctuation： full stops(.),comma(,),semicolon(;),colon(:)</p><h3 id="3-2-3-Conjunction（连接词）"><a href="#3-2-3-Conjunction（连接词）" class="headerlink" title="3.2.3. Conjunction（连接词）"></a>3.2.3. Conjunction（连接词）</h3><ul><li>Conjunction: and,but,or ;Use a comma</li><li>Connector: however,thus,also… ;use a semicolon or period</li><li>Subordinator: because,if,while… ; Use a comma</li></ul><p>Problem：</p><ol><li><p>Use ofconjunctions at the begining of a sentence </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BUT: in contract/howerve/Unexpectedly/Surprisingly</span><br><span class="line">AND: in addition/also/Furthermore/Importantly</span><br><span class="line">THOUGH: only use after comma as part of a clause(even though)</span><br></pre></td></tr></table></figure></li><li><p>using ‘and’ to connect unrelated facts</p></li></ol><p><img src="//bruceeezhao.github.io/2020/04/01/英语学术论文写作/checklist.png" alt="checklist"></p><h3 id="3-2-4-Repetition-重复"><a href="#3-2-4-Repetition-重复" class="headerlink" title="3.2.4. Repetition(重复)"></a>3.2.4. Repetition(重复)</h3><ul><li>repeat of words is not a problem in academic writing </li><li>(to the contrary),repeats improve clarity and precision </li></ul><h3 id="3-2-5-Time-adverbials"><a href="#3-2-5-Time-adverbials" class="headerlink" title="3.2.5. Time adverbials"></a>3.2.5. Time adverbials</h3><p>once,first,next,then,finaly….</p><h3 id="3-2-6-ing-clauses"><a href="#3-2-6-ing-clauses" class="headerlink" title="3.2.6. -ing clauses"></a>3.2.6. -ing clauses</h3><p>e.g. Prices rise,thus leading to a decrease in demand</p><ul><li>emphasize cause and effect</li><li>used in combination with ‘thus’(optional)</li><li>render your statement more dynamic</li><li>very common in academic writing</li></ul><h3 id="3-2-7-this-these-summary-word"><a href="#3-2-7-this-these-summary-word" class="headerlink" title="3.2.7. this/these + summary word"></a>3.2.7. this/these + summary word</h3><p>e.g. this situation has resulted in intense competition for admission.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-文章结构&quot;&gt;&lt;a href=&quot;#1-文章结构&quot; class=&quot;headerlink&quot; title=&quot;1. 文章结构&quot;&gt;&lt;/a&gt;1. 文章结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;//bruceeezhao.github.io/2020/04/01/英语学术论文写作/parts-of-your-paper.png&quot; alt=&quot;parts&quot;&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Abstract &lt;/li&gt;
&lt;li&gt;Keywords&lt;br&gt;&amp;emsp;&lt;/li&gt;
&lt;li&gt;Introduction &amp;amp; Literature review&lt;/li&gt;
&lt;li&gt;Method&lt;/li&gt;
&lt;li&gt;Results / Findings&lt;/li&gt;
&lt;li&gt;Discussion &amp;amp; Conclusions&lt;br&gt;&amp;emsp;&lt;/li&gt;
&lt;li&gt;Reference&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创新创业管理</title>
    <link href="https://bruceeezhao.github.io/2020/03/19/%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E7%AE%A1%E7%90%86/"/>
    <id>https://bruceeezhao.github.io/2020/03/19/创新创业管理/</id>
    <published>2020-03-19T11:05:11.000Z</published>
    <updated>2020-03-19T11:05:11.336Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>大数据存储系统</title>
    <link href="https://bruceeezhao.github.io/2020/03/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    <id>https://bruceeezhao.github.io/2020/03/11/大数据存储系统/</id>
    <published>2020-03-11T11:27:47.000Z</published>
    <updated>2020-03-30T01:46:53.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-分布式系统基本概念"><a href="#1-分布式系统基本概念" class="headerlink" title="1. 分布式系统基本概念"></a>1. 分布式系统基本概念</h1><a id="more"></a><h2 id="1-1-网络与协议"><a href="#1-1-网络与协议" class="headerlink" title="1.1. 网络与协议"></a>1.1. 网络与协议</h2><p><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/OSI-Internet.png" alt="OSI"></p><h3 id="1-1-1-IP-TCP-UDP"><a href="#1-1-1-IP-TCP-UDP" class="headerlink" title="1.1.1. IP/TCP/UDP"></a>1.1.1. IP/TCP/UDP</h3><ul><li>IP (Internet Protocol)<ul><li>IPv4地址：例如210.76.211.7，唯一标识一台联网的机器</li><li>Routing(路由)</li><li>IP packet: header, data</li><li>Connectionless (无连接), unordered(无序), best-effort (不保证可靠)</li></ul></li><li>TCP (Transmission Control Protocol)<ul><li>在IP基础上实现</li><li>Port端口号：不同的进程/socket</li><li>Reliable (可靠的), ordered (有顺序), connection-oriented (有连接),error checked (数据校验)</li></ul></li><li>UDP (User Datagram Protocol)<ul><li>在IP基础上实现</li><li>Port端口号：不同的进程</li><li>进行数据校验，其它与IP相同</li></ul></li></ul><h3 id="1-1-2-应用层协议"><a href="#1-1-2-应用层协议" class="headerlink" title="1.1.2. 应用层协议"></a>1.1.2. 应用层协议</h3><ul><li>DNS</li><li>HTTP</li></ul><h2 id="1-2-通信方式"><a href="#1-2-通信方式" class="headerlink" title="1.2. 通信方式"></a>1.2. 通信方式</h2><h3 id="1-2-1-Process-Thread"><a href="#1-2-1-Process-Thread" class="headerlink" title="1.2.1. Process/Thread"></a>1.2.1. Process/Thread</h3><ul><li>在OS内核中两者很相似</li><li>Process (进程)<ul><li>创建：fork</li><li>私有的虚存空间</li><li>私有的打开文件 (files, sockets, devices, pipes …)</li></ul></li><li>Thread (线程)<ul><li>创建：pthread_create -&gt; clone</li><li>共享的虚存空间</li><li>共享的打开文件</li><li>一个进程中可以有多个线程</li></ul></li></ul><h3 id="1-2-2-应用程序进程间的通信方式"><a href="#1-2-2-应用程序进程间的通信方式" class="headerlink" title="1.2.2. 应用程序进程间的通信方式"></a>1.2.2. 应用程序进程间的通信方式</h3><ul><li>Shared memory (共享内存)<ul><li>在单机上 <ul><li>同一个进程内部，多个线程之间 </li><li>多个进程之间，把同一块物理内存映射到多个进程的虚存空间中</li></ul></li><li>一方修改，另一方可以立即看到</li><li>需要并发控制</li></ul></li><li>Message passing (消息传递)<ul><li>单机上，多进程之间</li><li>多机之间</li><li>例如：socket (TCP/UDP)，pipe等</li></ul></li></ul><h2 id="1-3-分布式系统类型，故障类型，CAP"><a href="#1-3-分布式系统类型，故障类型，CAP" class="headerlink" title="1.3. 分布式系统类型，故障类型，CAP"></a>1.3. 分布式系统类型，故障类型，CAP</h2><h3 id="1-3-1-分布式系统类型"><a href="#1-3-1-分布式系统类型" class="headerlink" title="1.3.1. 分布式系统类型"></a>1.3.1. 分布式系统类型</h3><ul><li>Client / Server<ul><li>客户端发送请求，服务器完成操作，发回响应</li><li>例如：3-tier web architecture<ul><li>Presentation: web server</li><li>Business Logic: application server</li><li>Data: database server</li></ul></li></ul></li><li>P2P (Peer-to-peer)<ul><li>分布式系统中每个节点都执行相似的功能</li><li>整个系统功能完全是分布式完成的</li><li>没有中心控制节点</li></ul></li><li>Master / workers<ul><li>有一个/一组节点为主，进行中心控制协调</li><li>其它多个节点为workers，完成具体工作</li></ul></li></ul><h3 id="1-3-2-故障模型-Failure-Model"><a href="#1-3-2-故障模型-Failure-Model" class="headerlink" title="1.3.2. 故障模型(Failure Model)"></a>1.3.2. 故障模型(Failure Model)</h3><ul><li>Fail stop<ul><li>当出现故障时，进程停止/崩溃</li></ul></li><li>Fail slow<ul><li>当出现故障时，运行速度变得很慢</li></ul></li><li>Byzantine failure<ul><li>包含恶意攻击</li></ul></li></ul><h3 id="1-3-3-CAP定理"><a href="#1-3-3-CAP定理" class="headerlink" title="1.3.3. CAP定理"></a>1.3.3. CAP定理</h3><p><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/CAP.png" alt="CAP"></p><h1 id="2-分布式文件系统"><a href="#2-分布式文件系统" class="headerlink" title="2. 分布式文件系统"></a>2. 分布式文件系统</h1><h2 id="2-1-NFS-Sun’s-Network-File-System"><a href="#2-1-NFS-Sun’s-Network-File-System" class="headerlink" title="2.1. NFS (Sun’s Network File System)"></a>2.1. NFS (Sun’s Network File System)</h2><p><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/NFS.png" alt="NFS"></p><h3 id="2-1-1-Stateless（无状态）"><a href="#2-1-1-Stateless（无状态）" class="headerlink" title="2.1.1. Stateless（无状态）"></a>2.1.1. Stateless（无状态）</h3><ul><li>NFS Server不保持任何状态，每个操作都是无状态的</li><li>NFSPROC_READ<ul><li>输入参数: file handle, offset, count</li><li>返回结果: data, attributes</li></ul></li><li>NFSPROC_WRITE<ul><li>输入参数: file handle, offset, count, data</li><li>返回结果: attributes</li></ul></li><li>NFSPROC_LOOKUP<ul><li>输入参数: directory file handle, name of file/directory to look up</li><li>返回结果: file handle</li></ul></li><li>NFSPROC_GETATTR<ul><li>输入参数: file handle</li><li>返回结果: attributes</li></ul></li><li>等等</li></ul><h3 id="2-1-2-Idempotent（幂等性：重复多次结果不变）"><a href="#2-1-2-Idempotent（幂等性：重复多次结果不变）" class="headerlink" title="2.1.2 Idempotent（幂等性：重复多次结果不变）"></a>2.1.2 Idempotent（幂等性：重复多次结果不变）</h3><ul><li>READ操作是Idempotent<ul><li>在没有其它操作前提下，重复多次结果是一样的</li><li>为什么？</li></ul></li><li>WRITE操作是Idempotent<ul><li>在没有其它操作前提下，重复多次结果是一样的</li><li>为什么？</li></ul></li></ul><h3 id="2-1-3-Server-Crash-Recovery"><a href="#2-1-3-Server-Crash-Recovery" class="headerlink" title="2.1.3. Server Crash Recovery"></a>2.1.3. Server Crash Recovery</h3><ul><li>NFS Server<ul><li>只用重启，什么额外操作都不用</li><li>因为Stateless</li></ul></li><li>NFS Client<ul><li>如果一个请求没有响应，那么就不断重试</li><li>因为Idempotent</li></ul></li></ul><h3 id="2-1-4-Cache-Consistency"><a href="#2-1-4-Cache-Consistency" class="headerlink" title="2.1.4. Cache Consistency"></a>2.1.4. Cache Consistency</h3><p>指对一个文件，并发访问冲突  </p><p>NFSv2对于Cache Consistency的解决方法</p><ul><li>Flush-on-close (又称作close-to-open) consistency<br>-在文件关闭时，必须把缓存的已修改的文件数据，写回NFS Server</li><li>每次在使用缓存的数据前，必须检查是否过时<ul><li>用GETATTR请求去poll（轮询），获得最新的文件属性</li><li>比较文件修改时间</li></ul></li><li>性能问题<ul><li>大量的GETATTR（即使文件只被一个client缓存）</li><li>关闭文件的写回性能</li></ul></li></ul><h2 id="2-2-AFS-Andrew-File-System"><a href="#2-2-AFS-Andrew-File-System" class="headerlink" title="2.2. AFS (Andrew File System)"></a>2.2. AFS (Andrew File System)</h2><ul><li>设计目标：Scalability<ul><li>一个服务器支持尽可能多的客户端</li><li>解决NFS polling状态的问题</li></ul></li></ul><h3 id="2-2-1-解决polling状态的问题"><a href="#2-2-1-解决polling状态的问题" class="headerlink" title="2.2.1. 解决polling状态的问题"></a>2.2.1. 解决polling状态的问题</h3><ul><li>Invalidation<ul><li>Client 获得一个文件时，在server上登记</li><li>当server发现文件修改时，向已登记的client发一个callback</li><li>Client收到callback，则删除缓存的文件</li></ul></li></ul><h2 id="2-3-对比"><a href="#2-3-对比" class="headerlink" title="2.3. 对比"></a>2.3. 对比</h2><p>其它不同点：AFS vs. NFSv2</p><ul><li>AFS缓存整个文件<ul><li>而NFS是以数据页为单位的</li><li>AFS open: 将把整个文件从Server读到Client</li><li>多次操作：就像本地文件一样</li><li>单次对一个大文件进行随机读/写：比较慢</li></ul></li><li>AFS缓存在本地硬盘中<ul><li>而NFS的缓存是在内存中的</li><li>所以AFS可以缓存大文件</li></ul></li><li>AFS<ul><li>有统一的名字空间，而NFS可以mount到任何地方</li><li>有详细权限管理等</li></ul></li></ul><h1 id="3-Google-File-System-和-HDFS"><a href="#3-Google-File-System-和-HDFS" class="headerlink" title="3. Google File System 和 HDFS"></a>3. Google File System 和 HDFS</h1><h2 id="3-1-GFS-HDFS"><a href="#3-1-GFS-HDFS" class="headerlink" title="3.1. GFS/HDFS"></a>3.1. GFS/HDFS</h2><ul><li>Google File System<ul><li>SOSP 2003，C/C++实现</li><li>Google MapReduce系统的基础</li></ul></li><li>Hadoop Distributed File System<ul><li>Google File System的开源实现</li><li>基于Java</li><li>应用层的文件系统</li><li>与Hadoop捆绑在一起<br><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/GFS-HDFS.png" alt="GFS/HDFS"></li></ul></li></ul><h2 id="3-2-POSIX-v-s-HDFS"><a href="#3-2-POSIX-v-s-HDFS" class="headerlink" title="3.2. POSIX v.s. HDFS"></a>3.2. POSIX v.s. HDFS</h2><p><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/POSIX-vs-HDFS.png" alt="POSIX"></p><h2 id="3-3-设计目标"><a href="#3-3-设计目标" class="headerlink" title="3.3. 设计目标"></a>3.3. 设计目标</h2><ul><li>优化<ul><li>大块数据的顺序读</li><li>并行追加(append)</li></ul></li><li>不支持<ul><li>文件修改(overwrite)操作</li><li>所以，consistency的实现可以大大简化！</li></ul></li></ul><h2 id="3-4-系统架构"><a href="#3-4-系统架构" class="headerlink" title="3.4. 系统架构"></a>3.4. 系统架构</h2><p><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/HDFS-structure.png" alt="structure"></p><ul><li>Name Node：存储文件的metadata(元数据)<ul><li>文件名，长度，分成多少数据块，每个数据块分布在哪些Data Node上</li></ul></li><li>Data Node: 存储数据块<ul><li>文件切分成定长的数据块（默认为64MB大小的数据块）</li><li>每个数据块独立地分布存储在Data Node上</li><li>默认每个数据块存储3份，在3个不同的data node上<ul><li>Rack-aware</li></ul></li></ul></li></ul><h3 id="3-4-1-文件操作：-open"><a href="#3-4-1-文件操作：-open" class="headerlink" title="3.4.1. 文件操作： open"></a>3.4.1. 文件操作： open</h3><ul><li>打开文件时，与Name Node通信一次</li><li>之后的读操作，直接与Data Node通信，绕过了Name Node</li><li>可以从多个副本中选择最佳的Data Node读取数据</li><li>可以支持很多并发的读请求</li></ul><h3 id="3-4-2-文件操作：-write"><a href="#3-4-2-文件操作：-write" class="headerlink" title="3.4.2. 文件操作： write"></a>3.4.2. 文件操作： write</h3><p><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/HDFS-write.png" alt="write"></p><ul><li>Name Node决定应该写到哪些Data Nodes<ul><li>Rack-aware, load balancing</li><li>3个副本：本机、本机柜、其它机柜</li></ul></li></ul><p><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/HDFS-write2.png" alt="write2"></p><ul><li>形成一个数据传递的pipeline<ul><li>数据依次沿流水线传递到Primary和secondary data node</li><li>最大限度地利用网络带宽</li></ul></li><li>Data node 在内存中缓存数据</li><li>注意：数据到此时还没有写进HDFS</li></ul><p><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/HDFS-write3.png" alt="write3"></p><ul><li>收到写命令时才进行真正地写操作</li><li>把缓存的数据写到文件系统中</li></ul><p>不允许并发写操作，因为可能造成块覆盖的问题，如下图：<br><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/HDFS-wirte4.png" alt="write4"></p><p>支持并发apend操作，如下图：<br><img src="//bruceeezhao.github.io/2020/03/11/大数据存储系统/HDFS-append.png" alt="append"></p><h2 id="3-5-小结"><a href="#3-5-小结" class="headerlink" title="3.5. 小结"></a>3.5. 小结</h2><ul><li>分布式文件系统</li><li>很好的顺序读性能<ul><li>为大块数据的顺序读优化</li></ul></li><li>不支持并行的写操作：不需要distributed transaction</li><li>支持并行的append</li></ul><h1 id="4-Key-Value-Store"><a href="#4-Key-Value-Store" class="headerlink" title="4. Key-Value Store"></a>4. Key-Value Store</h1><ul><li>Dynamo</li><li>Bigtable/ Hbase</li><li>Cassandra</li><li>RocksDB</li></ul><h1 id="5-Distributed-Coordination-ZooKeeper"><a href="#5-Distributed-Coordination-ZooKeeper" class="headerlink" title="5. Distributed Coordination: ZooKeeper"></a>5. Distributed Coordination: ZooKeeper</h1><h1 id="6-Document-Store"><a href="#6-Document-Store" class="headerlink" title="6. Document Store"></a>6. Document Store</h1><ul><li>树状结构数据模型<ul><li>JSON</li><li>Google Protocol Buffers</li></ul></li><li>MongoDB<ul><li>API and Query Model</li><li>Architecture<h1 id="7-图存储系统（Graph-Database）"><a href="#7-图存储系统（Graph-Database）" class="headerlink" title="7. 图存储系统（Graph Database）"></a>7. 图存储系统（Graph Database）</h1></li></ul></li><li>图数据模型</li><li>Neo4j</li><li>JanusGraph</li><li>RDF和Sparql</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-分布式系统基本概念&quot;&gt;&lt;a href=&quot;#1-分布式系统基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. 分布式系统基本概念&quot;&gt;&lt;/a&gt;1. 分布式系统基本概念&lt;/h1&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://bruceeezhao.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>智能计算系统</title>
    <link href="https://bruceeezhao.github.io/2020/03/06/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/"/>
    <id>https://bruceeezhao.github.io/2020/03/06/智能计算系统/</id>
    <published>2020-03-06T11:21:19.000Z</published>
    <updated>2020-03-29T12:53:55.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-三个流派"><a href="#1-1-三个流派" class="headerlink" title="1.1. 三个流派"></a>1.1. 三个流派</h2><a id="more"></a><ul><li>行为主义： 基于控制论，构建感知-动作控制系统</li><li>符号注意： 基于符号逻辑的方法，用逻辑表示知识和求解问题</li><li>连接主义： 基于大脑中神经元细胞连接的计算模型，用人工神经网络来拟合智能行为</li></ul><h2 id="1-2-智能计算系统"><a href="#1-2-智能计算系统" class="headerlink" title="1.2. 智能计算系统"></a>1.2. 智能计算系统</h2><p>是智能的物质载体，现阶段通常是集成CPU和智能芯片的异构系统，软件上通常包括一套面向开发者的智能计算编程环境（包括编程框架和编程语言）。</p><ul><li>异构只能计算系统的主要原因：<br>通用CPU的计算能力增长近乎停滞，而智能计算能力的需求不断增长。</li><li>异构系统在提高性能的同时，也带来了编程上的困难<ul><li>一般包括一套编程框架</li></ul></li></ul><h2 id="1-3-三代智能计算系统"><a href="#1-3-三代智能计算系统" class="headerlink" title="1.3. 三代智能计算系统"></a>1.3. 三代智能计算系统</h2><ul><li>第一代： 1980年代，面向服好主意智能处理的专用计算机（Prolog机，LISP机）</li><li>第二代： 2010年代，面向连接注意智能处理的专用计算机（深度学习计算机）</li><li>第三代： 未来强人工智能/通用人工智能的载体</li></ul><h1 id="2-神经网络基础"><a href="#2-神经网络基础" class="headerlink" title="2. 神经网络基础"></a>2. 神经网络基础</h1><h2 id="2-1-从机器学习到神经网络"><a href="#2-1-从机器学习到神经网络" class="headerlink" title="2.1. 从机器学习到神经网络"></a>2.1. 从机器学习到神经网络</h2><p>各种技术的关系：<br><img src="//bruceeezhao.github.io/2020/03/06/智能计算系统/realations-tec.png" alt="realation"></p><p>典型机器学习过程：<br><img src="//bruceeezhao.github.io/2020/03/06/智能计算系统/classic-process.png" alt="process"></p><p>符号说明：<br><img src="//bruceeezhao.github.io/2020/03/06/智能计算系统/fuhao.png" alt="fuhao"></p><h3 id="2-1-1-线性回归"><a href="#2-1-1-线性回归" class="headerlink" title="2.1.1. 线性回归"></a>2.1.1. 线性回归</h3><ol><li><p>什么是回归（regression)<br>回归是研究一组因变量和自变量的关系。为什么叫回归？因为最初研究父母身高与子女身高的关系，发现身高会向平均身高回归。可以理解为会向平均值靠近。</p></li><li><p>线性回归<br>可以找到一些点的集合背后的规律：一个点集可以用一条直线来拟合，这条拟合出来的直线的参数特征，就是线性回归找到的点集背后的规律。<br>或者说：给定一个点的集合，能够通过一条曲线进行拟合，如果拟合出的线是一条直线，那就称为线性回归。</p></li></ol><h2 id="2-2-人工神经网络"><a href="#2-2-人工神经网络" class="headerlink" title="2.2. 人工神经网络"></a>2.2. 人工神经网络</h2><p><img src="//bruceeezhao.github.io/2020/03/06/智能计算系统/nerual-history.png" alt="his"></p><h3 id="2-2-1-感知机（Perceptron）模型"><a href="#2-2-1-感知机（Perceptron）模型" class="headerlink" title="2.2.1. 感知机（Perceptron）模型"></a>2.2.1. 感知机（Perceptron）模型</h3><p>超平面： 在二维空间中是一条直线，在三维空间中是一个二维平面。。。<br><img src="//bruceeezhao.github.io/2020/03/06/智能计算系统/perceptron.png" alt="per"></p><h3 id="2-2-2-多层感知机"><a href="#2-2-2-多层感知机" class="headerlink" title="2.2.2. 多层感知机"></a>2.2.2. 多层感知机</h3><p><img src="//bruceeezhao.github.io/2020/03/06/智能计算系统/mutil-perceptron.png" alt="mutil"></p><p>Why Not Go Deeper? Kurt Hornik证明了理论上两层神经网络足以拟合任意函数，过去也没有足够的数据和计算能力。</p><h2 id="2-3-多层神经网络"><a href="#2-3-多层神经网络" class="headerlink" title="2.3. 多层神经网络"></a>2.3. 多层神经网络</h2><p><img src="//bruceeezhao.github.io/2020/03/06/智能计算系统/deep-learing.png" alt="deeplearing"></p><h3 id="2-3-1-深度神经网络的成功：ABC"><a href="#2-3-1-深度神经网络的成功：ABC" class="headerlink" title="2.3.1. 深度神经网络的成功：ABC"></a>2.3.1. 深度神经网络的成功：ABC</h3><p>深度神经网络不断发展不仅依赖于自身的结构优势，也依赖于如下一些外在因素</p><ul><li>Algorithm：算法日新月异，优化算法层出不穷（学习算法-&gt;BP 算法-&gt; Pre-training，Dropout等方法）</li><li>Big data：数据量不断增大（10-&gt; 10 k -&gt;100M）</li><li>Computing：处理器计算能力的不算提升（晶体管-&gt;CPU -&gt;集群/GPU -&gt;智能处理器）</li></ul><h1 id="3-深度学习"><a href="#3-深度学习" class="headerlink" title="3. 深度学习"></a>3. 深度学习</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-三个流派&quot;&gt;&lt;a href=&quot;#1-1-三个流派&quot; class=&quot;headerlink&quot; title=&quot;1.1. 三个流派&quot;&gt;&lt;/a&gt;1.1. 三个流派&lt;/h2&gt;
    
    </summary>
    
      <category term="智能计算系统" scheme="https://bruceeezhao.github.io/categories/%E6%99%BA%E8%83%BD%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>创业基础-2.如何创业</title>
    <link href="https://bruceeezhao.github.io/2020/02/25/%E5%88%9B%E4%B8%9A%E5%9F%BA%E7%A1%80-2-%E5%A6%82%E4%BD%95%E5%88%9B%E4%B8%9A/"/>
    <id>https://bruceeezhao.github.io/2020/02/25/创业基础-2-如何创业/</id>
    <published>2020-02-25T08:03:50.000Z</published>
    <updated>2020-02-25T11:30:52.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="成为创业者"><a href="#成为创业者" class="headerlink" title="成为创业者"></a>成为创业者</h1><p>##　创业能力</p><a id="more"></a><ol><li>创业思维</li><li>应变能力</li><li>拓展资源的能力</li><li>合作能力</li><li>自我反省的能力</li><li>冒险精神</li><li>社会责任</li></ol><h2 id="创业者素质"><a href="#创业者素质" class="headerlink" title="创业者素质"></a>创业者素质</h2><ol><li>领袖精神</li><li>自信</li><li>勇气</li><li>创新精神</li><li>魄力</li><li>敏锐眼光</li><li>毅力和意志</li><li>自我调节能力</li></ol><h1 id="认识创业机会"><a href="#认识创业机会" class="headerlink" title="认识创业机会"></a>认识创业机会</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>创业机会是具有商业价值的创意</strong>  </p><h2 id="创业机会的特征："><a href="#创业机会的特征：" class="headerlink" title="创业机会的特征："></a><strong>创业机会的特征：</strong></h2><ol><li>能吸引顾客，挖掘顾客的真实需求</li><li>在商业环境中行得通，有竞争力</li><li>在机会之床存在的期间被实施。（机会之窗指在商业想法推广到市场上去所话的时间，若竞争者已经有了同样的思想，并吧产品已推向市场，那么机会之窗也就关闭了。）</li><li>创业者必须有资源和技能才能创立业务，这里的资源包括：人、财、物、信息和时间等。</li></ol><h2 id="创业机会的类型"><a href="#创业机会的类型" class="headerlink" title="创业机会的类型"></a>创业机会的类型</h2><ul><li>问题型</li><li>趋势型</li><li>组合型</li></ul><h2 id="机会识别方法"><a href="#机会识别方法" class="headerlink" title="机会识别方法"></a>机会识别方法</h2><ul><li>问题分心</li><li>创造需求</li></ul><h2 id="创业机会评价"><a href="#创业机会评价" class="headerlink" title="创业机会评价"></a>创业机会评价</h2><p>基本标准：</p><ol><li>机会对产品有明确界定的市场需求，退出的实际也是恰当的</li><li>投资的项目必须能够维持持久的竞争优势</li><li>投资必须具有一定成都的高汇报，从而允许一些投资中的失误</li><li>创业者和创业机会时间必须相互适应</li><li>创业机会中不存在致命的缺陷</li></ol><h1 id="组建创业团队"><a href="#组建创业团队" class="headerlink" title="组建创业团队"></a>组建创业团队</h1><h2 id="团队组建"><a href="#团队组建" class="headerlink" title="团队组建"></a>团队组建</h2><ol><li>自我评估</li></ol><ul><li>知识基础</li><li>专门技能</li><li>动机</li><li>承诺</li><li>个人特质</li></ul><ol start="2"><li>成员评估</li></ol><ul><li>互补性</li><li>相似性</li></ul><p>在知识、技能和经验方面主要关注互补性，而在个人特征和动机方面则考虑相似性。</p><ol><li>知识评估</li><li>经历评估</li><li>经验评估</li><li>关系评估</li><li>能力评估</li></ol><h2 id="行动原则"><a href="#行动原则" class="headerlink" title="行动原则"></a>行动原则</h2><ol><li>创业机会</li><li>凝聚力</li><li>合作精神</li><li>完整性（利弊权衡）</li><li>长远目标</li><li>价值创造</li><li>公正性</li></ol><h2 id="创业团队的领导"><a href="#创业团队的领导" class="headerlink" title="创业团队的领导"></a>创业团队的领导</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;成为创业者&quot;&gt;&lt;a href=&quot;#成为创业者&quot; class=&quot;headerlink&quot; title=&quot;成为创业者&quot;&gt;&lt;/a&gt;成为创业者&lt;/h1&gt;&lt;p&gt;##　创业能力&lt;/p&gt;
    
    </summary>
    
      <category term="创业基础" scheme="https://bruceeezhao.github.io/categories/%E5%88%9B%E4%B8%9A%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据系统</title>
    <link href="https://bruceeezhao.github.io/2020/02/19/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/"/>
    <id>https://bruceeezhao.github.io/2020/02/19/大数据系统/</id>
    <published>2020-02-19T13:13:57.000Z</published>
    <updated>2020-03-11T11:27:28.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h1><h2 id="1-1-大数据概念"><a href="#1-1-大数据概念" class="headerlink" title="1.1. 大数据概念"></a>1.1. 大数据概念</h2><a id="more"></a><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/concept.png" alt="概念"></p><h2 id="1-2-大数据管理系统"><a href="#1-2-大数据管理系统" class="headerlink" title="1.2. 大数据管理系统"></a>1.2. 大数据管理系统</h2><ul><li>关系型<br>Oracle, DB2, MS SQL Server, Greenplum, TeraData, Vertica</li><li>云平台<br>MapReduce, Apache Hadoop, MS Dryad</li><li>云平台+SQL<br>Apache Hive, Yahoo Pig, MS Scope</li><li>No-SQL<br>Apache Hbase, Cassandra, MangoDB, Neo4j</li><li>内存数据处理系统<br>MMDB, Spark, Cloudera impala</li><li>图数据处理<br>Google Pregel, Apache Giraph, Graphlab</li></ul><h1 id="2-关系型数据管理系统"><a href="#2-关系型数据管理系统" class="headerlink" title="2. 关系型数据管理系统"></a>2. 关系型数据管理系统</h1><h2 id="2-1-关系型数据模型"><a href="#2-1-关系型数据模型" class="headerlink" title="2.1. 关系型数据模型"></a>2.1. 关系型数据模型</h2><p>Table/Relation</p><ul><li>列(Column)</li><li>行(Row)</li></ul><p>通常是一个瘦长的表</p><h3 id="2-1-1-概念"><a href="#2-1-1-概念" class="headerlink" title="2.1.1. 概念"></a>2.1.1. 概念</h3><h4 id="2-1-1-1-Schema-vs-Instance"><a href="#2-1-1-1-Schema-vs-Instance" class="headerlink" title="2.1.1.1. Schema vs. Instance"></a>2.1.1.1. Schema vs. Instance</h4><ul><li><p>Schema: 类型<br>一个表的类型是由每个列的类型决定的</p></li><li><p>Instance： 具体取值<br>具体存储哪些记录，每个列的具体指<br>由具体用用决定</p></li></ul><h4 id="2-1-1-2-Key"><a href="#2-1-1-2-Key" class="headerlink" title="2.1.1.2. Key"></a>2.1.1.2. Key</h4><ul><li>Primary key</li><li>Foreign key<br>是另一个表的主键</li></ul><h2 id="2-2-主要关系运算"><a href="#2-2-主要关系运算" class="headerlink" title="2.2. 主要关系运算"></a>2.2. 主要关系运算</h2><ul><li>Selection（选择）<br>从一个表中提取一些行</li><li>Projection(投影)<br>从一个表中提取一些列</li><li>Join（连接）<ul><li>Equi-join(等值连接)</li></ul></li></ul><h3 id="2-2-1-SQL-Selcet"><a href="#2-2-1-SQL-Selcet" class="headerlink" title="2.2.1. SQL Selcet"></a>2.2.1. SQL Selcet</h3><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/select.png" alt="select"></p><h2 id="2-3-数据库系统架构"><a href="#2-3-数据库系统架构" class="headerlink" title="2.3. 数据库系统架构"></a>2.3. 数据库系统架构</h2><p>通常的系统为典型的C/S结构：<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/RDBMS-CS.png" alt="CS"><br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/RDBMS-S.png" alt="S"></p><ol><li>SQL Parser</li></ol><ul><li>SQL语句的程序 -&gt; 解析好的内部表达（例如：Parsing tree）<ul><li>语法解析，语法检查，表名、列名、类型检查</li></ul></li></ul><ol start="2"><li>Query Optimizer</li></ol><ul><li>SQL 内部表达 -&gt; Query Plan（执行方案）<ul><li>产生可行的query plan</li><li>估计query plan的运行时间和空间代价</li><li>在多个可行的query plans中选择最佳的query plan</li></ul></li></ul><ol start="3"><li>Data storage and indexing</li></ol><ul><li>如何在硬盘上存储数据</li><li>如何高效地访问硬盘上的数据</li></ul><ol start="4"><li><p>Buffer Pool：在内存中缓存硬盘的数据</p></li><li><p>Execution Engine</p></li></ol><ul><li>query plan -&gt; SQL语句的借故偶<ul><li>根据query plan，完成相应的运算和操作</li><li>数据访问</li><li>关系型运算的实现</li></ul></li></ul><ol start="6"><li>Transaction management</li></ol><ul><li>目标是实现ACID</li><li>进行logging写日志，locking加锁</li><li>保证并行transactions事务的正确性</li></ul><h2 id="2-4-数据存储与访问"><a href="#2-4-数据存储与访问" class="headerlink" title="2.4. 数据存储与访问"></a>2.4. 数据存储与访问</h2><h3 id="2-4-1-数据表（table）"><a href="#2-4-1-数据表（table）" class="headerlink" title="2.4.1. 数据表（table）"></a>2.4.1. 数据表（table）</h3><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/filevsdatabase.png" alt="filevsdb"></p><p>数据在硬盘上的存储：</p><ul><li>硬盘最小存储访问单位为一个山区： 512B</li><li>文件系统访问硬盘的单位通常为： 4KB</li><li>RDBMS最小的存储单位是database page size<ul><li>Data page size可以设置为1～多个文件系统的page</li><li>例如， 4KB、8KB …</li></ul></li></ul><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/page.png" alt="page"></p><p>page内部结构：<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/page-inner.png" alt="page-iner"></p><ul><li>page header:存储page的一些信息，例如page ID</li><li>slot：是一个定长整数数组，从后向前增长</li><li>记录：header和slot之间的空间，从前向后增长</li></ul><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/tuple.png" alt="tuple"><br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/tuple-ex.png" alt="tuple-ex"></p><p>数据的顺序访问：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Name</span>, GPA</span><br><span class="line"><span class="keyword">from</span> Student</span><br><span class="line"><span class="keyword">where</span> Major = <span class="string">'计算机'</span></span><br></pre></td></tr></table></figure><ul><li>顺序读取、student表的每个page</li><li>对于每个page，顺序访问每个tuple</li><li>检查条件是否成立</li><li>对于成立的读取Name和GPA</li></ul><p><strong>有什么性能问题吗？假如有100个系呢?</strong>  </p><h3 id="2-4-2-索引（index）"><a href="#2-4-2-索引（index）" class="headerlink" title="2.4.2. 索引（index）"></a>2.4.2. 索引（index）</h3><p>Selective Data Access(有选择性的访问)</p><ul><li>使用Index<ul><li>Tree based index:有序，支持点查询和范围查询</li><li>Hash based index：无序，只支持点查询</li></ul></li><li>Clustered index(主索引)与Secondary index(二级索引)<ul><li>Clustered: 记录就存在index中，记录顺序就是index顺序</li><li>Secondary: 记录顺序不是index顺序，index中存储page ID和in-page tuple slot ID.</li></ul></li></ul><ol><li>Chained Hash Table:<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/chainhashtabe.png" alt="chainhasht"></li></ol><p><strong>在硬盘上怎么存？</strong><br>bucket = page<br>当chain上平均bucket数太多是，需要增大size，重新hashing。<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/chainhash-ex.png" alt="chainhash-ex"></p><ol start="2"><li>B+ Tree<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/B+tree.png" alt="B+tree"></li></ol><ul><li>所有的叶子结点都位于同一层</li><li>每个叶子节点是一个page</li><li>所有key存储在叶子节点</li><li>内部节点完全是索引作用</li></ul><p>叶子节点结构：<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/B+leaf.png" alt="leaf"></p><ul><li>Keys按照从小到达顺序排列： key1 &lt; key2 &lt; … &lt; keyn</li><li>叶子节点从左向有也是从小到达顺序排列，以sibling pointer链起来(ptr = record ID; sibling = page ID)</li></ul><p>Search代价：</p><ul><li>共有N个key</li><li>每个节点的child/pointer个数为B</li><li>总I/O次数=树高  $O(log_B N)$</li><li>总比较次数<ul><li>每个节点内部二分查找： $O(log_2 B)$</li><li>$O(log_B N)*O(log_2 B) = O(log_2 N)$</li></ul></li></ul><p>删除操作：</p><ul><li>Search 人后在节点中删除</li><li>node merge？<ul><li>原设计：当节点中key个数小于一把</li><li>实际实现：数据总趋势是增长的，可以只有节点为空是才node merge或者完全不进行node merge</li></ul></li></ul><p>Range Scan：</p><ul><li>找到其实叶节点，包括范围起始值</li><li>沿着叶的链接读下一个叶节点</li><li>直到遇到范围终止值</li></ul><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/rangescan.png" alt="rangescan"></p><ol start="3"><li>二级索引<br>假设已经建立了以Major为key的二级索引<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Name</span>, GPA</span><br><span class="line"><span class="keyword">from</span> Student</span><br><span class="line"><span class="keyword">where</span> Major = <span class="string">'计算机'</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>在二级索引中搜索 Major = ‘计算机’</li><li>对于每个匹配项，访问相应的tuple</li><li>读取Name和GPA</li></ul><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/secondaryvssequ.png" alt="secondary"></p><h3 id="2-4-3-缓冲池（buffer-pool）"><a href="#2-4-3-缓冲池（buffer-pool）" class="headerlink" title="2.4.3. 缓冲池（buffer pool）"></a>2.4.3. 缓冲池（buffer pool）</h3><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/bufferpool.png" alt="buffer"></p><p>数据访问的局部性：</p><ul><li><p>Temporal locality(时间局部性)</p><ul><li>同一个数据元素可能会在一段时间内多次被访问</li><li>buffer pool</li></ul></li><li><p>Spatial locality(空间局部性)</p><ul><li>位置相近的数据元素可能会被一起访问</li><li>Page 为单位读写</li></ul></li></ul><p>访问page的过程：</p><ul><li><p>检查Page a是否在buffer pool中</p></li><li><p>是：buffer pool hit</p><ul><li>直接访问buffer pool中的page a</li></ul></li><li><p>否： buffer pool miss</p><ul><li>在buffer pool中找到一个可用的frame</li><li>从硬盘读page a，放入这个frame</li></ul></li></ul><h4 id="2-4-3-1-缓存替换算法"><a href="#2-4-3-1-缓存替换算法" class="headerlink" title="2.4.3.1 缓存替换算法"></a>2.4.3.1 缓存替换算法</h4><ul><li>LRU（Least Recently Used）</li><li>Random</li><li>FIFO</li><li>Clock</li></ul><p>数据库中使用Clock算法：</p><p><a href="https://www.cnblogs.com/wingsless/p/12295246.html" target="_blank" rel="noopener">引用自</a><br>时钟置换算法可以认为是一种最近未使用算法，即逐出的页面都是最近没有使用的那个。我们给每一个页面设置一个标记位u，u=1表示最近有使用u=0则表示该页面最近没有被使用，应该被逐出。<br>按照1-2-3-4的顺序访问页面，则缓冲池会以这样的一种顺序被填满：<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/clock1.png" alt="clock1"><br>此时如果要按照1-5的顺序访问，那么在访问1的时候是可以直接命中缓存返回的，但是访问5的时候，因为缓冲池已经满了，所以要进行一次逐出操作，其操作示意图如下：<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/clock2.png" alt="clock2"><br>每次遍历到一个节点发现u=1的，将该标记位置为0，然后遍历下一个页面，一轮遍历完后，发现没有可以被逐出的页面，则进行下一轮遍历，这次遍历之后发现原先1号页面的标记位u=0，则将该页面逐出，置换为页面5，并将指针指向下一个页面。<br>但是考虑一个问题，数据库里逐出的页面是要写回磁盘的，这是一个很昂贵的操作，因此我们应该优先考虑逐出那些没有被修改的页面，这样可以降低IO。  </p><p>因此在时钟置换算法的基础上可以做一个改进，就是增加一个标记为m，修改过标记为1，没有修改过则标记为0。那么u和m组成了一个元组，有四种可能，其被逐出的优先顺序也不一样：  </p><ul><li>(u=0, m=0) 没有使用也没有修改，被逐出的优先级最高；</li><li>(u=1, m=0) 使用过，但是没有修改过，优先级第二；</li><li>(u=0, m=1) 没有使用过，但是修改过，优先级第三；</li><li>(u=1, m=1) 使用过也修改过，优先级第四。</li></ul><p><a href="https://www.cnblogs.com/claudia529/p/12088532.html" target="_blank" rel="noopener">引用自</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">U为访问位，M为修改位。</span><br><span class="line">1.当U=0,M=0。表示既没被访问，也没被修改。 是最佳淘汰页。</span><br><span class="line">2.当U=0,M=1。表示没访问但是修改了。 不是很好的淘汰页。</span><br><span class="line">3.当U=1,M=0。表示已访问，没有修改。有可能再被访问。</span><br><span class="line">4.当U=1,M=1。访问且修改。有可能再被访问。</span><br><span class="line">一、先找U=0,M=0的。并将遇到的第一个页面作为选中的淘汰页。第一次扫描期间不改变访问位A。</span><br><span class="line">二、第一步失败则U=0,M=1作为淘汰页面。第二轮扫描期间把所有扫描过的页面访问位置0。</span><br><span class="line">三、指针回到最初的位置,然后重复第一步（找A=0，M=0）失败的话重复第二步（A=0，M=1）</span><br><span class="line">减少磁盘的I/O操作次数。但是可能经过几轮扫描，即可以拆解为算法本身的开销有所增加。</span><br></pre></td></tr></table></figure><h2 id="2-5-运算的实现"><a href="#2-5-运算的实现" class="headerlink" title="2.5. 运算的实现"></a>2.5. 运算的实现</h2><h3 id="2-5-1-Operator-tree"><a href="#2-5-1-Operator-tree" class="headerlink" title="2.5.1. Operator tree"></a>2.5.1. Operator tree</h3><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/operatortree.png" alt="operator tree"></p><ul><li><p>Query plan 最终将表现为一棵Operator Tree</p><ul><li>每个节点代表一个运算</li><li>运算的输入来自孩子节点</li><li>运算的输出送往父亲节点</li></ul></li><li><p>实现方法</p><ul><li>Operator at a time<ul><li>完全处理一个运算在处理下一个运行，会产生大量中间结果</li></ul></li><li>Pull(Tuple at a time)<ul><li>每个Operator实现Open, Close, GetNext方法</li><li>父节点调用子节点的GetNext() 取得下一个子节点的输出</li></ul></li><li>Push： 多线程<ul><li>子节点吧输出放入中间结果缓冲，然后通知父节点去读</li></ul></li></ul></li></ul><h3 id="2-5-2-Selection-amp-Projection"><a href="#2-5-2-Selection-amp-Projection" class="headerlink" title="2.5.2. Selection &amp; Projection"></a>2.5.2. Selection &amp; Projection</h3><ul><li><p>Selection： 行的过滤</p><ul><li>支持多种数据类型：数值类型，字符串类型等</li><li>实现比较操作、数学运算、逻辑运算</li></ul></li><li><p>Projection： 列的提取</p><ul><li>Query plan生成时，同时产生中间结果记录的schema</li><li>主要功能： 从一个记录中提取属性，生成一个结果记录</li></ul></li></ul><h3 id="2-5-3-Join"><a href="#2-5-3-Join" class="headerlink" title="2.5.3. Join"></a>2.5.3. Join</h3><p>实现思路：</p><ul><li>Nested loop</li><li>Hashing</li><li>Sorting</li></ul><ol><li><p>Nested loop<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/nested-loop-join-e1.png" alt="nest"><br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/nested-loop-join-io.png" alt="nest-io"><br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/nested-loop-join-e1.png" alt="nest-e1"><br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/nested-loop-join-e2.png" alt="nest-e2"></p></li><li><p>Hashing<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/hash-join.png" alt="hash"><br>如果遇到R比内存大应该怎么办？<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/hash-loop-q1.png" alt="hash-q1"></p></li></ol><ul><li>GRACE Hash join<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/grace-hash-join.png" alt="grace"><br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/grace-hash-join-x.png" alt="grace-io"></li></ul><ol start="3"><li>sort merge join</li></ol><ul><li>思路：<ul><li>如果把R按照R.a的顺序排序</li><li>如果把S按照S.b的顺序排序</li><li>那么可以Merge（归并）找出所有的匹配</li></ul></li></ul><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/sort-merge-io.png" alt="sort-io"></p><ul><li>比较：<ul><li>通常代价比Hash Join稍差</li><li>当一个表已经有序的情况下，会被使用</li></ul></li></ul><h2 id="2-6-Query-Optimization（查询优化）"><a href="#2-6-Query-Optimization（查询优化）" class="headerlink" title="2.6. Query Optimization（查询优化）"></a>2.6. Query Optimization（查询优化）</h2><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/query-optimization.png" alt="query"></p><h2 id="2-7-事务处理-Transaction-Processing"><a href="#2-7-事务处理-Transaction-Processing" class="headerlink" title="2.7. 事务处理(Transaction Processing)"></a>2.7. 事务处理(Transaction Processing)</h2><p>大量并发用户，少量随机读写操作</p><ul><li>一个事务可能包含多个操作<ul><li>select</li><li>insert/delete/update</li><li>等</li></ul></li><li>事务中的所有操作满足ACID性质</li></ul><p>事务的表现形式：</p><ol><li>没有特殊设置<br>那么每个SQL语句被认为是一个事务</li><li>使用特殊的语句</li></ol><ul><li>开始transaction</li><li>成功结束transaction</li><li>异常结束transaction</li></ul><h3 id="2-7-1-ACID"><a href="#2-7-1-ACID" class="headerlink" title="2.7.1. ACID"></a>2.7.1. ACID</h3><ul><li>Atomicity（原子性）<ul><li>all or nothing</li><li>要么完全执行，要么完全没有执行</li></ul></li><li>Consistency（一致性）<ul><li>从一个正确状态转换到另一个正确状态（正确指：constraints, triggers等）</li></ul></li><li>Isolation（隔离性）<ul><li>每个事务与其它并发事务互不影响</li></ul></li><li>Durability（持久性）<ul><li>Transaction commit后，结果持久有效，crash也不消失</li></ul></li></ul><h3 id="2-7-2-Concurrency-Control-并发控制后"><a href="#2-7-2-Concurrency-Control-并发控制后" class="headerlink" title="2.7.2. Concurrency Control(并发控制后)"></a>2.7.2. Concurrency Control(并发控制后)</h3><h4 id="2-7-2-1-数据冲突引起的问题："><a href="#2-7-2-1-数据冲突引起的问题：" class="headerlink" title="2.7.2.1. 数据冲突引起的问题："></a>2.7.2.1. 数据冲突引起的问题：</h4><ul><li>Read uncommitted data (读脏数据) (写读)<ul><li>在T2 commit之前，T1读了T2已经修改了的数据</li></ul></li><li>Unrepeatable reads(不可重复读) (读写)<ul><li>在T2 commit之前，T1写了T2已经读的数据</li><li>如果T2再次读同一个数据，那么将发现不同的值</li></ul></li><li>Overwrite uncommitted data (更新丢失) (写写)<ul><li>在T2 commit之前，T1重写了T2已经修改了的数据</li></ul></li></ul><p><strong>两大类解决方案：</strong>  </p><ul><li><p>Pessimistic (悲观)</p><ul><li>假设：数据竞争可能经常出现</li><li>防止：采用某种机制保证数据竞争不会出现 – 如果一个Transaction T1可能和正在运行的其它Transaction有冲突，那么就让这个T1等待，一直等到有冲突的其它所有Transaction都完成为止，才开始执行。</li></ul></li><li><p>Optimistic (乐观)</p><ul><li>假设：数据竞争很少见</li><li>检查：先执行，在提交前检查是否没有数据竞争 <ul><li>允许所有Transaction都直接执行 </li><li>但是Transaction不直接修改数据，而是把修改保留起来 </li><li>当Transaction结束时，检查这些修改是否有数据竞争<ul><li>没有竞争，成功结束，真正修改数据</li><li>有竞争，丢弃结果，重新计算</li></ul></li></ul></li></ul></li></ul><h4 id="2-7-2-2-悲观解决方案"><a href="#2-7-2-2-悲观解决方案" class="headerlink" title="2.7.2.2. 悲观解决方案"></a>2.7.2.2. 悲观解决方案</h4><p><strong>Pessimistic: 加锁</strong></p><ul><li>使用加锁协议来实现</li><li>对于每个事务中的SQL语句，数据库系统自动检测其中的读、写的数据</li><li>对事务中的读写数据进行加锁</li><li>通常采用两阶段加锁（2 Phase Locking）</li></ul><p><strong>2 Phase Locking</strong></p><ul><li>Pessimistic concurrency control</li><li>对每个访问的数据都要加锁后才能访问</li><li>算法如下<ul><li>在Transaction开始时，对每个需要访问的数据加锁 – 如果不能加锁，就等待，直到加锁成功</li><li>执行Transaction的内容</li><li>在Transaction commit前，集中进行解锁</li><li>Commit</li></ul></li><li>有一个集中的加锁阶段和一个集中的解锁阶段<ul><li>由此得名</li></ul></li></ul><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/lock-achive-1.png" alt="lock-1"></p><p><strong>实现细节2： Lock Granularity</strong>  </p><ul><li>锁的粒度是不同的<ul><li>Table?</li><li>Record?</li><li>Index?</li><li>Leaf node?</li></ul></li><li>Intent locks<ul><li>IS(a)：将对a下面更细粒度的数据元素进行读</li><li>IX(a)：将对a下面更细粒度的数据元素进行写</li></ul></li><li>为了得到S,IS: 所有祖先必须为IS或IX</li><li>为了得到X,IX: 所有祖先必须为IX</li></ul><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/lock-achive-2.png" alt="lock-2"></p><p><strong>实现细节3： deadlock</strong><br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/lock-achive-3.png" alt="lock-3"></p><p><strong>如何解决deadlock问题？</strong>  </p><ul><li><p>死锁避免</p><ul><li>规定lock对象的顺序</li><li>按照顺序请求lock</li><li>适用于lock对象少的情况</li></ul></li><li><p>数据库的lock对象很多，不适合死锁避免</p></li><li><p>死锁检测</p><ul><li>周期地对长期等待的Transactions检查是否有circular wait</li><li>如果有，那么就选择环上其中一Transaction abort</li></ul></li></ul><h4 id="2-7-2-3-乐观的并发控制：不采用加锁"><a href="#2-7-2-3-乐观的并发控制：不采用加锁" class="headerlink" title="2.7.2.3. 乐观的并发控制：不采用加锁"></a>2.7.2.3. 乐观的并发控制：不采用加锁</h4><ul><li>事务执行分为三个阶段<ul><li>读：事务开始执行，读数据到私有工作区，并在私有工作区上完成事务的处理请求，完成修改操作</li><li>验证：如果事务决定提交，检查事务是否与其它事务冲突 – 如果存在冲突，那么终止事务，清空私有工作区 – 重试事务</li><li>写：验证通过，没有发现冲突，那么把私有工作区的修改<br>复制到数据库公共数据中</li></ul></li><li>优点：当冲突很少时，没有加锁的开销</li><li>缺点：当冲突很多时，可能不断地重试，浪费大量资源，甚至无法前进</li></ul><p><strong>另一种并发控制方法:Snapshot Isolation</strong>  </p><ul><li>一种Optimistic concurrency control</li><li>Snapshot: 一个时点的数据库数据状态</li><li>Transaction<ul><li>在起始时点的snapshot</li><li>读：这个snapshot的数据</li><li>写：先临时保存起来，在commit时检查有无冲突，有冲突就abort<ul><li>First writer wins</li></ul></li></ul></li></ul><p><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/snapshot-isolation.png" alt="snapshot"><br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/snapshot-special.png" alt="snapshot-s"></p><h3 id="2-7-3-Crash-Recovery-崩溃恢复"><a href="#2-7-3-Crash-Recovery-崩溃恢复" class="headerlink" title="2.7.3. Crash Recovery(崩溃恢复)"></a>2.7.3. Crash Recovery(崩溃恢复)</h3><h4 id="2-7-3-1-Durability-持久性-如何实现？"><a href="#2-7-3-1-Durability-持久性-如何实现？" class="headerlink" title="2.7.3.1. Durability (持久性) 如何实现？"></a>2.7.3.1. Durability (持久性) 如何实现？</h4><ul><li>Transaction commit后，结果持久有效，crash不消失</li><li>想法一<ul><li>在transaction commit时，把所有的修改都写回硬盘</li><li>只有当写硬盘完成后，才commit</li></ul></li><li>有什么问题？<ul><li>正确性问题：如果写多个page，中间掉电，怎么办？<br>Atomicity被破坏了！</li><li>性能问题：随机写硬盘，等待写完成</li></ul></li></ul><p>解决方案：WAL (Write Ahead Logging)</p><ul><li>什么是Logging</li><li>什么是Write-Ahead<ul><li>Logging 总是先于实际的操作</li><li>Logging 相当于意向，先记录意向，然后再实际操作</li></ul></li><li>怎样保证Durability</li><li>怎么实现Write-Ahead Logging</li><li>Crash Recovery</li></ul><p><strong>Checkpoint:</strong>  </p><ul><li>为什么要用checkpoint?<ul><li>为了使崩溃恢复的时间可控</li><li>如果没有checkpoint，可能需要读整个日志，redo/undo很多工作</li></ul></li><li>定期执行checkpoint</li><li>checkpoint的内容<ul><li>当前活动的事务表：包括事务的最新日志的LSN</li><li>当前脏页表：每个页最早的尚未写回硬盘的LSN</li></ul></li></ul><h4 id="2-7-3-2-崩溃恢复"><a href="#2-7-3-2-崩溃恢复" class="headerlink" title="2.7.3.2. 崩溃恢复"></a>2.7.3.2. 崩溃恢复</h4><ol><li>分析阶段</li></ol><ul><li>找到最后一个检查点<ul><li>检查点的位置记录在硬盘上一个特定文件中</li><li>读这个文件，可以得知最后一个检查点的位置</li></ul></li><li>找到日志崩溃点<ul><li>如果是掉电等故障，必须找到日志的崩溃点</li><li>当日志是循环写时，需要从检查点扫描日志，检查每个日志页的校验码，发现校验码出错的位置，或者LSN变小的位置</li></ul></li><li>确定崩溃时的活跃事务和脏页<ul><li>最后一个检查点时的活跃事务表和脏页表</li><li>正向扫描日志，遇到commit, rollback, begin更新事务表 – 同时记录每个活动事务的最新LSN</li><li>遇到写更新脏页表 – 同时记录每个页的最早尚未写回硬盘的LSN</li></ul></li></ul><ol start="2"><li>Redo阶段</li></ol><ul><li>目标：把系统恢复到崩溃前瞬间的状态</li><li>找到所有脏页的最早的LSN</li><li>从这个LSN向日志尾正向读日志<ul><li>Redo每个日志修改记录</li></ul></li><li>对于一个日志记录<ul><li>如果其涉及的页不在脏页表中，那么跳过</li><li>如果数据页的LSN&gt;=日志的LSN，那么跳过 – 数据页已经包含了这个修改</li><li>其它情况，修改数据页</li></ul></li></ul><ol start="3"><li>Undo阶段</li></ol><ul><li>目标：清除未提交的事务的修改</li><li>对于所有在崩溃时活跃的事务<ul><li>找到这个事务最新的LSN</li><li>通过反向链表，读这个事务的所有日志记录</li></ul></li><li>undo所有未提交事务的修改<ul><li>Undo时，比较数据页的LSN和日志的LSN</li><li>if (数据页LSN&gt;=日志LSN) 时，才进行undo</li></ul></li></ul><h2 id="2-8-数据仓库"><a href="#2-8-数据仓库" class="headerlink" title="2.8. 数据仓库"></a>2.8. 数据仓库</h2><h3 id="2-8-1-OLAP"><a href="#2-8-1-OLAP" class="headerlink" title="2.8.1. OLAP"></a>2.8.1. OLAP</h3><h3 id="2-8-2-行式与列式数据库"><a href="#2-8-2-行式与列式数据库" class="headerlink" title="2.8.2. 行式与列式数据库"></a>2.8.2. 行式与列式数据库</h3><p>列式存储：</p><ul><li>数据仓库的分析查询<ul><li>大部分情况只涉及一个表的少数几列</li><li>会读一大部分记录</li></ul></li><li>在这种情况下，行式存储需要读很多无用的数据</li><li>采用列式存储可以降低读的数据量</li></ul><p>列式存储的压缩</p><ul><li>每个文件存储相同数据类型的值</li><li>数据更容易被压缩</li><li>比行式存储有更高的压缩比</li></ul><p>列式存储的问题</p><ul><li>如果用到了一个表的多个列</li><li>太多列拼装在一起，付出拼装代价很大</li></ul><h2 id="2-9-分布式数据库"><a href="#2-9-分布式数据库" class="headerlink" title="2.9. 分布式数据库"></a>2.9. 分布式数据库</h2><h3 id="2-9-1-系统架构"><a href="#2-9-1-系统架构" class="headerlink" title="2.9.1. 系统架构"></a>2.9.1. 系统架构</h3><p>三种架构</p><ul><li>Shared memory<ul><li>多芯片、多核</li><li>或Distributed shared memory</li></ul></li><li>Shared disk<ul><li>多机连接相同的数据存储设备</li></ul></li><li>Shared nothing<ul><li>普通意义上的机群系统</li><li>由以太网连接多台服务器<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/shared-nothing.png" alt="shared-nothing"></li></ul></li></ul><p>关键技术</p><ul><li><p>Partitioning（划分）</p><ul><li>把数据分布在多台服务器上</li><li>通常采用Horizontal partitioning – 把不同的记录分布在不同的服务器上</li></ul></li><li><p>Replication（备份）</p><ul><li>为了提高可靠性</li><li>对性能的影响 <ul><li>读？可能提高并行性 </li><li>写？额外代价</li></ul></li></ul></li><li><p>Hash partitioning</p><ul><li>类似GRACE: machine ID = hash(key) % MachineNumber</li></ul></li><li><p>Range partitioning</p><ul><li>每台服务器负责一个key的区间，所有区间都不重叠</li></ul></li></ul><h3 id="2-9-2-分布式查询处理"><a href="#2-9-2-分布式查询处理" class="headerlink" title="2.9.2. 分布式查询处理"></a>2.9.2. 分布式查询处理</h3><h3 id="2-9-3-分布式事务处理"><a href="#2-9-3-分布式事务处理" class="headerlink" title="2.9.3. 分布式事务处理"></a>2.9.3. 分布式事务处理</h3><h4 id="2-9-3-1-2-Phase-Commit"><a href="#2-9-3-1-2-Phase-Commit" class="headerlink" title="2.9.3.1. 2 Phase Commit"></a>2.9.3.1. 2 Phase Commit</h4><ul><li>Participant: 完成分布式事务的部分读写操作</li><li>Coordinator: 协调分布式事务的进行</li></ul><ol><li>phase 1 (voting)<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/2-phase-commit-1.png" alt="2-phase-commit-1"></li></ol><ul><li>Coordinator向每个participant发送query to commit消息</li><li>每个participant根据本地情况回答yes 或 no</li></ul><ol start="2"><li>phase 2 (completion)<br><img src="//bruceeezhao.github.io/2020/02/19/大数据系统/2-phase-commit-2.png" alt="2-phase-commit-2"></li></ol><ul><li><p>当所有的回答都是yes, transaction 将commit</p></li><li><p>Coordinator向每个participant发送commit消息</p></li><li><p>Participant 回答acknowledgment</p></li><li><p>当至少一个的回答是no, transaction 将abort</p></li><li><p>Coordinator向每个participant发送abort消息</p></li><li><p>Participant 回答acknowledgment</p></li></ul><h4 id="2-9-3-2-崩溃恢复"><a href="#2-9-3-2-崩溃恢复" class="headerlink" title="2.9.3.2. 崩溃恢复"></a>2.9.3.2. 崩溃恢复</h4><ul><li>恢复时日志中可能有下述情况<ul><li>有commit或abort记录：那么分布式事务处理结果已经收到，进行相应的本地commit或abort</li><li>有prepare，而没有commit/abort：那么分布式事务的处理结果未知，需要和prepare记录中的coordinator进行联系</li><li>没有prepare/commit/abort：那么本地abort</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h1&gt;&lt;h2 id=&quot;1-1-大数据概念&quot;&gt;&lt;a href=&quot;#1-1-大数据概念&quot; class=&quot;headerlink&quot; title=&quot;1.1. 大数据概念&quot;&gt;&lt;/a&gt;1.1. 大数据概念&lt;/h2&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://bruceeezhao.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>创业基础-1.创业本质与创业思维</title>
    <link href="https://bruceeezhao.github.io/2020/02/18/%E5%88%9B%E4%B8%9A%E5%9F%BA%E7%A1%80-1-%E5%88%9B%E4%B8%9A%E6%9C%AC%E8%B4%A8%E4%B8%8E%E5%88%9B%E4%B8%9A%E6%80%9D%E7%BB%B4/"/>
    <id>https://bruceeezhao.github.io/2020/02/18/创业基础-1-创业本质与创业思维/</id>
    <published>2020-02-18T07:44:53.000Z</published>
    <updated>2020-02-19T12:05:30.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创业活动"><a href="#创业活动" class="headerlink" title="创业活动"></a>创业活动</h1><ol><li>产生创业动机</li><li>识别创业机会—关键环节<ul><li>发现机会</li><li>评价机会价值</li></ul></li><li>整合创业资源</li><li>创建新企业</li><li>实现机会价值</li><li>收获回报</li></ol><a id="more"></a><h1 id="创业的类型"><a href="#创业的类型" class="headerlink" title="创业的类型"></a>创业的类型</h1><p>按照谁在创业，在哪里创业，创业效果如何这三个基本问题，可以将创业分为：</p><ul><li>生存型创业与机会型创业</li><li>个体创业与公司创业</li><li>网络创业</li><li>弱势群体创业和衍生创业</li></ul><h2 id="生存型创业与机会型创业"><a href="#生存型创业与机会型创业" class="headerlink" title="生存型创业与机会型创业"></a>生存型创业与机会型创业</h2><ol><li>生存型创业<br>是指创业行为处于别无其他更好的选择，即不得不参与创业活动解决其面临的困难。<br>例如：下岗工人创业</li><li>机会型创业<br>是指创业行为的动机处于个人抓住现有机会并实现价值的强烈愿望，创业有更好的机会。<br>例如： 李彦宏创立百度</li></ol><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ol><li>创业动机不同</li><li>发现商机市场不同<br>生存型：现有市场中捕捉机会<br>机会型：发现了新需要与新市场</li><li>进入市场不同<br>生存型：面向现有的小市场<br>机会型：面向大市场</li><li>出发点不同</li></ol><h2 id="基于初始条件分类"><a href="#基于初始条件分类" class="headerlink" title="基于初始条件分类"></a>基于初始条件分类</h2><ul><li>边缘型创业</li><li>冒险型创业</li><li>风投支持的创业</li><li>大公司内部的创业</li><li>革命性的创业<br><img src="//bruceeezhao.github.io/2020/02/18/创业基础-1-创业本质与创业思维/relations.png" alt="relations"></li></ul><h2 id="基于效果的分类"><a href="#基于效果的分类" class="headerlink" title="基于效果的分类"></a>基于效果的分类</h2><ul><li>复制型创业</li><li>模仿型创业</li><li>安家型创业</li><li>冒险型创业<br><img src="//bruceeezhao.github.io/2020/02/18/创业基础-1-创业本质与创业思维/result-orinted.png" alt="result-orinted"></li></ul><h1 id="创业逻辑与思维"><a href="#创业逻辑与思维" class="headerlink" title="创业逻辑与思维"></a>创业逻辑与思维</h1><ul><li><p>因果逻辑<br>也被称为预测逻辑，因为它强调必须依靠精确的预测和清洗的目标；</p></li><li><p>效果逻辑<br>也被称为非预测逻辑，极度依靠利益相关这并且是手段导向的。</p></li></ul><h2 id="因果逻辑创业过程"><a href="#因果逻辑创业过程" class="headerlink" title="因果逻辑创业过程"></a>因果逻辑创业过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start=&gt;start: 开展市场研究和竞争分心，找到目标细分市场</span><br><span class="line">operation=&gt;operation: 计算边际成本/价格并制定财务计划</span><br><span class="line">end=&gt;end: 撰写商业计划，整合资源，组建团队并创建新企业</span><br><span class="line"></span><br><span class="line">start-&gt;operation-&gt;end</span><br></pre></td></tr></table></figure><h2 id="效果逻辑创业过程"><a href="#效果逻辑创业过程" class="headerlink" title="效果逻辑创业过程"></a>效果逻辑创业过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start=&gt;start: 从你是谁，你知道什么以及你认识谁开始起步，利用少量资源开始做可以做的事情</span><br><span class="line">operation=&gt;operation: 与大量潜在利益相关者进行交互并谈判实际的投入，根据实际投入重塑创业的具体目标</span><br><span class="line">end=&gt;end: 利益相关者和资源投入链条手链到一个可行的新创企业</span><br><span class="line"></span><br><span class="line">start-&gt;operation-&gt;end</span><br></pre></td></tr></table></figure><h2 id="因果逻辑效果逻辑对比"><a href="#因果逻辑效果逻辑对比" class="headerlink" title="因果逻辑效果逻辑对比"></a>因果逻辑效果逻辑对比</h2><p><img src="//bruceeezhao.github.io/2020/02/18/创业基础-1-创业本质与创业思维/yinguo.png" alt="因果逻辑效果对比"></p><h2 id="创业思维原则"><a href="#创业思维原则" class="headerlink" title="创业思维原则"></a>创业思维原则</h2><p><img src="//bruceeezhao.github.io/2020/02/18/创业基础-1-创业本质与创业思维/principle.png" alt="principle"></p><ol><li>手中鸟原则： 基于你是谁，你知道什么，你认识谁，充分利用自己手中现有的资源开始行动。</li><li>可承受的损失原则： 不要视图追求利益最大化，而是要关注可以承受的损失。</li><li>柠檬原则：不要害怕变化和偶然性，而是要充分利用和拥抱他们。</li><li>疯狂被子原则： 不要进行竞争对手分析，而是要尽可能广泛的建立合作伙伴关系。</li><li>飞行员原则：不要仅仅寻找商机，而是要创造商机。</li></ol><h1 id="精益创业"><a href="#精益创业" class="headerlink" title="精益创业"></a>精益创业</h1><p>核心思想： 以最小化可行产品（Minimal Viable Product， MVP），从每次实验的结果中学习，快速迭代，在资源耗尽之前从迷雾中找到通往成功的道路。</p><h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><ol><li>确定待验证的假设</li><li>制作MVP</li><li>确定衡量指标，检验假设</li><li>坚持或转型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    1((学习))--&gt; </span><br><span class="line">    2((想法))--&gt;</span><br><span class="line">    3((开发))--&gt;</span><br><span class="line">    4((编码))--&gt;</span><br><span class="line">    5((测量))--&gt;</span><br><span class="line">    6((数据))--&gt;1</span><br></pre></td></tr></table></figure><h2 id="创业逻辑"><a href="#创业逻辑" class="headerlink" title="创业逻辑"></a>创业逻辑</h2><ol><li>创业初期一系列未经验证的假设</li><li>测试假设（客户开发）<br>邀请潜在的使用者，购买者和合作伙伴提供反馈（产品功能，定价，分销渠道以及可行的客户获取战略）</li><li>敏捷开发方式</li></ol><h2 id="创业思维"><a href="#创业思维" class="headerlink" title="创业思维"></a>创业思维</h2><ol><li>利用手头资源快速行动</li><li>根据可承受损失而不是预期收益采取行动</li><li>小步快走，多次尝试</li><li>在行动中不断吸引更多的人加入</li><li>把行动中的意外事件看成好事</li><li>把激情当成行动的动力</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创业活动&quot;&gt;&lt;a href=&quot;#创业活动&quot; class=&quot;headerlink&quot; title=&quot;创业活动&quot;&gt;&lt;/a&gt;创业活动&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;产生创业动机&lt;/li&gt;
&lt;li&gt;识别创业机会—关键环节&lt;ul&gt;
&lt;li&gt;发现机会&lt;/li&gt;
&lt;li&gt;评价机会价值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整合创业资源&lt;/li&gt;
&lt;li&gt;创建新企业&lt;/li&gt;
&lt;li&gt;实现机会价值&lt;/li&gt;
&lt;li&gt;收获回报&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="创业基础" scheme="https://bruceeezhao.github.io/categories/%E5%88%9B%E4%B8%9A%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>区块链技术与应用-以太坊</title>
    <link href="https://bruceeezhao.github.io/2020/02/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    <id>https://bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/</id>
    <published>2020-02-17T08:53:33.000Z</published>
    <updated>2020-03-02T09:09:04.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>以太坊中的出块时间缩短为十几秒，设计了基于gost的协议。以太坊中的mining puzzle是memory hard的，限制了ASIC的使用（ASIC resistance）。  </p><a id="more"></a><p>proof of work –&gt; proof of stake  </p><p>Bitcoin: decentralized currency<br>Ethereum: decentrailized contract(去中心化的合约)  </p><h1 id="2-以太坊账户"><a href="#2-以太坊账户" class="headerlink" title="2. 以太坊账户"></a>2. 以太坊账户</h1><p>基于账户的模型(account-based ledger)  </p><p>有余额的概念，转账交易时只需验证账户上是否有足够的余额，不用验证币的来源，对于double spending attack有天然的防御。  </p><p>缺点： replay attack<br>a向b转10个币，写入区块链中，b又广播一次a向b转账的交易<br>防范： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B(10 ETH)</span><br><span class="line">  nonce = 21</span><br><span class="line">   singed by A</span><br></pre></td></tr></table></figure><p>nonce 为交易次数，每一个交易的nonce唯一</p><p>以太坊中有两类账户：</p><ul><li><p>外部账户（externally owned account）</p><ul><li>由公私钥对控制</li><li>属性：<br>balance（账户余额）<br>nonce（计数器）</li></ul></li><li><p>合约账户（smart contract account）</p><ul><li>特点：<br>一个合约可以调用其他合约，但合约账户不能主动发起交易</li><li>属性：<br>nonce<br>code<br>storage</li></ul></li></ul><h1 id="3-状态树"><a href="#3-状态树" class="headerlink" title="3. 状态树"></a>3. 状态树</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">为了实现从账户地址到账户状态的映射</span><br><span class="line">addr -&gt; state</span><br><span class="line">160 bits    40个16进制的数</span><br><span class="line">state： 外部账户（balance nonce)</span><br><span class="line">        合约账户（nonce code storage)</span><br></pre></td></tr></table></figure><p>(key, value)<br>RLP:Recursive Length Prefix</p><h2 id="3-1-trie-字典树"><a href="#3-1-trie-字典树" class="headerlink" title="3.1. trie(字典树)"></a>3.1. trie(字典树)</h2><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/trie.png" alt="trie"></p><p>特点：</p><ol><li>每个节点的分支数目取决于key值中每个元素的取值范围（在以太坊中分叉数为17，因为是16进制，加上一位结束标志）</li><li>tire的查找效率取决于key的长度，键值越长，查找需要访问内存的次数越多。（在以太坊中key的长度为40）</li><li>不会出现碰撞（只要地址不同就不可能碰撞）</li><li>插入顺序不影响树的结构</li><li>更新的局部性很好，只更新相关的分支</li></ol><p>缺点：</p><ol><li>浪费存储空间</li></ol><h2 id="3-2-Patricia-trie-tree"><a href="#3-2-Patricia-trie-tree" class="headerlink" title="3.2. Patricia trie(tree)"></a>3.2. Patricia trie(tree)</h2><p>为了解决trie的存储浪费，同时提高查找效率，引入了pt  </p><p>pt 是前缀树，对于字典树进行路径压缩。</p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/pt.png" alt="pt"></p><p>注意：<br><strong>在pt中新插入元素，原来压缩的路径可能会扩展开</strong></p><h2 id="3-3-MPT-Merkle-Patricia-tree"><a href="#3-3-MPT-Merkle-Patricia-tree" class="headerlink" title="3.3. MPT(Merkle Patricia tree)"></a>3.3. MPT(Merkle Patricia tree)</h2><p>使用哈希指针的pt  </p><p>以太坊中使用的是 modified MPT<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/mpt.png" alt="mpt"></p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/blocks.png" alt="blocks"></p><p>保存历史状态是为了支持回滚操作  </p><p>blockheader代码：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/headcode.png" alt="headcode"></p><p>block代码：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/blockcode.png" alt="blockcode"></p><p>extblock代码：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/extblock.png" alt="ext"></p><h1 id="4-交易树和收据树"><a href="#4-交易树和收据树" class="headerlink" title="4. 交易树和收据树"></a>4. 交易树和收据树</h1><p>对于状态树来说，查找的键值就是账户的地址，对于交易树和收据树来说，查找的键值就是这个交易在发布的区块里的序号，交易的排列顺序是由发布这个区块的节点决定的。  </p><p>区别：  </p><ul><li><p>交易树和收据树是只把当前发布的区块的交易组织起来的；而状态树是把系统中所有账户的状态都要包含进来，不管这个账户与当前的交易有没有关系。</p></li><li><p>每个区块的交易树和收据树都是独立的，他们是不会共享节点的，一个区块和另一个区块发布的交易本身我们也认为是独立的。</p></li></ul><p>作用：</p><ul><li>提供Merkel proof</li><li>查找过去n天产生与某个只能合约相关的交易</li></ul><h2 id="4-1-bloom-filter"><a href="#4-1-bloom-filter" class="headerlink" title="4.1. bloom filter"></a>4.1. bloom filter</h2><p>可以支持高效的查找，判断某个元素是否在某个集合中。<br>思想： 为集合计算出一个紧凑的摘要，哈希映射<br>缺点： </p><ul><li>哈希碰撞（false positive)</li><li>不支持删除操作（哈希碰撞）</li></ul><p>通过bloom filter可以过快速过滤掉无关的区块</p><p><strong>以太坊的运行过程可以看做是一个交易驱动的状态机（transaction-driven state machine)，状态的转换是确定的</strong></p><h1 id="5-GHOST-协议"><a href="#5-GHOST-协议" class="headerlink" title="5. GHOST 协议"></a>5. GHOST 协议</h1><p>在以太坊中出现分叉的情况更为常见<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/ghost1.png" alt="ghost1"></p><p>（uncle区块：当一个区块a被挖出时，感知到有相同的区块b被挖出，则b是c的uncle区块）被包含的uncle区块可获得7/8的出块奖励。  </p><p>新区块如果包含一个uncle区块可以获得额外的1/32的出块奖励，一个新区块最多包含2个uncle block。  </p><p>初代ghost协议存在的问题：</p><ul><li>只能包含两个uncle区块</li><li>为了商业竞争，可能故意不包含uncle区块</li></ul><p>修改协议：</p><ul><li>祖父，曾祖父区块。。。都可以作为uncle区块，因为区块不太可能都是由同一个矿池挖出，所以会有其他区块包含uncle区块，使得uncle区块可以获得奖励。</li></ul><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/uncle2.png" alt="uncle2"></p><ul><li>以太坊中规定最多可以包含前6代的uncle区块，6代之前的不是uncle区块，或者说合法的uncle只有6个辈分。  </li><li>对于当前块来讲，包含任意辈分的uncle，都能获得额外的1/32的出块奖励。</li></ul><p><strong>以太坊中有两种reward，block reward和gas fee，uncle block不能获得gas fee。gas fee与比特币中的交易费类似。</strong>  </p><p>问题：</p><ol><li><p>包含uncle block时要执行uncle block中的交易吗？<br>不检查uncle block中交易的合法性，值检查uncle是否符合挖矿难度</p></li><li><p>如果分叉之后还跟着一串该怎么办？<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/q2.png" alt="q2"><br>如果每个都给奖励，会降低分叉攻击的成本。以太坊中规定只给第一个区块奖励。</p></li></ol><h1 id="6-挖矿算法"><a href="#6-挖矿算法" class="headerlink" title="6. 挖矿算法"></a>6. 挖矿算法</h1><p>挖矿是保证区块链安全的一个重要保障，所以我们可以说block chain is secured by mining.  </p><p>但是比特币的挖矿算法后来出现了ASIC芯片，使得具有强算力的设备在挖矿上有更大的优势，这与去中心化的思想是背道而驰的。（只能专业的机器，普通的计算设备不能参与挖矿）  </p><p>后来出现的加密货币的挖矿算法在设计的时候尽量降低对于ASIC的依赖，增加对内存的需求，即</p><blockquote><p>ASIC resistance<br>memory hard mining puzzle  </p></blockquote><p>LiteCoin 就是基于这种思想的加密货币</p><h2 id="6-1-LiteCoin"><a href="#6-1-LiteCoin" class="headerlink" title="6.1. LiteCoin"></a>6.1. LiteCoin</h2><p>使用基于scrypt的mining puzzle   </p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/litecoin.png" alt="litecoin"></p><p>开设一个很大的数组，按照顺序填充一些伪随机数，使用seed填充第一个值，后一个值是有前一个值取哈希得到的。<br>求解puzzle时，读取A位置的数，根据他的取值算出下一个读取的位置，比如是B，以此类推。  </p><p>问题：</p><ul><li>对于轻节点不友好，验证和求解需要同样的内存</li></ul><p>实际上litecoin的内存只有128k</p><h2 id="6-2-以太坊"><a href="#6-2-以太坊" class="headerlink" title="6.2. 以太坊"></a>6.2. 以太坊</h2><p>以太坊使用memory hard的挖矿算法。</p><ul><li>有两个数据集，小数据集16M cache，大数据集1G dataset(DAG)。大数据集是从小数据集中生成出来的。</li><li>小数据集是轻节点保存的</li><li>大数据集是挖矿节点使用的</li><li>这两个数据集是不断增大的</li></ul><h3 id="6-2-1-伪代码"><a href="#6-2-1-伪代码" class="headerlink" title="6.2.1. 伪代码"></a>6.2.1. 伪代码</h3><p>生成小数据集：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/code-g16m.png" alt="code-16m"></p><p>生成大数据集：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/code-g1g.png" alt="code-1g"><br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/code-g1gc.png" alt="code-1gc"></p><p>挖矿/验证函数：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/code-m-c.png" alt="code-mining-check"></p><p>挖矿函数：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/code-mine.png" alt="code-mine"></p><p>全部函数：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/code-eth-full.png" alt="code-eth"></p><h2 id="6-3-几点说明"><a href="#6-3-几点说明" class="headerlink" title="6.3. 几点说明"></a>6.3. 几点说明</h2><ol><li><p><strong>以太坊实际上只有gpu挖矿，没有出现ASIC矿机，从这一点上讲是比较成功的。</strong>  </p></li><li><p>以太坊构思从工作量证明转向权益证明，即POW-&gt;POS，但至今没有转变。  </p></li><li><p>以太坊中使用了预挖矿（pre-mining)的过程，所谓预挖矿是指预留一些以太币给开发者。</p></li></ol><h1 id="7-难度调整算法"><a href="#7-难度调整算法" class="headerlink" title="7. 难度调整算法"></a>7. 难度调整算法</h1><p>与比特币的每隔2016个区块调整一次不同，以太坊是每隔区块都有可能调整难度。  </p><p>难度调整算法：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/difficult-c.png" alt="difficult"></p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/difficult-1.png" alt="diffcult-1"></p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/difficult-2.png" alt="diffcult-2"></p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/difficult-e.png" alt="diffcult-e"></p><p>以太坊发展的4个阶段：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/4stage.png" alt="4stage"></p><p>拜占庭阶段调整挖矿难度具体代码实现：<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/code-difficult.png" alt="code-difficult"></p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/code-difficult-base.png" alt="code-diffi-base"></p><h1 id="8-权益证明（proof-of-stake"><a href="#8-权益证明（proof-of-stake" class="headerlink" title="8. 权益证明（proof of stake)"></a>8. 权益证明（proof of stake)</h1><p>例如，根据持有币的多少来确定挖矿难度，持有币越多，挖矿难度越低，但这个设计会有问题，因为持有币多的人总会很容易挖到矿。所以有的加密货币要求投入的币会锁定一段时间。有时候叫做proof of deposit。  </p><p>早期的权益证明会遇到两边下注的问题（nothing at stake）<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/nothing-at-stake.png" alt="nothing-at-stake"></p><p>在下面分支投入的币不会影响上面分支</p><h2 id="8-1-Casper-the-Friendly-Finality-Gadget-FFG"><a href="#8-1-Casper-the-Friendly-Finality-Gadget-FFG" class="headerlink" title="8.1. Casper the Friendly Finality Gadget(FFG)"></a>8.1. Casper the Friendly Finality Gadget(FFG)</h2><p>以太坊想要使用的权益证明  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">以太坊中引入了一个validator的概念：</span><br><span class="line">validator（验证者）： 要成为一个validator，必须要投入一些以太币作为保证金，这些保证金会被系统锁定</span><br><span class="line"></span><br><span class="line">validator职责：推动系统达成共识，投票决定哪条链是最长合法链，投票的权重取决于投入保证金的多少。</span><br><span class="line"></span><br><span class="line">具体做法类似于数据库中的 two-phase commit,第一轮 prepare message， 第二轮 commit message</span><br><span class="line"></span><br><span class="line">挖矿时每挖出100个区块，就作为一个epoch。 决定其能否作为一个 ，要进行投票。每一轮投票都要得到2/3以上的验证者才能通过。</span><br><span class="line"></span><br><span class="line">在实际中不再区分这两个message，且将100个区块降为50个区块。每个epoch只用一轮投票，这轮投票对于上一个epoch来说是commit message，对于下一个epoch来说是prepare message，连续两轮投票都得到2/3以上的多数，才算有效。</span><br></pre></td></tr></table></figure><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/epoch.png" alt="epoch"></p><p>验证者参与这个过程:  </p><ul><li>如果验证者履行职责，可以得到相应的奖励</li><li>如果验证者有不良行为，要受到相应的惩罚<ul><li>行政不作为（该投票不投票），扣除一部分保证金</li><li>乱投票（两边下注），没收保证金（销毁）</li></ul></li><li>每个验证者有一定任期，任期满了之后有一定等待期，在等待期可以接受其他节点检举揭发对其惩处，如果等待期通过，则可以取回保证金和相应的奖励</li></ul><h1 id="9-智能合约"><a href="#9-智能合约" class="headerlink" title="9. 智能合约"></a>9. 智能合约</h1><ul><li>智能合约是运行在区块链上的一段带密码，代码逻辑定义了合约内容</li><li>智能合约的账户保存了合约当前的运行状态<ul><li>balance： 当前余额</li><li>nonce： 交易次数</li><li>code：合约代码</li><li>storage： 存储，数据结构是一颗MPT</li></ul></li><li>Solidity是智能合约最常用的语言，语法上与JavaScript很相近</li></ul><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/soliditydemo.png" alt="solidity"></p><h2 id="9-1-如何调用智能合约"><a href="#9-1-如何调用智能合约" class="headerlink" title="9.1. 如何调用智能合约"></a>9.1. 如何调用智能合约</h2><p>调用智能合约与转账类似，例如A转账给B，若B是一个普通账户，则与比特币中的转账是相同的；若B是一个合约账户，这个转账实际上是发起对B合约的一次调用，具体调用的函数是在data域中说明的。</p><h3 id="9-1-1-外部账户调用"><a href="#9-1-1-外部账户调用" class="headerlink" title="9.1.1. 外部账户调用"></a>9.1.1. 外部账户调用</h3><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/callIn.png" alt="call"><br>其中：</p><ul><li>TO CONTRACT ADDRESS: 是被调用的合约的地址</li><li>中间一行是调用的参数</li></ul><p>汽油费是给发布这个区块的矿工的，汽油费如果不给的话，矿工不会把这个交易打包进入区块。</p><h3 id="9-1-2-一个合约调用另一个合约"><a href="#9-1-2-一个合约调用另一个合约" class="headerlink" title="9.1.2. 一个合约调用另一个合约"></a>9.1.2. 一个合约调用另一个合约</h3><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/call-1.png" alt="call-1"></p><p>由于以太坊中合约账户不能主动发起交易，所以在这个例子中应该还有一个外部账户，调用了合约B。</p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/call-2.png" alt="call-2"><br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/call-3.png" alt="call-3"></p><h3 id="9-1-3-fallback-函数"><a href="#9-1-3-fallback-函数" class="headerlink" title="9.1.3. fallback 函数"></a>9.1.3. fallback 函数</h3><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/fallback.png" alt="fallback"></p><h2 id="9-2-智能合约的创建和运行"><a href="#9-2-智能合约的创建和运行" class="headerlink" title="9.2. 智能合约的创建和运行"></a>9.2. 智能合约的创建和运行</h2><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/C&R.png" alt="C&amp;R"></p><h2 id="9-3-汽油费（gas-fee）"><a href="#9-3-汽油费（gas-fee）" class="headerlink" title="9.3. 汽油费（gas fee）"></a>9.3. 汽油费（gas fee）</h2><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/gas-fee.png" alt="gas-fee"></p><p>死循环不可解，是一个Halting Problem</p><h2 id="9-4-错误处理"><a href="#9-4-错误处理" class="headerlink" title="9.4. 错误处理"></a>9.4. 错误处理</h2><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/error-habdle.png" alt="error"></p><p>如果汽油费不够，则会引起回滚，但是已经消耗的汽油费不退，此举是为了防止恶意节点发起拒绝服务攻击。</p><h2 id="9-5-嵌套调用"><a href="#9-5-嵌套调用" class="headerlink" title="9.5. 嵌套调用"></a>9.5. 嵌套调用</h2><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/qiantao.png" alt="qiantao"></p><h2 id="9-6-智能合约可以获得的区块信息"><a href="#9-6-智能合约可以获得的区块信息" class="headerlink" title="9.6. 智能合约可以获得的区块信息"></a>9.6. 智能合约可以获得的区块信息</h2><ul><li>block.blockhash(uint blockNumber) returns (bytes32) : 给定区块的哈希—仅对最近的256个区块有效而不包括当前区块</li><li>block.coinbase(address):挖出当前区块的矿工地址</li><li>block.difficulity(uint):当前区块难度</li><li>block.gaslimit(uint):当前区块gas限额</li><li>block.number(uint):当前区块好</li><li>block.timestamp(uint):自unix epoch起始当前区块以秒计的时间戳。</li></ul><h2 id="9-7-智能合约可以获得的调用信息"><a href="#9-7-智能合约可以获得的调用信息" class="headerlink" title="9.7. 智能合约可以获得的调用信息"></a>9.7. 智能合约可以获得的调用信息</h2><ul><li>msg.data(bytes):完整的calldata</li><li>msg.gas(unit):剩余gas</li><li>msg.sender(address):消息发送者（当前调用）</li><li>msg.sig(bytes4):calldata的前4字节（也就是函数表示服）</li><li>msg.value(uint):随消息发送的wei的数量</li><li>now(uint):目前区块时间戳（block.timestamp)</li><li>tx.gasprice(uint):交易的gas价格</li><li>tx.origin(address):交易发起者（完全的调用链）</li></ul><h2 id="9-8-地址类型"><a href="#9-8-地址类型" class="headerlink" title="9.8. 地址类型"></a>9.8. 地址类型</h2><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/addresstype.png" alt="addresstype"></p><h3 id="9-8-1-transfer-vs-send-vs-call"><a href="#9-8-1-transfer-vs-send-vs-call" class="headerlink" title="9.8.1. transfer vs. send vs. call"></a>9.8.1. transfer vs. send vs. call</h3><p>这三个函数都可以用于转账</p><ol><li>transfer和send 这两个是专门为了转账的函数，区别在于，transfer会导致连锁回滚；send不会导致连锁回滚</li><li>call本意是用来调用函数的，也可以转账。也不会连锁回滚。把剩下的汽油都发过去</li></ol><h1 id="10-the-Dao"><a href="#10-the-Dao" class="headerlink" title="10. the Dao"></a>10. the Dao</h1><ul><li><p>DAO(Decentralized Autonomous Organization) 去中心化的自治组织</p><ul><li>建立在代码的基础上的组织， 组织的规章制度写在代码里，通过区块链的共识协议维护规章制度的正常执行</li></ul></li><li><p>DAC(Decentralized Autonomous Corporation)</p></li><li><p><strong>the Dao:</strong> 2016年5月出现的一个致力于众筹投资的组织。使用以太币换取代币，由投入币的多少确定投票资格。收益的取回方式：split Dao，split直到子Dao中只有一个用户。<br><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/thedao.png" alt="the dao"><br>由于代码的漏洞，黑客发动了重入攻击。取走了很多以太币<br>这件事引起了轩然大波，在社区引发了激烈讨论，以太坊开发团队首先试图冻结与the Dao相关的交易，发布软件升级，实现软分叉，但由于升级的代码中不收取与the Dao相关交易的汽油费，导致产生了很多攻击。后又发布另一个版本的升级，实现硬分叉。以太坊分为了两个社区，旧链改为ETC,新链仍使用ETH.</p></li></ul><h2 id="10-1-反思"><a href="#10-1-反思" class="headerlink" title="10.1. 反思"></a>10.1. 反思</h2><ol><li>关于智能合约的反思</li></ol><ul><li><p>Is smart contract really smart?<br>smart contract is anything but smart.</p></li><li><p>Irrerocability is a double edged sword</p></li><li><p>Nothing is irrevovable(不可篡改)</p></li><li><p>Is solidity the right programming language?</p></li></ul><ol start="2"><li><p>what does decentralization mean?<br>对规则的修改需要用去中心化的方式来修改</p></li><li><p>decentralized != distributed</p></li></ol><h1 id="11-美链"><a href="#11-美链" class="headerlink" title="11. 美链"></a>11. 美链</h1><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/beautiful-chain.png" alt="beautiflu-chain"></p><p><img src="//bruceeezhao.github.io/2020/02/17/区块链技术与应用-以太坊/batchtransfer.png" alt="batchtransfer"></p><p>当value很大时，amount可能会溢出，会导致体统上凭空出现很多代币。</p><h1 id="12-课程总结"><a href="#12-课程总结" class="headerlink" title="12. 课程总结"></a>12. 课程总结</h1><ul><li>中心化的组织也可以使用去中心化的支付方式</li><li>缺乏一种全球流通的货币</li><li>未来互联网的发展方向：支付渠道和信息渠道的统一</li><li>加密货币不应该与现有货币竞争</li><li>随着协议的改进，支付效率提高了很多</li><li>评价</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;p&gt;以太坊中的出块时间缩短为十几秒，设计了基于gost的协议。以太坊中的mining puzzle是memory hard的，限制了ASIC的使用（ASIC resistance）。  &lt;/p&gt;
    
    </summary>
    
      <category term="区块链技术与应用" scheme="https://bruceeezhao.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="区块链" scheme="https://bruceeezhao.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="https://bruceeezhao.github.io/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>书单</title>
    <link href="https://bruceeezhao.github.io/2020/02/07/%E4%B9%A6%E5%8D%95/"/>
    <id>https://bruceeezhao.github.io/2020/02/07/书单/</id>
    <published>2020-02-07T13:16:24.000Z</published>
    <updated>2020-03-12T14:12:21.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="book"><a href="#book" class="headerlink" title="book"></a>book</h1><ul><li><input disabled type="checkbox"> getting real</li><li><input disabled type="checkbox"> shape-up</li><li><input disabled type="checkbox"> 数学，确定性的丧失</li></ul><a id="more"></a><h1 id="paper"><a href="#paper" class="headerlink" title="paper"></a>paper</h1><ul><li><input disabled type="checkbox"> A Berkeley View of Systems Challenges for AI</li><li><input disabled type="checkbox"> Solving the Rubik’s cube with deep reinforcement learning and search </li><li><input disabled type="checkbox"> TACE: A Toolkit for Analyzing Concept Evolution in Computing Curricula</li><li><input disabled type="checkbox"> Bloom’s Taxonomy</li><li><input disabled type="checkbox"> The Unreasonable Effectiveness of Data</li><li><input disabled type="checkbox"> The Measure of Intelligence</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;book&quot;&gt;&lt;a href=&quot;#book&quot; class=&quot;headerlink&quot; title=&quot;book&quot;&gt;&lt;/a&gt;book&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; getting real&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; shape-up&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; 数学，确定性的丧失&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>区块链技术与应用-比特币系统</title>
    <link href="https://bruceeezhao.github.io/2020/02/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E6%AF%94%E7%89%B9%E5%B8%81%E7%B3%BB%E7%BB%9F/"/>
    <id>https://bruceeezhao.github.io/2020/02/07/区块链技术与应用-比特币系统/</id>
    <published>2020-02-07T08:50:19.000Z</published>
    <updated>2020-02-17T08:55:08.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码学原理"><a href="#密码学原理" class="headerlink" title="密码学原理"></a>密码学原理</h1><h2 id="密码学哈希函数"><a href="#密码学哈希函数" class="headerlink" title="密码学哈希函数"></a>密码学哈希函数</h2><a id="more"></a><p>性质： </p><ol><li><p>collision resistance 很难产生哈希碰撞<br>很难找到一个值 m’ 使得 H(m’) = h(m)</p></li><li><p>hiding 单向<br>x -&gt; H(x)<br>从哈希值h(x)不能反推出x<br>成立前提:输入空间足够大，概率分布较均匀  </p></li></ol><blockquote><p>这两个性质结合可以应用于<br>digital commitment<br>digital equivalent of a sealed envelope</p></blockquote><ol start="3"><li>puzzle friendly 比特币中的哈希函数性质<br>SHA-256<br>difficult to solve,but easy to verify<br>H(block header) &lt;= target</li></ol><h2 id="签名："><a href="#签名：" class="headerlink" title="签名："></a>签名：</h2><p>(public key, private key) 非对称加密体系<br>签名使用私钥，验证使用公钥<br>成立前提：拥有一个好的随机源</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="哈希指针"><a href="#哈希指针" class="headerlink" title="哈希指针"></a>哈希指针</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p -&gt; ____ &lt;- h()</span><br><span class="line">    |    |</span><br><span class="line">    |    |</span><br><span class="line">    |____|</span><br><span class="line">h() 结构体的哈希值</span><br></pre></td></tr></table></figure><p>Block chain is a linked list using hash pointers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">区块链示意图</span><br><span class="line">     ____    ____    ____    ____ </span><br><span class="line">    |    |  |    |  |    |  |    |</span><br><span class="line">    |    |&lt;-|    |&lt;-|    |&lt;-|h() | </span><br><span class="line">    |____|  |____|  |____|  |____|</span><br><span class="line">    创世纪块                  最近产生的区块</span><br><span class="line"></span><br><span class="line">根据前一个区块取哈希，若前面的区块发生变化，则哈希值不能对应上，可以发现篡改</span><br></pre></td></tr></table></figure><h2 id="Merkle-tree"><a href="#Merkle-tree" class="headerlink" title="Merkle tree"></a>Merkle tree</h2><p>使用哈希指针的二叉树</p><p>最下面一层是数据块（交易块），上面的节点都是哈希指针。只需保存root hash的值，就可以判断整棵树是否被篡改。  </p><p>每个区块分为两部分： block header ,block body<br>block header:记录root hash<br>block body:记录交易列表<br>轻节点：只保存block header</p><p><img src="//bruceeezhao.github.io/2020/02/07/区块链技术与应用-比特币系统/merkletree.png" alt="merkle tree"></p><p>作用：提供merkle proof<br><img src="//bruceeezhao.github.io/2020/02/07/区块链技术与应用-比特币系统/merkleproof.png" alt="merkle proof"></p><p>某个轻节点想证明交易tx是否在merkle tree中，需要向某个全节点发送请求，全节点将标为红色的哈希值告诉轻节点，轻节点即可验证。</p><p>proof of membership  </p><p>当节点按哈希值大小排序时(sorted merkle tree)，是可以证明 nonmembership 的</p><h1 id="数字货币的问题："><a href="#数字货币的问题：" class="headerlink" title="数字货币的问题："></a>数字货币的问题：</h1><ol><li><p>doble spending attack<br>如果数字货币只有签名，那么货币可能被复制  </p><p>中心化的解决方法，央行记录货币的拥有者，交易时验证货币拥有者的信息</p></li></ol><h2 id="去中心化的数字货币要解决的问题："><a href="#去中心化的数字货币要解决的问题：" class="headerlink" title="去中心化的数字货币要解决的问题："></a>去中心化的数字货币要解决的问题：</h2><ol><li>数字货币的发行</li><li>验证交易的有效性</li></ol><p><img src="//bruceeezhao.github.io/2020/02/07/区块链技术与应用-比特币系统/trans.png" alt="trans"></p><p>交易分为输入和输出：输入包括a的公钥和币的来源，输出部分为接收者的公钥<br>在铸币交易时公布了a的公钥  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">block header</span><br><span class="line"> version</span><br><span class="line"> hash of previous block header</span><br><span class="line"> merkle root hash</span><br><span class="line"> target</span><br><span class="line"> nonce</span><br><span class="line"></span><br><span class="line">block body</span><br><span class="line"> transaction list</span><br></pre></td></tr></table></figure><h2 id="Consensus-in-BitCoin"><a href="#Consensus-in-BitCoin" class="headerlink" title="Consensus in BitCoin"></a>Consensus in BitCoin</h2><h1 id="比特币系统的实现"><a href="#比特币系统的实现" class="headerlink" title="比特币系统的实现"></a>比特币系统的实现</h1><h2 id="基于交易的账本"><a href="#基于交易的账本" class="headerlink" title="基于交易的账本"></a>基于交易的账本</h2><p>比特币系统是基于交易的账本，transaction-based ledger  </p><p>比特币的全节点要维护一个utxo的数据结构：Unspent Transaction Output(未花掉的交易的输出的集合)，可以快速检测double spending  </p><p>total inputs = total outputs</p><h2 id="基于账户的账本"><a href="#基于账户的账本" class="headerlink" title="基于账户的账本"></a>基于账户的账本</h2><p>以太坊采用这种模式<br>account-based ledger</p><h2 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h2><p>不断尝试nonce来求解puzzle  </p><p>每次尝试可以看做是一个bernoulli trial:a random experiment with binary outcome  </p><p>berboulli process: a sequence of independent Bernoulli trails  </p><p>性质： memoryless  </p><p>每次的成功概率很小，可以用泊松近似（Poisson process）</p><p>出块时间服从指数分布 x^(-1)  </p><p>比特币的总数为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">21万*50 + 21万*25 + ....</span><br><span class="line">= 21万 * 50 * (1+1/2+1/4+...) = 2100万</span><br></pre></td></tr></table></figure><p>比特币的稀有性是人为造成的  </p><p>挖矿提供了一种依靠算力投票的有效机制，bitcoin is secured by mining</p><h1 id="比特币网络工作原理"><a href="#比特币网络工作原理" class="headerlink" title="比特币网络工作原理"></a>比特币网络工作原理</h1><p>应用层： bitCoin Block chain<br>网络层： P2P Overlay Network  </p><p>设计原则： simple, robust, but not efficient<br>传播方式： flooding<br>使用 TCP  </p><h2 id="比特币系统挖矿难度的调整"><a href="#比特币系统挖矿难度的调整" class="headerlink" title="比特币系统挖矿难度的调整"></a>比特币系统挖矿难度的调整</h2><p>H(block header) &lt;= target  </p><p>SHA-256  2^256  </p><p>挖矿难度与target成反比<br>difficulty = difficulty_1_target / target  </p><p>比特币系统中规定每隔10分钟出一个区块，每隔2016个区块调整一次难度  </p><p>target = target * [(actual time) / (expected time)]  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="全节点"><a href="#全节点" class="headerlink" title="全节点"></a>全节点</h2><blockquote><p>一直在线<br>在本地硬盘上维护完整的区块链信息<br>在内存中维护UTXO集合，以便快速验证交易的正确性<br>监听比特币网络上的交易信息，验证每个交易的合法性<br>决定哪些交易会被打包到区块里<br>监听别的矿工挖出来的区块，验证其合法性<br>挖矿</p><ul><li>决定沿着哪条链挖下去</li><li>当出现等长的分叉的时候，选择哪一个分叉</li></ul></blockquote><h2 id="轻节点"><a href="#轻节点" class="headerlink" title="轻节点"></a>轻节点</h2><blockquote><p>不是一直在线<br>不用保存整个区块链，只保存每个区块的块头<br>不用保存全部交易，只保存与自己相关的交易<br>无法检验大多数交易的合法性，只能检验与自己相关的交易的合法性<br>无法检验网上发布的区块的正确性<br>可以验证挖矿的难度<br>只能检测哪个是最长链，不知道哪个是最长合法链</p></blockquote><h2 id="挖矿芯片："><a href="#挖矿芯片：" class="headerlink" title="挖矿芯片："></a>挖矿芯片：</h2><p>CPU -&gt; GPU -&gt; ASIC(Applicition Specific Integrated Circuit)  </p><p>一种ASIC只能为一种加密货币挖矿，除非mining puzzle相同（merge mining）</p><h2 id="矿池："><a href="#矿池：" class="headerlink" title="矿池："></a>矿池：</h2><p>一般有两种组织方式  </p><ol><li>集中式（属于同一个机构）</li><li>分布式（属于不同机构）</li></ol><p>一个矿池可以拥有多个矿工，解决收入不稳定的问题，根据工作量进行收入分配  </p><p>工作量证明： 每尝试一次nonce生成一个share（almost vaild block)  </p><p>优点：  </p><ul><li>解决收入不稳定的问题</li></ul><p>缺点：<br>可能会产生51%攻击</p><ul><li>分叉攻击</li><li>Boycott(A账户发起交易，立刻分叉)</li></ul><h1 id="比特币脚本"><a href="#比特币脚本" class="headerlink" title="比特币脚本"></a>比特币脚本</h1><p><img src="//bruceeezhao.github.io/2020/02/07/区块链技术与应用-比特币系统/script.png" alt="script"></p><p>先执行input script再执行output script，如果过程中出现任何错误都认为交易非法。  </p><p>输入输出脚本类型：</p><h2 id="P2PK-Pay-to-Public-Key"><a href="#P2PK-Pay-to-Public-Key" class="headerlink" title="P2PK(Pay to Public Key)"></a>P2PK(Pay to Public Key)</h2><p><strong>input script:</strong><br>  PUSHDATA(sig)</p><p><strong>output script:</strong><br>  PUSGDATA(PubKey)<br>  CHECKSIG</p><hr><p>脚本执行<br>PUSHDATA(sig)<br>PUSHDATA(PubKey)<br>CHECKSIG</p><hr><p>堆栈元素变化：<br>sig -&gt; PubKey,sig -&gt; true</p><h2 id="P2PKH-Pay-to-Public-Key-Hash"><a href="#P2PKH-Pay-to-Public-Key-Hash" class="headerlink" title="P2PKH(Pay to Public Key Hash)"></a>P2PKH(Pay to Public Key Hash)</h2><p><strong>input script:</strong><br>  PUSHDATA(sig)<br>  PUSHDATA(PubKey)  </p><p><strong>output</strong><br>  DUP<br>  HASH160<br>  PUSHDATA(PubKeyHash)<br>  EQUALVERIFY(比较栈顶两个哈希值是否相等)<br>  CHECKSIG  </p><hr><p>脚本执行<br>PUSHDATA(sig)<br>PUSHDATA(PubKey)<br>DUP<br>HASH160<br>PUSHDATA(PubKeyHash)<br>EQUALVERIFY(比较栈顶两个哈希值是否相等)<br>CHECKSIG  </p><hr><p>堆栈元素变化：<br>sig -&gt; pubKey,sig -&gt; pubKey,PubKey,sig -&gt; PubKeyHash,PubKey,sig -&gt; PubKeyHash,PubKeyHash,PubKey,sig -&gt; PubKey,sig -&gt; True</p><h2 id="P2SH-Pay-to-Script-Hash"><a href="#P2SH-Pay-to-Script-Hash" class="headerlink" title="P2SH(Pay to Script Hash)"></a>P2SH(Pay to Script Hash)</h2><p>采用BIP16的方案：<br><strong>input script:</strong><br>  …<br>  PUSHDATA(sig)<br>  …<br>  PUSHDATA(serialized redeemScript)  </p><p><strong>output scrpit:</strong><br>  HASH160<br>  PUSHDATA(redeemScriptHash)<br>  EQUAL  </p><hr><p>进一步说明  </p><ul><li>input script 要给出一些签名（数目不定）及一段序列化的redeemScript。验证分如下两步：</li></ul><ol><li>验证序列化的redeemScript是否与output script中的哈希值匹配</li><li>反序列话并执行redeemScript，验证input script中给出的签名是否正确</li></ol><ul><li>redeemScript 的形式</li></ul><ol><li>P2PK</li><li>P2PKH</li><li>多重签名形式</li></ol><hr><h3 id="用P2SH实现P2PK"><a href="#用P2SH实现P2PK" class="headerlink" title="用P2SH实现P2PK"></a>用P2SH实现P2PK</h3><p><strong>redeemScript:</strong><br>  PUSHDATA(PubKey)<br>  CHECKSIG  </p><p><strong>input script</strong><br>  PUSHDATA(sig)<br>  PUSHDATA(serialized redeemScript)  </p><p><strong>output script</strong><br>  HASH160<br>  PUSHDATA(redeemScriptHash)<br>  EQUAL  </p><p>第一阶段的验证：<br>  PUSHDATA(sig)<br>  PUSHDATA(serialized redeemScript)<br>  HASH160<br>  PUSHDATA(redeemScriptHash)<br>  EQUAL  </p><p>第二阶段的验证：<br>  PUSHDATA(PubKey)<br>  CHECKSIG  </p><h3 id="多重签名"><a href="#多重签名" class="headerlink" title="多重签名"></a>多重签名</h3><p>例如有5个人，使用其中3个签名可以对账户进行操作<br>最早的多重签名，目前已经不推荐使用  </p><p><strong>input script</strong><br>  ×               (此处的x是因为代码中的bug，向栈中压入一个空元素)<br>  PUSHDATA(Sig_1)<br>  PUSHDATA(Sig_2)<br>  …<br>  PUSHDATA(Sig_M)  </p><p><strong>output script</strong><br>  M<br>  PUSHDATA(pubkey_1)<br>  PUSHDATA(pubkey_2)<br>  …<br>  PUSHDATA(pubkey_N)<br>  N<br>  CHECKMULISIG  </p><h3 id="用P2SH实现多重签名"><a href="#用P2SH实现多重签名" class="headerlink" title="用P2SH实现多重签名"></a>用P2SH实现多重签名</h3><p><strong>input script:</strong><br>  ×<br>  PUSHDATA(Sig_1)<br>  PUSHDATA(Sig_2)<br>  …<br>  PUSHDATA(Sig_M)<br>  PUSHDATA(serialized RedeemScript)  </p><p><strong>output script:</strong><br>  HASH160<br>  PUSHDATA(redeemScriptHash)<br>  EQUAL  </p><p><strong>redeemScript:</strong><br>  M<br>  PUSHDATA(pubkey_1)<br>  PUSHDATA(pubkey_2)<br>  …<br>  PUSHDATA(pubkey_N)<br>  N<br>  CHECKMULISIG  </p><hr><p>脚本执行过程：  </p><p>第一阶段：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FALSE </span><br><span class="line">PUSHDATA(Sig_1)  </span><br><span class="line">PUSHDATA(Sig_2)  </span><br><span class="line">PUSHDATA(seriRS)</span><br><span class="line">HASH160  </span><br><span class="line">PUSHDATA(RSH)  </span><br><span class="line">EQUAL</span><br></pre></td></tr></table></figure><p>第二阶段：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">PUSHDATA(pubkey_1)  </span><br><span class="line">PUSHDATA(pubkey_2)  </span><br><span class="line">PUSHDATA(pubkey_3)</span><br><span class="line">3</span><br><span class="line">CHECKMULISIG</span><br></pre></td></tr></table></figure><h2 id="Proof-of-Burn"><a href="#Proof-of-Burn" class="headerlink" title="Proof of Burn"></a>Proof of Burn</h2><ul><li>output script  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RETURN </span><br><span class="line">  [zero or more ops or text]</span><br></pre></td></tr></table></figure></li></ul><p>这种形式的output被称为：<br>  Provably Unspendable/Prunable Outputs</p><ul><li>脚本说明：<br>假如有一个交易的input指向这个output，不论input里的input script如何设计，执行到RETURN命令之后都会直接返回false，不会执行RETURN后面的其他指令，所以这个outpu无法再花出去，其对应的UTXO也就可以被剪枝了，无需保存。</li></ul><h1 id="比特币分叉-fork"><a href="#比特币分叉-fork" class="headerlink" title="比特币分叉(fork)"></a>比特币分叉(fork)</h1><p>成因：  </p><ul><li><p>state fork<br>挖矿时，两个矿工几乎同时发布区块，就会产生一个临时性的分叉  </p><ul><li>forking attack(deliberate fork)</li></ul></li><li><p>protocal fork<br>因为使用不同版本的协议产生的分叉   </p><ul><li>hard fork</li><li>soft fork</li></ul></li></ul><h2 id="hard-fork"><a href="#hard-fork" class="headerlink" title="hard fork"></a>hard fork</h2><p>对比特币协议内容的分歧，例如区块的大小限制  </p><p>假设新节点更新了协议，旧节点没有更新，那么新节点挖出来的区块不被旧节点认可，新节点在新分叉1上挖，旧节点在分叉2上挖，会产生永久的分叉。</p><h2 id="soft-fork"><a href="#soft-fork" class="headerlink" title="soft fork"></a>soft fork</h2><p>对比特币协议添加一些限制，使得原来合法的交易（区块）在新的协议中不合法。  </p><p>假设区块大小由1M改为0.5M，新节点更新了协议，旧节点没有更新，新节点挖出的区块被老节点认可，老节点挖出的区块不被认可，会出现暂时的分叉。  </p><p>实际情况：  </p><ol><li>给之没有用到的域添加新的含义，coinbase</li><li>P2SH</li></ol><h1 id="比特币的匿名性"><a href="#比特币的匿名性" class="headerlink" title="比特币的匿名性"></a>比特币的匿名性</h1><p>假如银行使用化名，其匿名性是比比特币好的。  </p><p>破坏匿名性：  </p><ol><li>不同的账户间能建立联系</li><li>线下交易</li></ol><p>实现匿名性：  </p><ol><li>coin mixing</li></ol><h2 id="零知识证明"><a href="#零知识证明" class="headerlink" title="零知识证明"></a>零知识证明</h2><p>零知识证明是指一方（证明者）向另一方（验证者）证明一个陈述是正确的，而无需透露除该陈述是正确的外的任何信息。  </p><p>例子： 证明这个账户属于我，可以发布签名</p><h2 id="同态隐藏"><a href="#同态隐藏" class="headerlink" title="同态隐藏"></a>同态隐藏</h2><ul><li>如果x,y不同，那么他们的加密函数值E(x), E(y)也不相同</li><li>给定E(x)的值，很难反推出x的值</li><li>给定E(x)和E(y)的值，我们可以和容易的计算出某些关于x,y的加密函数值<ul><li>同态加法： 通过E(x)和E(y)计算出E(x+y)的值</li><li>同态乘法： 通过E(x)和E(y)计算出E(xy)的值</li><li>扩展到多项式</li></ul></li></ul><p>例子：<br>Alice想要想Bob证明她知道一组数x和y使得x+y=7,同时不让Bob知道x和y的具体数值。  </p><p>简单的版本：  </p><ul><li>Alice把E(x)和E(y)的值发给Bob</li><li>Bob通过收到的E(x)和E(y)计算E(x+y)的值</li><li>Bob同时计算E(7)的值，如果E(x+y) = E(7),那么验证通过，否则失败。</li></ul><p>盲签方法：  </p><ul><li>用户A提供SerialNum，银行在不知道SerialNum的情况下返回签名Token，减少A的存款</li><li>用户A把SerialNum和Token交给B完成交易</li><li>用户B拿SerialNum和Token给银行验证，银行验证通过，增加B的存款</li><li>银行无法把A和B联系起来</li><li>中心化</li></ul><h2 id="零币和零钞"><a href="#零币和零钞" class="headerlink" title="零币和零钞"></a>零币和零钞</h2><ul><li>零币和零钞在协议层融合匿名化处理，其匿名属性来自密码学保证</li><li>零币(zerocoin)系统中存在基础币和零币，通过基础币和零币的来回转换，消除旧地址和新地址的关联性，其原理类似于混币服务。</li><li>零钞(zerocash)系统使用zk-SNARKs协议，不依赖一种基础货币，区块链中只记录交易的存在性和矿工用来验证系统正常运行所需要关键属性的证明。区块链上既不显示交易地址也不显示交易金额，所有交易通过零知识验证的方式进行。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;密码学原理&quot;&gt;&lt;a href=&quot;#密码学原理&quot; class=&quot;headerlink&quot; title=&quot;密码学原理&quot;&gt;&lt;/a&gt;密码学原理&lt;/h1&gt;&lt;h2 id=&quot;密码学哈希函数&quot;&gt;&lt;a href=&quot;#密码学哈希函数&quot; class=&quot;headerlink&quot; title=&quot;密码学哈希函数&quot;&gt;&lt;/a&gt;密码学哈希函数&lt;/h2&gt;
    
    </summary>
    
      <category term="区块链技术与应用" scheme="https://bruceeezhao.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="区块链" scheme="https://bruceeezhao.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="比特币" scheme="https://bruceeezhao.github.io/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>rails-admin自定义行为</title>
    <link href="https://bruceeezhao.github.io/2019/12/10/rails-admin%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA/"/>
    <id>https://bruceeezhao.github.io/2019/12/10/rails-admin自定义行为/</id>
    <published>2019-12-10T10:45:48.000Z</published>
    <updated>2020-02-07T12:29:06.139Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<br><a href="http://dmitrypol.github.io/2015/09/10/rails-admin.html" target="_blank" rel="noopener">http://dmitrypol.github.io/2015/09/10/rails-admin.html</a><br><a href="http://fernandomarcelo.com/2012/05/rails-admin-creating-a-custom-action/" target="_blank" rel="noopener">http://fernandomarcelo.com/2012/05/rails-admin-creating-a-custom-action/</a></p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li><a href="https://stackoverflow.com/questions/2778522/rails-update-attribute-vs-update-attributes" target="_blank" rel="noopener">Rails: update_attribute vs update_attributes</a>  </li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ol><li><p>lib/rails_admin_course_open.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rails_admin/config/actions'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rails_admin/config/actions/base'</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">RailsAdminCourseOpen</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">RailsAdmin</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Config</span></span></span><br><span class="line">    <span class="class"><span class="keyword">module</span> <span class="title">Actions</span></span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">CourseOpen</span> &lt; RailsAdmin::Config::<span class="title">Actions::Base</span></span></span><br><span class="line">        <span class="comment"># There are several options that you can set here. </span></span><br><span class="line">        <span class="comment"># Check https://github.com/sferik/rails_admin/blob/master/lib/rails_admin/config/actions/base.rb for more info.</span></span><br><span class="line"> </span><br><span class="line">        register_instance_option <span class="symbol">:bulkable?</span> <span class="keyword">do</span></span><br><span class="line">          <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">        register_instance_option <span class="symbol">:controller</span> <span class="keyword">do</span></span><br><span class="line">          Proc.new <span class="keyword">do</span></span><br><span class="line">            <span class="comment"># Get all selected rows</span></span><br><span class="line">            @objects = list_entries(@model_config, <span class="symbol">:destroy</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># Update field open to true</span></span><br><span class="line">            @objects.each <span class="keyword">do</span> <span class="params">|object|</span></span><br><span class="line">                object.update_attribute(<span class="symbol">:open</span>, <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">            flash[<span class="symbol">:success</span>] = <span class="string">"<span class="subst">#&#123;@model_config.label&#125;</span> successfully opend."</span></span><br><span class="line"> </span><br><span class="line">            redirect_to back_or_index</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">CourseClose</span> &lt; RailsAdmin::Config::<span class="title">Actions::Base</span></span></span><br><span class="line">        <span class="comment"># There are several options that you can set here. </span></span><br><span class="line">        <span class="comment"># Check https://github.com/sferik/rails_admin/blob/master/lib/rails_admin/config/actions/base.rb for more info.</span></span><br><span class="line"> </span><br><span class="line">        register_instance_option <span class="symbol">:bulkable?</span> <span class="keyword">do</span></span><br><span class="line">          <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">        register_instance_option <span class="symbol">:controller</span> <span class="keyword">do</span></span><br><span class="line">          Proc.new <span class="keyword">do</span></span><br><span class="line">            <span class="comment"># Get all selected rows</span></span><br><span class="line">            @objects = list_entries(@model_config, <span class="symbol">:destroy</span>)</span><br><span class="line">            <span class="comment"># Update field open to true</span></span><br><span class="line">            @objects.each <span class="keyword">do</span> <span class="params">|object|</span></span><br><span class="line">                object.update_attribute(<span class="symbol">:open</span>, <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">            flash[<span class="symbol">:success</span>] = <span class="string">"<span class="subst">#&#123;@model_config.label&#125;</span> successfully closed."</span></span><br><span class="line"> </span><br><span class="line">            redirect_to back_or_index</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>config/initializers/rails_admin.rb  注册</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">RailsAdmin.config <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># Register the class in lib/rails_admin_publish.rb</span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">RailsAdmin</span></span></span><br><span class="line">    <span class="class"><span class="keyword">module</span> <span class="title">Config</span></span></span><br><span class="line">      <span class="class"><span class="keyword">module</span> <span class="title">Actions</span></span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CourseOpen</span> &lt; RailsAdmin::Config::<span class="title">Actions::Base</span></span></span><br><span class="line">          RailsAdmin::Config::Actions.register(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CourseClose</span> &lt; RailsAdmin::Config::<span class="title">Actions::Base</span></span></span><br><span class="line">          RailsAdmin::Config::Actions.register(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  config.actions <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># root actions</span></span><br><span class="line">    dashboard                     <span class="comment"># mandatory</span></span><br><span class="line">    <span class="comment"># collection actions</span></span><br><span class="line">    index                         <span class="comment"># mandatory</span></span><br><span class="line">    new</span><br><span class="line">    export</span><br><span class="line">    history_index</span><br><span class="line">    bulk_delete</span><br><span class="line">    <span class="comment"># member actions</span></span><br><span class="line">    show</span><br><span class="line">    edit</span><br><span class="line">    delete</span><br><span class="line">    history_show</span><br><span class="line">    <span class="comment"># show_in_app</span></span><br><span class="line">    course_open <span class="keyword">do</span></span><br><span class="line">      <span class="comment"># Make it visible only for Course model. You can remove this if you don't need.</span></span><br><span class="line">      visible <span class="keyword">do</span></span><br><span class="line">        bindings[<span class="symbol">:abstract_model</span>].model.to_s == <span class="string">"Course"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    course_close <span class="keyword">do</span></span><br><span class="line">      <span class="comment"># Make it visible only for Course model. You can remove this if you don't need.</span></span><br><span class="line">      visible <span class="keyword">do</span></span><br><span class="line">        bindings[<span class="symbol">:abstract_model</span>].model.to_s == <span class="string">"Course"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>config/locales/zh-CN.yml</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">actions:</span></span><br><span class="line">     <span class="symbol">course_open:</span></span><br><span class="line">       <span class="symbol">menu:</span> <span class="string">"开启选课"</span></span><br><span class="line">       <span class="symbol">bulk_link:</span> <span class="string">"开启选课%&#123;model_label_plural&#125;"</span></span><br><span class="line">     <span class="symbol">course_close:</span></span><br><span class="line">       <span class="symbol">menu:</span> <span class="string">"关闭选课"</span></span><br><span class="line">       <span class="symbol">bulk_link:</span> <span class="string">"关闭选课%&#123;model_label_plural&#125;"</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;http://dmitrypol.github.io/2015/09/10/rails-admin.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://dmitrypol.github.io/2015/09/10/rails-admin.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://fernandomarcelo.com/2012/05/rails-admin-creating-a-custom-action/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://fernandomarcelo.com/2012/05/rails-admin-creating-a-custom-action/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rails使用searchkick和elasticsearch进行全文搜索</title>
    <link href="https://bruceeezhao.github.io/2019/12/10/rails%E4%BD%BF%E7%94%A8searchkick%E5%92%8Celasticsearch%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    <id>https://bruceeezhao.github.io/2019/12/10/rails使用searchkick和elasticsearch进行全文搜索/</id>
    <published>2019-12-10T10:43:04.000Z</published>
    <updated>2020-02-07T12:17:45.411Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<br><a href="https://code.tutsplus.com/articles/full-text-search-in-rails-using-elasticsearch--cms-22920" target="_blank" rel="noopener">https://code.tutsplus.com/articles/full-text-search-in-rails-using-elasticsearch–cms-22920</a><br><a href="https://github.com/ankane/searchkick/blob/v3.1.3/README.md" target="_blank" rel="noopener">https://github.com/ankane/searchkick/blob/v3.1.3/README.md</a></p><a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><table><thead><tr><th>软件名称</th><th>版本号</th></tr></thead><tbody><tr><td>rails</td><td>4.2.5.2</td></tr><tr><td>ruby</td><td>2.3.8</td></tr><tr><td>gem</td><td>2.7.7</td></tr><tr><td>bundle</td><td>2.0.2</td></tr><tr><td>searchkick</td><td>3.1.3</td></tr><tr><td>elasticsearch</td><td>5.6.16</td></tr><tr><td>ik</td><td>5.6.16</td></tr></tbody></table><h2 id="选择依据"><a href="#选择依据" class="headerlink" title="选择依据"></a>选择依据</h2><p><img src="//bruceeezhao.github.io/2019/12/10/rails使用searchkick和elasticsearch进行全文搜索/search.png" alt="搜索方式活跃度"><br><a href="https://www.ctolib.com/article/compares/14566" target="_blank" rel="noopener">图片来源</a></p><p>根据上图来看，searchkick在热门度和活跃度上都有不错的表现。  </p><p>以下是主要的搜索gem简介：<a href="https://www.ctolib.com/awesome-rails-gem.html#searchingz" target="_blank" rel="noopener">来源</a></p><ul><li>ransack - Ransack enables the creation of both simple and advanced search forms for your Ruby on Rails application.</li><li>elasticsearch-rails - Elasticsearch integrations for ActiveModel/Record and Ruby on Rails.</li><li>Chewy - High-level Elasticsearch Ruby framework based on the official elasticsearch-ruby client.</li><li>pg_search - pg_search builds ActiveRecord named scopes that take advantage of PostgreSQL’s full text search</li><li>sunspot - Sunspot is a Ruby library for expressive, powerful interaction with the Solr search engine. Sunspot is built on top of the RSolr library, which provides a low-level interface for Solr interaction; Sunspot provides a simple, intuitive, expressive DSL backed by powerful features for indexing objects and searching for them.</li><li>searchkick - Intelligent search made easy with Rails and Elasticsearch.</li></ul><h1 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h1><h2 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h2><p><a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch" target="_blank" rel="noopener">elasticsearch下载地址</a>  </p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo dpkg -i elasticsearch-5.6.16.deb</span><br><span class="line"><span class="meta">#</span> 开启服务</span><br><span class="line"><span class="meta">$</span> service elasticsearch start</span><br><span class="line"><span class="meta">#</span> 验证是否启动成功</span><br><span class="line"><span class="meta">$</span> curl 127.0.0.1:9200</span><br><span class="line">&#123;</span><br><span class="line">  "name" : "lCl9Rc9",</span><br><span class="line">  "cluster_name" : "elasticsearch",</span><br><span class="line">  "cluster_uuid" : "HpWOmNyOR0aqA0aZeG3gGA",</span><br><span class="line">  "version" : &#123;</span><br><span class="line">    "number" : "5.6.16",</span><br><span class="line">    "build_hash" : "3a740d1",</span><br><span class="line">    "build_date" : "2019-03-13T15:33:36.565Z",</span><br><span class="line">    "build_snapshot" : false,</span><br><span class="line">    "lucene_version" : "6.6.1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "tagline" : "You Know, for Search"</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span> 看到类似上面的输出则证明服务启动成功</span><br><span class="line"><span class="meta">#</span> 设置服务开机自启</span><br><span class="line"><span class="meta">$</span> systemctl enable elasticsearch.service</span><br></pre></td></tr></table></figure><h2 id="ik插件"><a href="#ik插件" class="headerlink" title="ik插件"></a>ik插件</h2><p>ik插件是elasticsearch中文分词插件<br><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">ik插件项目地址</a></p><p>安装:  </p><ol><li>download or compile</li></ol><p><strong>optional 1</strong></p><ul><li>download pre-build package from here: <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></li></ul><p>create plugin folder <code>cd your-es-root/plugins/ &amp;&amp; mkdir ik</code></p><p>unzip plugin to folder <code>your-es-root/plugins/ik</code></p><p><strong>optional 2</strong></p><ul><li>use elasticsearch-plugin to install ( supported from version v5.5.1 ):<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.16/elasticsearch-analysis-ik-5.6.16.zip</span><br></pre></td></tr></table></figure></li></ul><p><strong>NOTE: replace 5.6.16 to your own elasticsearch version</strong></p><ol start="2"><li>restart elasticsearch</li></ol><h2 id="elasticsearch可视化"><a href="#elasticsearch可视化" class="headerlink" title="elasticsearch可视化"></a>elasticsearch可视化</h2><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ol><li><p>app/models/course.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span> &lt; ActiveRecord::Base</span></span><br><span class="line">  searchkick <span class="symbol">language:</span> <span class="string">"chinese"</span></span><br></pre></td></tr></table></figure></li><li><p>app/helpers/search_helper.rb</p></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">SearchHelper</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">search</span></span></span><br><span class="line">    <span class="keyword">if</span> params[<span class="symbol">:term</span>] == <span class="string">""</span> <span class="keyword">or</span> params[<span class="symbol">:term</span>].<span class="literal">nil</span>?</span><br><span class="line">      @courses = []</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      term = params[<span class="symbol">:term</span>]</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 搜索，按照短语的方式</span></span><br><span class="line">      <span class="keyword">for</span> res <span class="keyword">in</span> Course.search term, <span class="symbol">highlight:</span> <span class="literal">true</span>, <span class="symbol">match:</span> <span class="symbol">:phrase</span></span><br><span class="line">        @courses &lt;&lt; res</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 分页</span></span><br><span class="line">      @courses = Kaminari.paginate_array(tmp).page(params[<span class="symbol">:page</span>]).per(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> @courses</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>app/views/search/_form.html.erb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= form_for :term, url: list_courses_path, method: :get do |form| %&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;%= text_field_tag :term, params[:term] %&gt;</span><br><span class="line">    &lt;%= submit_tag &quot;Search&quot;, name: nil %&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;% end %&gt;</span><br></pre></td></tr></table></figure></li><li><p>app/views/courses/list.html.erb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= render &apos;search/form&apos; %&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;https://code.tutsplus.com/articles/full-text-search-in-rails-using-elasticsearch--cms-22920&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://code.tutsplus.com/articles/full-text-search-in-rails-using-elasticsearch–cms-22920&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/ankane/searchkick/blob/v3.1.3/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ankane/searchkick/blob/v3.1.3/README.md&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="rails" scheme="https://bruceeezhao.github.io/categories/rails/"/>
    
    
      <category term="rails" scheme="https://bruceeezhao.github.io/tags/rails/"/>
    
      <category term="searchkick" scheme="https://bruceeezhao.github.io/tags/searchkick/"/>
    
      <category term="elasticsearch" scheme="https://bruceeezhao.github.io/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
